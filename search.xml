<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang zk大量disconnected event</title>
      <link href="/golang-zk-statedisconnected/"/>
      <url>/golang-zk-statedisconnected/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在容器平台上我们提供了<code>zk</code>做白名单功能，<code>Pod</code>启动时 sidecar会自动注册<code>zk</code>。昨天遇到<code>zk server</code>抖动，<code>sidecar</code>容器输出大量<code>StateDisconnected</code>事件，zk正常后仍无法恢复，由于大量日志造成<code>sidecar</code>容器 cpu占用过高，进而引发<code>dockerd</code>cpu占用过高，严重时影响dockerd正常调用。</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>正常情况下，<code>sidecar</code>启动后会去注册<code>zk</code>：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># docker logs -f 01a1a4a74785</span>I0302 15:04:05.476463       1 manager.go:116<span class="token punctuation">]</span> start run plugin zk2021/03/02 15:04:05 Connected to 10.38.161.60:11000I0302 15:04:05.488006       1 zk.go:152<span class="token punctuation">]</span> zookeeper connect succeed: zk.srv:110002021/03/02 15:04:05 authenticated: id<span class="token operator">=</span>33746806328105493, timeout<span class="token operator">=</span>300002021/03/02 15:04:05 re-submitting <span class="token variable"><span class="token variable">`</span>0<span class="token variable">`</span></span> credentials after reconnectI0302 15:04:05.516446       1 zk.go:220<span class="token punctuation">]</span> watching zk node:<span class="token punctuation">[</span>/tasks/cluster.xxx_default_deployment.htool/10.46.12.72<span class="token punctuation">]</span> <span class="token keyword">in</span> cluster<span class="token punctuation">[</span>xxx<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#注册成功，开始watch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>iptable</code>s来模拟异常，首先进入到容器<code>network namesapce</code></p><pre class="line-numbers language-bash"><code class="language-bash">pod<span class="token operator">=</span>htool-6875bcb898-w7llccontainerid<span class="token operator">=</span><span class="token punctuation">$(</span>docker <span class="token function">ps</span> <span class="token operator">|</span><span class="token function">grep</span> <span class="token variable">$pod</span><span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token operator">|</span><span class="token function">head</span> -n 1<span class="token punctuation">)</span>pid<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>docker inspect -f <span class="token punctuation">{</span><span class="token punctuation">{</span>.State.Pid<span class="token punctuation">}</span><span class="token punctuation">}</span> $containerid<span class="token variable">)</span></span>nsenter -n --target <span class="token variable">$pid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用<code>iptables</code> <code>drop</code>掉发往<code>zk</code>的请求(11000为zk server端口)</p><pre class="line-numbers language-bash"><code class="language-bash">iptables -A OUTPUT -p tcp -m tcp --dport 11000 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>zk client自动重试（1s一次），日志显示<code>Failed to connect to 10.38.161.54:11000: dial tcp 10.38.161.54:11000: i/o timeout</code></p><pre class="line-numbers language-bash"><code class="language-bash">I0302 15:04:05.516446       1 zk.go:220<span class="token punctuation">]</span> watching zk node:<span class="token punctuation">[</span>/tasks/cluster.xxx_default_deployment.htool/10.46.12.72<span class="token punctuation">]</span> <span class="token keyword">in</span> cluster<span class="token punctuation">[</span>xxx<span class="token punctuation">]</span>2021/03/02 15:08:55 recv loop terminated: err<span class="token operator">=</span>failed to <span class="token function">read</span> from connection: <span class="token function">read</span> tcp 10.46.12.72:36884-<span class="token operator">></span>10.38.161.60:11000: i/o <span class="token function">timeout</span>2021/03/02 15:08:55 send loop terminated: err<span class="token operator">=</span><span class="token operator">&lt;</span>nil<span class="token operator">></span>2021/03/02 15:08:56 Failed to connect to 10.38.161.54:11000: dial tcp 10.38.161.54:11000: i/o <span class="token function">timeout</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>网络恢复，删除<code>iptables</code></p><pre class="line-numbers language-bash"><code class="language-bash">iptables -D OUTPUT -p tcp -m tcp --dport 11000 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现大量<code>StateDisconnected</code>日志</p><pre class="line-numbers language-bash"><code class="language-bash">I0302 15:09:50.951897       1 zk.go:232<span class="token punctuation">]</span> Unknown zk event<span class="token punctuation">[</span>StateDisconnected<span class="token punctuation">]</span> <span class="token keyword">for</span> znode:<span class="token punctuation">[</span>/tasks/cluster.xxx_default_deployment.htool/10.46.12.72<span class="token punctuation">]</span>I0302 15:09:50.951893       1 zk.go:232<span class="token punctuation">]</span> Unknown zk event<span class="token punctuation">[</span>StateDisconnected<span class="token punctuation">]</span> <span class="token keyword">for</span> znode:<span class="token punctuation">[</span>/tasks/cluster.xxx_default_deployment.htool/10.46.12.72<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="问题分析-1"><a href="#问题分析-1" class="headerlink" title="问题分析"></a>问题分析</h3><p><code>sidecar</code>中zk watch代码如下：</p><pre class="line-numbers language-golang"><code class="language-golang">exist, _, eventCh, err := conn.ExistsW(node) //监听zk事件watcher:        for {                select {                case e := <-eventCh:                        switch e.State {                        case zk.StateExpired:                                return fmt.Errorf("node[%v] expired", node)                        case zk.StateConnected, zk.StateHasSession:                                return fmt.Errorf("Get zk event: %v ", e.State)                        default:                                klog.Infof("Get zk event[%v] for znode:[%v]", e.State, node) // 出错位置                        }                case <-ctx.Done():                        // we close the conn in caller                        break watcher                }        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ExistsW</code>函数由<code>github.com/samuel/go-zookeeper/zk</code>库提供，监听zk给定目录的事件</p><pre class="line-numbers language-golang"><code class="language-golang">func (c *Conn) ExistsW(path string) (bool, *Stat, <-chan Event, error) {    var ech <-chan Event    ...    ech = c.addWatcher(path, watchTypeData)    return exists, &res.Stat, ech, err}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当zk异常恢复后，<code>c.addWatcher</code>中的<code>channel</code>被<code>close</code>，即<code>sidecar</code>中<code>eventCh</code>关闭，进入死循环。</p><h3 id="修复验证"><a href="#修复验证" class="headerlink" title="修复验证"></a>修复验证</h3><p>知道了原因，修复很简单，判断下eventCh状态即可</p><pre class="line-numbers language-golang"><code class="language-golang">    for {        select {        case e, ok := <-eventCh:            if !ok {                return fmt.Errorf("event channel closed")            }            if e.Err != nil {                return fmt.Errorf("Get zk event: %v, err: %v", e.State, e.Err)            }            switch e.State {            case zk.StateExpired:                return fmt.Errorf("node[%v] expired", node)            case zk.StateConnected, zk.StateHasSession:                return fmt.Errorf("Get zk event: %v ", e.State)            default:                klog.Infof("Get zk event[%v] for znode:[%v]", e.State, node)            }        }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在修复代码后，再次验证可正常注册</p><pre class="line-numbers language-golang"><code class="language-golang">2021/03/02 15:13:40 Failed to connect to 10.38.161.60:11000: dial tcp 10.38.161.60:11000: i/o timeout2021/03/02 15:13:40 Connected to 10.38.161.55:110002021/03/02 15:13:40 authentication failed: zk: session has been expired by the serverW0302 15:13:40.222923       1 zk.go:300] meet error when watching node path: Get zk event: StateDisconnected, err: zk: session has been expired by the server2021/03/02 15:13:40 Connected to 10.38.161.54:110002021/03/02 15:13:40 authenticated: id=177861994644216038, timeout=300002021/03/02 15:13:40 re-submitting `1` credentials after reconnectI0302 15:13:41.238524       1 zk.go:220] watching zk node:[/tasks/cluster.xxx_default_deployment.htool/10.46.12.72] in cluster[xxx]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题其实与<code>zk</code>没关系，是由于没有判断<code>channel</code>状态，陷入死循环。通常情况下大部分应用只有退出时才会关闭<code>channel</code>，不需要特殊处理。</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> zk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s中shell脚本启动如何传递信号</title>
      <link href="/docker-shell-signal/"/>
      <url>/docker-shell-signal/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在k8s或docker中，有时候我们需要通过shell来启动程序，但是默认shell不会传递信号（sigterm）给子进程，当在pod终止时应用无法优雅退出，直到最大时间时间后强制退出（<code>kill -9</code>）。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>普通情况下，大多业务的启动命令如下</p><pre class="line-numbers language-bash"><code class="language-bash">command: <span class="token punctuation">[</span><span class="token string">"binary"</span>, <span class="token string">"-flags"</span>, <span class="token punctuation">..</span>.<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主进程做为1号进程会收到<code>sigterm</code>信号，优雅退出(需要程序捕获信号); 而通过脚本启动时，<code>shell</code>作为1号进程，不会显示传递信号给子进程，造成子进程无法优雅退出，直到最大退出时间后强制终止。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><p>如何只需一个进程收到信号，可通过<code>exec</code>，<code>exec</code>会替换当前shell进程，即<code>pid</code>不变</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#! /bin/bash</span><span class="token comment" spellcheck="true"># do something</span><span class="token function">exec</span> binay -flags <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>正常情况测试命令如下，使用sleep来模拟应用<code>sh -c &#39;echo &quot;start&quot;; sleep 100&#39;</code>：<br><code>pstree</code>展示如下，<code>sleep</code>进程会生成一个子进程</p><pre><code>bash(28701)───sh(24588)───sleep(24589)</code></pre><p>通过<code>exec</code>运行后，命令<code>sh -c &#39;echo &quot;start&quot;; exec sleep 100&#39;</code></p><pre><code>bash(28701)───sleep(24664)</code></pre><p>加入<code>exec</code>后，<code>sleep</code>进程替换了shell进程，没有生成子进程</p><p>此种方式可以收到信号，但只适用于一个子进程的情况</p><h3 id="trap"><a href="#trap" class="headerlink" title="trap"></a>trap</h3><p>在shell中可以显示通过<code>trap</code>捕捉信号传递给子进程</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">echo</span> <span class="token string">"start"</span>binary -flags<span class="token punctuation">..</span>. <span class="token operator">&amp;</span>pid<span class="token operator">=</span><span class="token string">"<span class="token variable">$!</span>"</span>_kill<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"receive sigterm"</span>  <span class="token function">kill</span> <span class="token variable">$pid</span> <span class="token comment" spellcheck="true">#传递给子进程</span>  <span class="token function">wait</span> <span class="token variable">$pid</span>  <span class="token keyword">exit</span> 0<span class="token punctuation">}</span><span class="token function">trap</span> _kill SIGTERM <span class="token comment" spellcheck="true">#捕获信号</span><span class="token function">wait</span> <span class="token comment" spellcheck="true">#等待子进程退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此种方式需要改动启动脚本，显示传递信号给子进程</p><h2 id="docker-init"><a href="#docker-init" class="headerlink" title="docker-init"></a>docker-init</h2><p><a href="https://docs.docker.com/engine/reference/run/#specify-an-init-process" target="_blank" rel="noopener">docker-init</a>即在docker启动时加入<code>--init</code>参数，docker-int会作为一号进程，会向子进程传递信号并且会回收僵尸进程。</p><p>遗憾的是k8s并不支持<code>--init</code>参数，用户可在镜像中声明init进程，更多可参考<a href="./container-init.md">container-init</a></p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">RUN wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64RUN chmod +x /usr/bin/dumb-initENTRYPOINT ["/usr/bin/dumb-init", "-v", "--"]CMD ["nginx", "-g", "daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优化Kubernetes集群内DNS</title>
      <link href="/k8s-dns-optimize/"/>
      <url>/k8s-dns-optimize/</url>
      
        <content type="html"><![CDATA[<p>kubernetes集群内置的dns插件<code>kubedns/coredns</code>在高并发情况下可能遇到性能瓶颈，以下从配置与本地缓存方面说明如何减少dns查询失败率，提高性能。</p><h2 id="配置优化"><a href="#配置优化" class="headerlink" title="配置优化"></a>配置优化</h2><h3 id="dnsPolicy"><a href="#dnsPolicy" class="headerlink" title="dnsPolicy"></a>dnsPolicy</h3><p>k8s 默认的 <code>dnsPolicy</code> 是<code>ClusterFirst</code>，因为 <code>ndots</code> 和 <code>serach domain</code> 在访问外部 dns 会有额外的查询次数。</p><pre class="line-numbers language-bash"><code class="language-bash">/ <span class="token comment" spellcheck="true"># cat /etc/resolv.conf </span>nameserver 10.254.0.2search default.svc.cluster.local svc.cluster.local cluster.localoptions ndots:5/ <span class="token comment" spellcheck="true"># </span>/ <span class="token comment" spellcheck="true"># </span>/ <span class="token comment" spellcheck="true">#  host -v mi.com</span>Trying <span class="token string">"mi.com.default.svc.cluster.local"</span>Trying <span class="token string">"mi.com.svc.cluster.local"</span>Trying <span class="token string">"mi.com.cluster.local"</span>Trying <span class="token string">"mi.com"</span><span class="token punctuation">;</span><span class="token punctuation">;</span> -<span class="token operator">>></span>HEADER<span class="token operator">&lt;&lt;</span>- opcode: QUERY, status: NOERROR, id: 38967<span class="token punctuation">;</span><span class="token punctuation">;</span> flags: qr rd ra<span class="token punctuation">;</span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0<span class="token punctuation">;</span><span class="token punctuation">;</span> QUESTION SECTION:<span class="token punctuation">;</span>mi.com.                                IN        A<span class="token punctuation">;</span><span class="token punctuation">;</span> ANSWER SECTION:mi.com.                        30        IN        A        58.83.160.156<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不访问service，调整<code>dnsPolicy</code>为<code>Default</code>，直接走宿主机的dns</p><h3 id="ndots"><a href="#ndots" class="headerlink" title="ndots"></a>ndots</h3><p>如需访问service，尽量减少<code>ndots</code>（默认5）即域名中点的个数小于<code>ndots</code>会按照search域（mi.com.default.svc.cluster.local）依次查询，若查询不到再查询原始域名，总共进行8次dns查询（4次ipv4, 4次ipv6）</p><p>设置<code>ndots</code>为1后，只有两次查询（1次ipv4, ipv6）</p><pre class="line-numbers language-bash"><code class="language-bash">/ <span class="token comment" spellcheck="true">#  host -v mi.com</span>Trying <span class="token string">"mi.com"</span><span class="token punctuation">;</span><span class="token punctuation">;</span> -<span class="token operator">>></span>HEADER<span class="token operator">&lt;&lt;</span>- opcode: QUERY, status: NOERROR, id: 23894<span class="token punctuation">;</span><span class="token punctuation">;</span> flags: qr rd ra<span class="token punctuation">;</span> QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0<span class="token punctuation">;</span><span class="token punctuation">;</span> QUESTION SECTION:<span class="token punctuation">;</span>mi.com.                                IN        A<span class="token punctuation">;</span><span class="token punctuation">;</span> ANSWER SECTION:mi.com.                        30        IN        A        58.83.160.156<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但此种方式service域名分割大于等于<code>ndots</code>，则解析不到，需要业务自行判断合适的<code>ndots</code>值</p><pre class="line-numbers language-bash"><code class="language-bash">/ <span class="token comment" spellcheck="true">#  host -v prometheus.kube-system</span>Trying <span class="token string">"prometheus.kube-system"</span>Host prometheus.kube-system not found: 3<span class="token punctuation">(</span>NXDOMAIN<span class="token punctuation">)</span>Received 115 bytes from 10.254.0.2<span class="token comment" spellcheck="true">#53 in 8 ms</span>Received 115 bytes from 10.254.0.2<span class="token comment" spellcheck="true">#53 in 8 ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="coredns优化"><a href="#coredns优化" class="headerlink" title="coredns优化"></a>coredns优化</h3><p>调整合理的副本数，阿里建议<code>coredns:node=1:8</code>，启动<code>AutoPath</code>插件减少查询次数，见<a href="2">DNS性能优化</a></p><h2 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h2><h3 id="NodeLocalDNS"><a href="#NodeLocalDNS" class="headerlink" title="NodeLocalDNS"></a>NodeLocalDNS</h3><p>NodeLocal DNSCache 通过在集群节点上作为 DaemonSet 运行 dns 缓存代理来提高集群 DNS 性能，<br>借助这种新架构，Pods 将可以访问在同一节点上运行的 dns 缓存代理，从而避免了 iptables DNAT 规则和连接跟踪。</p><p>架构如下:<br><img src="https://d33wubrfki0l68.cloudfront.net/bf8e5eaac697bac89c5b36a0edb8855c860bfb45/6944f/images/docs/nodelocaldns.svg" alt="local-dns"></p><p>NodeLocalDNS的设计提案见（<a href="3">nodelocal-dns-cache</a>）</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>官方安装方式见<a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/dns/nodelocaldns" target="_blank" rel="noopener">nodelocaldns</a>，需要自行替换变量</p><p>可通过如下脚本，一键安装（注意设置kubedns svc ClusterIP）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">wget</span> https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/nodelocaldns/nodelocaldns.yaml<span class="token comment" spellcheck="true"># registery</span>docker_registery<span class="token operator">=</span>k8s.gcr.io/dns/k8s-dns-node-cache<span class="token comment" spellcheck="true"># kube-dns svc clusterip</span>kubedns_svc<span class="token operator">=</span>10.254.0.2<span class="token comment" spellcheck="true"># nodelocaldns ip</span>nodelocaldns_ip<span class="token operator">=</span>169.254.20.10<span class="token comment" spellcheck="true"># kube-proxy mode, iptables or ipvs</span>kubeproxy_mode<span class="token operator">=</span>iptablesresult<span class="token operator">=</span>result.yaml<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${kubeproxy_mode}</span> <span class="token operator">==</span> <span class="token string">"ipvs"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token function">sed</span> -e <span class="token string">"s|k8s.gcr.io/dns/k8s-dns-node-cache|<span class="token variable">$docker_registery</span>|g"</span> \        -e <span class="token string">"s/__PILLAR__CLUSTER__DNS__/<span class="token variable">$kubedns_svc</span>/g"</span> \        -e <span class="token string">"s/__PILLAR__LOCAL__DNS__/<span class="token variable">$nodelocaldns_ip</span>/g"</span> \        -e <span class="token string">'s/[ |,]__PILLAR__DNS__SERVER__//g'</span> \        -e <span class="token string">"s/__PILLAR__DNS__DOMAIN__/cluster.local/g"</span> nodelocaldns.yaml <span class="token operator">></span><span class="token variable">$result</span><span class="token keyword">else</span>    <span class="token function">sed</span> -e <span class="token string">"s|k8s.gcr.io/dns/k8s-dns-node-cache|<span class="token variable">$docker_registery</span>|g"</span> \        -e <span class="token string">"s/__PILLAR__DNS__SERVER__/<span class="token variable">$kubedns_svc</span>/g"</span> \        -e <span class="token string">"s/__PILLAR__LOCAL__DNS__/<span class="token variable">$nodelocaldns_ip</span>/g"</span> \        -e <span class="token string">"s/__PILLAR__DNS__DOMAIN__/cluster.local/g"</span> nodelocaldns.yaml <span class="token operator">></span><span class="token variable">$result</span><span class="token keyword">fi</span>kubectl apply -f <span class="token variable">$result</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建完成后，每个节点运行一个pod，查看pod(个别节点ingress-nginx占用8080端口，导致nodelocaldns启动失败)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kubectl  get po -n kube-system -l k8s-app=node-local-dns -o wide</span>NAME                   READY   STATUS             RESTARTS   AGE    IP              NODE                            NOMINATED NODE   READINESS GATESnode-local-dns-2fvxb   0/1     CrashLoopBackOff   4          103s   10.38.200.195   node04          <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-local-dns-4zmcd   1/1     Running            0          54d    10.38.201.55    node06   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-local-dns-55tzg   1/1     Running            0          60d    10.38.200.186   node02          <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-local-dns-cctg7   1/1     Running            0          54d    10.38.200.242   node07   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-local-dns-khgmm   1/1     Running            0          54d    10.38.201.36    node08   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-local-dns-mbr64   1/1     Running            0          60d    10.38.200.187   node05          <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-local-dns-t67vw   1/1     Running            0          60d    10.38.200.188   node03          <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span>node-local-dns-tmm92   1/1     Running            14         54d    10.38.200.57    node09   <span class="token operator">&lt;</span>none<span class="token operator">></span>           <span class="token operator">&lt;</span>none<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认配置如下：</p><pre class="line-numbers language-bash"><code class="language-bash">cluster.local:53 <span class="token punctuation">{</span>    errors    cache <span class="token punctuation">{</span>            success 9984 30 <span class="token comment" spellcheck="true"># 默认成功缓存30s</span>            denial 9984 5 <span class="token comment" spellcheck="true">#失败缓存5s</span>    <span class="token punctuation">}</span>    reload    loop    bind 169.254.20.10 10.254.0.2 <span class="token comment" spellcheck="true">#本地监听ip</span>    forward <span class="token keyword">.</span> 10.254.132.95 <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">#转发到kubedns-upstream</span>            force_tcp    <span class="token punctuation">}</span>    prometheus :9253 <span class="token comment" spellcheck="true">#监控接口</span>    health 169.254.20.10:8080 <span class="token comment" spellcheck="true">#健康检测端口</span>    <span class="token punctuation">}</span>in-addr.arpa:53 <span class="token punctuation">{</span>    errors    cache 30    reload    loop    bind 169.254.20.10 10.254.0.2    forward <span class="token keyword">.</span> 10.254.132.95 <span class="token punctuation">{</span>            force_tcp    <span class="token punctuation">}</span>    prometheus :9253    <span class="token punctuation">}</span>ip6.arpa:53 <span class="token punctuation">{</span>    errors    cache 30    reload    loop    bind 169.254.20.10 10.254.0.2    forward <span class="token keyword">.</span> 10.254.132.95 <span class="token punctuation">{</span>            force_tcp    <span class="token punctuation">}</span>    prometheus :9253    <span class="token punctuation">}</span>.:53 <span class="token punctuation">{</span>    errors    cache 30    reload    loop    bind 169.254.20.10 10.254.0.2    forward <span class="token keyword">.</span> /etc/resolv.conf    prometheus :9253    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>节点上查看localdns的网卡，本地将监听<code>169.254.20.10</code>与<code>10.254.0.2</code>两个地址，拦截kubedns((默认<code>10.254.0.2</code>)的请求，命中后直接返回，若未命中转发到kubedns(对应service <code>kube-dns-upstream</code>，kube-dns-upstream由localdns创建绑定kubedns pod)</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ip addr show nodelocaldns</span>182232: nodelocaldns: <span class="token operator">&lt;</span>BROADCAST,NOARP<span class="token operator">></span> mtu 1500 qdisc noop state DOWN     link/ether 4e:62:1c:fd:56:12 brd ff:ff:ff:ff:ff:ff    inet 169.254.20.10/32 brd 169.254.20.10 scope global nodelocaldns       valid_lft forever preferred_lft forever    inet 10.254.0.2/32 brd 10.254.0.2 scope global nodelocaldns       valid_lft forever preferred_lft forever<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iptables规则，使用<code>NOTRACK</code>跳过其它表处理</p><pre class="line-numbers language-bash"><code class="language-bash">iptables-save <span class="token operator">|</span> <span class="token function">egrep</span> <span class="token string">"10.254.0.2|169.254.20.10"</span>-A PREROUTING -d 10.254.0.2/32 -p udp -m udp --dport 53 -j NOTRACK-A PREROUTING -d 10.254.0.2/32 -p tcp -m tcp --dport 53 -j NOTRACK-A PREROUTING -d 169.254.20.10/32 -p udp -m udp --dport 53 -j NOTRACK-A PREROUTING -d 169.254.20.10/32 -p tcp -m tcp --dport 53 -j NOTRACK-A OUTPUT -d 10.254.0.2/32 -p udp -m udp --dport 53 -j NOTRACK-A OUTPUT -d 10.254.0.2/32 -p tcp -m tcp --dport 53 -j NOTRACK-A INPUT -d 10.254.0.2/32 -p udp -m udp --dport 53 -j ACCEPT-A INPUT -d 10.254.0.2/32 -p tcp -m tcp --dport 53 -j ACCEPT-A OUTPUT -s 10.254.0.2/32 -p udp -m udp --sport 53 -j ACCEPT-A OUTPUT -s 10.254.0.2/32 -p tcp -m tcp --sport 53 -j ACCEPT<span class="token punctuation">..</span>.-A KUBE-SERVICES -d 10.254.0.2/32 -p tcp -m comment --comment <span class="token string">"kube-system/kube-dns:dns-tcp cluster IP"</span> -m tcp --dport 53 -j KUBE-SVC-ERIFXISQEP7F7OF4-A KUBE-SERVICES -d 10.254.0.2/32 -p tcp -m comment --comment <span class="token string">"kube-system/kube-dns:metrics cluster IP"</span> -m tcp --dport 9153 -j KUBE-SVC-JD5MR3NA4I4DYORP-A KUBE-SERVICES -d 10.254.0.2/32 -p udp -m comment --comment <span class="token string">"kube-system/kube-dns:dns cluster IP"</span> -m udp --dport 53 -j KUBE-SVC-TCOU7JCQXEZGVUNU<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在pod通过localdns解析域名</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kubectl  exec -it dns-perf-client-64cfb49f9-9c5hg sh</span>/ <span class="token comment" spellcheck="true"># nslookup kubernetes 169.254.20.10</span>Server:                169.254.20.10Address:        169.254.20.10<span class="token comment" spellcheck="true">#53</span>Name:        kubernetes.default.svc.cluster.localAddress: 10.254.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="压测"><a href="#压测" class="headerlink" title="压测"></a>压测</h4><p>通过<code>dnsperf</code>进行压测</p><p>测试域名列表如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cat records.txt </span>mi.com Agithub.com Awww.microsoft.com Awww.aliyun.com Akubernetes.io Anginx Anginx.default Akubernetes Akubernetes.default.svc.cluster.local Akube-dns.kube-system.svc.cluster.local A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试命令</p><pre class="line-numbers language-bash"><code class="language-bash">dnsperf -l 120 -s 10.254.0.2 -d records.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下<br>| |client number|qps|avg-lantency(ms)|stddev(ms)|lost| |<br>|:—-|:—-|:—-|:—-|:—-|:—-|:—-|<br>|kubedns(1 pod)|1|53910|1.83|6.07|0%| |<br>|kubedns(2 pod)|2|110000|1.83|1.94|9%| |<br>|kubedns(4 pod)|4|120000|3.2|0.8|24%| |<br>|nodelocaldns|1|71494|1.39|1.66|0%| |<br>|nodelocaldns|2|142000|1.37|1.55|0%| |</p><p>相比<code>nodelocaldns</code>，<code>localdns</code>查询性能提高了33%，而且延时相对更小，由于<code>localdns</code>是分布式的整体qps相对kubedns有较大优势。当前测试相对简单，大部分请求会命中缓存，完整的测试结果待进一步验证。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点：</p><ul><li>大幅减少dns查询延时</li><li>提高dns qps</li><li>不经过<code>iptables</code>与<code>conntrack</code></li><li>默认使用tcp查询dns，避免 dns 5秒延时</li></ul><p>缺点：</p><ul><li>单点故障（OOM/Evicted/Config Error/Upgrade），社区通过起一个探测daemonset监听localdns状态，如果localdns异常将去掉iptables规则</li><li><code>hostnetwork</code>, 占用多个端口（8080, 9253等）</li><li>ipvs模式下，需要改动kubelet默认dns配置（<code>NOTRACK</code>将对<code>ipvs</code>无效，除非service后端实例为0）</li></ul><p>注意事项</p><ul><li>低版本dns存在tcp请求内存泄露</li><li>安装时<code>iptables</code>与<code>ipvs</code>配置不同</li></ul><h4 id="HA"><a href="#HA" class="headerlink" title="HA"></a>HA</h4><ul><li>社区提案将<code>iptables</code>写入规则从<code>nodelocaldns</code>拆分为单独的daemonset，通过监听<code>localdns</code>地址来判断是否写入或删除<code>iptables</code>规则（ipvs默认下无效）</li><li>在<code>/etc/resolv.conf</code>配置多个<code>nameservers</code>(不推荐，不同基础库表现不同，如<code>glibc 2.16+</code>查询dns时会向多个<code>nameservers</code>发送请求，反而造成了请求激增)</li></ul><h4 id="灰度方式"><a href="#灰度方式" class="headerlink" title="灰度方式"></a>灰度方式</h4><ul><li>通过<code>dnsConfi</code>g配置Pod级别dns（需要配置启动参数localip）</li><li>通过设置<code>nodeselector</code>灰度Node级别dns策略</li></ul><h3 id="本地DNS缓存"><a href="#本地DNS缓存" class="headerlink" title="本地DNS缓存"></a>本地DNS缓存</h3><p>除了nodelocaldns，用户还可以在容器内或者添加sidecar来启用dns缓存</p><ol><li><p>通过在镜像中加入nscd进程，缓存dns，如下：</p><pre class="line-numbers language-bash"><code class="language-bash"> FROM ubuntu RUN <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y nscd <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf /var/lib/apt/lists/* CMD <span class="token function">service</span> nscd start<span class="token punctuation">;</span> <span class="token function">bash</span> -c <span class="token string">"sleep 3600"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 此种方式需要用户改动镜像，或者加入额外脚本配置<code>nscd</code></p></li><li><p>另外可以配置可配置dns缓存 sidecar（如<code>coredns</code>, <code>dnsmasq</code>）来提高性能，此种方式灵活性高，但需要改动pod配置，而且较<code>nodelocaldns</code>浪费资源</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/nodelocaldns/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/administer-cluster/nodelocaldns/</a><br>[2] <a href="https://help.aliyun.com/document_detail/172339.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/172339.html</a><br>[3] <a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/0030-nodelocal-dns-cache.md" target="_blank" rel="noopener">https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/0030-nodelocal-dns-cache.md</a><br>[4] <a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/1024-nodelocal-cache-dns/README.md" target="_blank" rel="noopener">https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/1024-nodelocal-cache-dns/README.md</a><br>[5] <a href="https://lework.github.io/2020/11/09/node-local-dns/" target="_blank" rel="noopener">https://lework.github.io/2020/11/09/node-local-dns/</a></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes apiserver限流方案</title>
      <link href="/k8s-rate-limit/"/>
      <url>/k8s-rate-limit/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>为了防止突发流量影响apiserver可用性，k8s支持多种限流配置，包括：</p><ul><li>MaxInFlightLimit，server级别整体限流</li><li>Client限流</li><li>EventRateLimit, 限制event</li><li>APF，更细力度的限制配置</li></ul><h3 id="MaxInFlightLimit"><a href="#MaxInFlightLimit" class="headerlink" title="MaxInFlightLimit"></a>MaxInFlightLimit</h3><p>MaxInFlightLimit限流，apiserver默认可设置最大并发量（集群级别，区分只读与修改操作），通过参数<code>--max-requests-inflight</code>和 <code>--max-mutating-requests-inflight</code>， 可以简单实现限流。</p><h3 id="Client限流"><a href="#Client限流" class="headerlink" title="Client限流"></a>Client限流</h3><p>例如client-go默认的qps为5，但是只支持客户端限流，集群管理员无法控制用户行为。</p><h3 id="EventRateLimit"><a href="#EventRateLimit" class="headerlink" title="EventRateLimit"></a>EventRateLimit</h3><p>EventRateLimit在1.13之后支持，只限制event请求，集成在apiserver内部webhoook中，可配置某个用户、namespace、server等event操作限制，通过webhook形式实现。</p><p>具体原理可以参考<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/admission-controllers/#eventratelimit" target="_blank" rel="noopener">提案</a>，每个eventratelimit 配置使用一个单独的令牌桶限速器，每次event操作，遍历每个匹配的限速器检查是否能获取令牌，如果可以允许请求，否则返回<code>429</code>。</p><p><strong>优点</strong></p><ul><li>实现简单，允许一定量的并发</li><li>可支持server/namespace/user等级别的限流</li></ul><p><strong>缺点</strong></p><ul><li>仅支持event，通过webhook实现只能拦截修改类请求</li><li>所有namespace的限流相同，没有优先级</li></ul><h3 id="API-优先级和公平性"><a href="#API-优先级和公平性" class="headerlink" title="API 优先级和公平性"></a>API 优先级和公平性</h3><p>apiserver默认的限流方式太过简单，一个错误的客户端发送大量请求可能造成其他客户端请求异常，也不支持突发流量。</p><p>API 优先级和公平性（APF）是MaxInFlightLimit限流的一种替代方案，设计文档见<a href="https://github.com/kubernetes/enhancements/tree/master/keps/sig-api-machinery/1040-priority-and-fairness" target="_blank" rel="noopener">提案</a>。</p><p>API 优先级和公平性（1.15以上，alpha版本）， 以更细粒度（byUser，byNamespace）对请求进行分类和隔离。 支持突发流量，通过使用公平排队技术从队列中分发请求从而避免饥饿。</p><p>APF限流通过两种资源，<code>PriorityLevelConfigurations</code>定义隔离类型和可处理的并发预算量，还可以调整排队行为。 <code>FlowSchemas</code>用于对每个入站请求进行分类，并与一个 <code>PriorityLevelConfigurations</code>相匹配。</p><p>可对用户或用户组或全局进行某些资源某些请求的限制，如限制default namespace写services put/patch请求。</p><p><strong>优点</strong></p><ul><li>考虑情况较全面，支持优先级，白名单等</li><li>可支持server/namespace/user/resource等细粒度级别的限流</li></ul><p><strong>缺点</strong></p><ul><li>配置复杂，不直观，需要对APF原理深入了解</li><li>功能较新，缺少生产环境验证</li></ul><p><strong>APF测试</strong><br>开启APF，需要在apiserver配置<code>--feature-gates=APIPriorityAndFairness=true --runtime-config=flowcontrol.apiserver.k8s.io/v1alpha1=true</code></p><p>开启后，获取默认的FlowSchemas</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get flowschemas.flowcontrol.apiserver.k8s.io NAME                           PRIORITYLEVEL     MATCHINGPRECEDENCE   DISTINGUISHERMETHOD   AGE    MISSINGPLsystem-leader-election         leader-election   100                  ByUser                152m   Falseworkload-leader-election       leader-election   200                  ByUser                152m   Falsesystem-nodes                   system            500                  ByUser                152m   Falsekube-controller-manager        workload-high     800                  ByNamespace           152m   Falsekube-scheduler                 workload-high     800                  ByNamespace           152m   Falsekube-system-service-accounts   workload-high     900                  ByNamespace           152m   Falsehealth-for-strangers           exempt            1000                 <span class="token operator">&lt;</span>none<span class="token operator">></span>                151m   Falseservice-accounts               workload-low      9000                 ByUser                152m   Falseglobal-default                 global-default    9900                 ByUser                152m   Falsecatch-all                      catch-all         10000                ByUser                152m   False<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>FlowShema配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> flowcontrol.apiserver.k8s.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> FlowSchema<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> health<span class="token punctuation">-</span>for<span class="token punctuation">-</span>strangers<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">matchingPrecedence</span><span class="token punctuation">:</span> <span class="token number">1000 </span><span class="token comment" spellcheck="true">#匹配优先级，1~1000，越小优先级越高</span>  <span class="token key atrule">priorityLevelConfiguration</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#关联的PriorityLevelConfigurations</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> exempt <span class="token comment" spellcheck="true">#排除rules，即不限制当前flowshema的rules</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#请求规则</span>  <span class="token punctuation">-</span> <span class="token key atrule">nonResourceRules</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#非资源</span>    <span class="token punctuation">-</span> <span class="token key atrule">nonResourceURLs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/healthz"</span>      <span class="token punctuation">-</span> <span class="token string">"/livez"</span>      <span class="token punctuation">-</span> <span class="token string">"/readyz"</span>      <span class="token key atrule">verbs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"*"</span>    <span class="token key atrule">subjects</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#对应的用户或用户组</span>    <span class="token punctuation">-</span> <span class="token key atrule">kind</span><span class="token punctuation">:</span> Group      <span class="token key atrule">group</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> system<span class="token punctuation">:</span>unauthenticated<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PriorityLevelConfiguration配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> flowcontrol.apiserver.k8s.io/v1alpha1<span class="token key atrule">kind</span><span class="token punctuation">:</span> PriorityLevelConfiguration<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> leader<span class="token punctuation">-</span>election<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limited</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#限制策略</span>    <span class="token key atrule">assuredConcurrencyShares</span><span class="token punctuation">:</span> <span class="token number">10 </span>    <span class="token key atrule">limitResponse</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#如何处理被限制的请求</span>      <span class="token key atrule">queuing</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#类型为Queue时，列队的设置</span>        <span class="token key atrule">handSize</span><span class="token punctuation">:</span> <span class="token number">4 </span><span class="token comment" spellcheck="true">#队列</span>        <span class="token key atrule">queueLengthLimit</span><span class="token punctuation">:</span> <span class="token number">50 </span><span class="token comment" spellcheck="true">#队列长度</span>        <span class="token key atrule">queues</span><span class="token punctuation">:</span> <span class="token number">16 </span><span class="token comment" spellcheck="true">#队列数</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> Queue <span class="token comment" spellcheck="true">#Queue或者Reject，Reject直接返回429，Queue将请求加入队列</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> Limited <span class="token comment" spellcheck="true">#类型，Limited或Exempt， Exempt即不限制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上是k8s相关的限流策略，通过多种策略来保证集群的稳定性。</p><p>目前MaxInFlightLimit可以轻松开启，但是限制策略不精细，而APF功能较新，实现较复杂，在充分验证后，可通过APF对全集群进行限流。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> apiserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes中Sidecar生命周期管理</title>
      <link href="/k8s-sideccar-lifecycle/"/>
      <url>/k8s-sideccar-lifecycle/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在多个容器的Pod中，通常业务容器需要依赖sidecar。启动时sidecar需要先启动，退出时sidecar需要在业务容器退出后再退出。k8s目前对于sidecar的生命周期比较有争议，见<a href="https://github.com/kubernetes/enhancements/issues/753" target="_blank" rel="noopener">issue</a>、<a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/0753-sidecarcontainers.md" target="_blank" rel="noopener">sidecarcontainers</a>。</p><p>Kubernetes Pod 内有两种容器: 初始化容器(init container)和应用容器(app container)。</p><p>其中初始化容器的执行先于应用容器，按顺序启动，执行成功启动下一个：</p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">if</span> container <span class="token operator">:=</span> podContainerChanges<span class="token punctuation">.</span>NextInitContainerToStart<span class="token punctuation">;</span> container <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Start the next init container.</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"init container"</span><span class="token punctuation">,</span> <span class="token function">containerStartSpec</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Successfully started the container; clear the entry in the failure</span>        klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Completed init container %q for pod %q"</span><span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> format<span class="token punctuation">.</span><span class="token function">Pod</span><span class="token punctuation">(</span>pod<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而对于应用容器，无法保证容器ready顺序，启动代码如下:</p><pre class="line-numbers language-go"><code class="language-go">    <span class="token comment" spellcheck="true">// Step 7: start containers in podContainerChanges.ContainersToStart.</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> idx <span class="token operator">:=</span> <span class="token keyword">range</span> podContainerChanges<span class="token punctuation">.</span>ContainersToStart <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// start函数向docker发请求启动容器，这里没有检测函数返回而且不确定ENTRYPOINT是否成功</span>        <span class="token function">start</span><span class="token punctuation">(</span><span class="token string">"container"</span><span class="token punctuation">,</span> <span class="token function">containerStartSpec</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pod<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Containers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在删除时，同样无法保证删除顺序，代码如下</p><pre class="line-numbers language-go"><code class="language-go">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> container <span class="token operator">:=</span> <span class="token keyword">range</span> runningPod<span class="token punctuation">.</span>Containers <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>container <span class="token operator">*</span>kubecontainer<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">{</span>            killContainerResult <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span><span class="token function">NewSyncResult</span><span class="token punctuation">(</span>kubecontainer<span class="token punctuation">.</span>KillContainer<span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 每一个容器起goroutine执行删除</span>            <span class="token keyword">if</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">killContainer</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> container<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> gracePeriodOverride<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>               <span class="token operator">...</span>            <span class="token punctuation">}</span>            containerResults <span class="token operator">&lt;-</span> killContainerResult        <span class="token punctuation">}</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h2><p>k8s原生方式，对于pod中一个容器依赖另一个容器，目前需要业务进程判断依赖服务是否启动或者sleep 10s，这种方式可以工作，但不太优雅。需要业务更改启动脚本。</p><p>那么，有没有其他的解决办法？</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>在启动时，start函数调用startContainer来创建容器，主要代码如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>kubeGenericRuntimeManager<span class="token punctuation">)</span> <span class="token function">startContainer</span><span class="token punctuation">(</span>podSandboxID <span class="token builtin">string</span><span class="token punctuation">,</span> podSandboxConfig <span class="token operator">*</span>runtimeapi<span class="token punctuation">.</span>PodSandboxConfig<span class="token punctuation">,</span> spec <span class="token operator">*</span>startSpec<span class="token punctuation">,</span> pod <span class="token operator">*</span>v1<span class="token punctuation">.</span>Pod<span class="token punctuation">,</span> podStatus <span class="token operator">*</span>kubecontainer<span class="token punctuation">.</span>PodStatus<span class="token punctuation">,</span> pullSecrets <span class="token punctuation">[</span><span class="token punctuation">]</span>v1<span class="token punctuation">.</span>Secret<span class="token punctuation">,</span> podIP <span class="token builtin">string</span><span class="token punctuation">,</span> podIPs <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    container <span class="token operator">:=</span> spec<span class="token punctuation">.</span>container    <span class="token comment" spellcheck="true">// Step 1: 拉镜像.</span>    imageRef<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>imagePuller<span class="token punctuation">.</span><span class="token function">EnsureImageExists</span><span class="token punctuation">(</span>pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> pullSecrets<span class="token punctuation">,</span> podSandboxConfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Step 2: 调用cri创建容器</span>    <span class="token comment" spellcheck="true">// For a new container, the RestartCount should be 0</span>    containerID<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>runtimeService<span class="token punctuation">.</span><span class="token function">CreateContainer</span><span class="token punctuation">(</span>podSandboxID<span class="token punctuation">,</span> containerConfig<span class="token punctuation">,</span> podSandboxConfig<span class="token punctuation">)</span>   <span class="token operator">...</span>    <span class="token comment" spellcheck="true">// Step 3: 启动容器</span>    err <span class="token operator">=</span> m<span class="token punctuation">.</span>runtimeService<span class="token punctuation">.</span><span class="token function">StartContainer</span><span class="token punctuation">(</span>containerID<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Step 4: 执行 post start hook.</span>    <span class="token keyword">if</span> container<span class="token punctuation">.</span>Lifecycle <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span>Lifecycle<span class="token punctuation">.</span>PostStart <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        kubeContainerID <span class="token operator">:=</span> kubecontainer<span class="token punctuation">.</span>ContainerID<span class="token punctuation">{</span>            Type<span class="token punctuation">:</span> m<span class="token punctuation">.</span>runtimeName<span class="token punctuation">,</span>            ID<span class="token punctuation">:</span>   containerID<span class="token punctuation">,</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 调用Run来执行hook</span>        msg<span class="token punctuation">,</span> handlerErr <span class="token operator">:=</span> m<span class="token punctuation">.</span>runner<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>kubeContainerID<span class="token punctuation">,</span> pod<span class="token punctuation">,</span> container<span class="token punctuation">,</span> container<span class="token punctuation">.</span>Lifecycle<span class="token punctuation">.</span>PostStart<span class="token punctuation">)</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>步骤如下：</p><ol><li>拉取镜像</li><li>创建容器</li><li>启动容器</li><li>执行hook</li></ol><p>一个Pod中容器的启动是有顺序的，排在前面容器的先启动。同时第一个容器执行完ENTRYPOINT和PostStart之后（异步执行，无法确定顺序），k8s才会创建第二个容器（这样的话就可以保证第一个容器创建多长时间后再启动第二个容器）</p><p>如果我们PostStart阶段去检测容器是否ready，那么只有在ready后才去执行下一个容器。</p><p><img src="/img/blogImg/sidecar-lifecycle.png" alt="sidecar-lifecycle"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>配置如下，sidecar模拟需要依赖的容器，main为业务容器</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>start<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sidecar    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"sleep 3600"</span><span class="token punctuation">]</span>    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>      <span class="token key atrule">postStart</span><span class="token punctuation">:</span>        <span class="token key atrule">exec</span><span class="token punctuation">:</span>          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"sleep 20"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> main    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"sleep 3600"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到结果如下，可以看到sidecar启动21s后才开始启动main容器，满足需求</p><pre class="line-numbers language-bash"><code class="language-bash">Events:  Type    Reason     Age   From                                          Message  ----    ------     ----  ----                                          -------  Normal  Scheduled  54s   default-scheduler                             Successfully assigned default/test-start to tj1-staging-k8s-slave95-202008.kscn  Normal  Pulling    53s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Pulling image <span class="token string">"busybox"</span>  Normal  Pulled     44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Successfully pulled image <span class="token string">"busybox"</span>  Normal  Created    44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Created container sidecar  Normal  Started    44s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Started container sidecar  Normal  Pulling    23s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Pulling image <span class="token string">"busybox"</span>  Normal  Pulled     19s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Successfully pulled image <span class="token string">"busybox"</span>  Normal  Created    18s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Created container main  Normal  Started    18s   kubelet, tj1-staging-k8s-slave95-202008.kscn  Started container main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此方案可能存在的缺点：</p><ol><li>如果sidecar启动失败或者hook失败，其他容器会立即启动</li></ol><h2 id="退出顺序"><a href="#退出顺序" class="headerlink" title="退出顺序"></a>退出顺序</h2><p>容器启动顺序比较好解决，退出顺序则是按照相反的顺序，业务容器先退出，之后sidecar再退出。</p><p>目前，在kubelet删除pod步骤如下;</p><ol><li>遍历容器，每个容器起一个goroutine删除</li><li>删除时，先执行pre stop hook，得到gracePeriod=DeletionGracePeriodSeconds-period(stophook)</li><li>再调用cri删除接口m.runtimeService.StopContainer(containerID.ID, gracePeriod)</li></ol><p>如果在sidecar的pre stop hook检测业务容器状态，那么可以延迟退出。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>业务容器main退出时，创建文件；sidecar通过post-stop检测到文件后，执行退出</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>stop<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> sidecar    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token string">"/bin/sh"</span>    <span class="token punctuation">-</span> <span class="token string">"-c"</span>    <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">      trap "touch /lifecycle/sidecar-terminated" 15      until [ -f "/lifecycle/sidecar-terminated" ];do        date        sleep 1      done      sleep 5      cat /lifecycle/main-terminated      t=$(date)      echo "sidecar exit at $t"</span>    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>      <span class="token key atrule">preStop</span><span class="token punctuation">:</span>        <span class="token key atrule">exec</span><span class="token punctuation">:</span>          <span class="token key atrule">command</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token string">"/bin/sh"</span>          <span class="token punctuation">-</span> <span class="token string">"-c"</span>          <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">            until [ -f "/lifecycle/main-terminated" ];do              sleep 1            done            t=$(date)            echo "main exit at $t" > /lifecycle/main-terminated</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /lifecycle  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> main    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">command</span><span class="token punctuation">:</span>     <span class="token punctuation">-</span> <span class="token string">"/bin/sh"</span>    <span class="token punctuation">-</span> <span class="token string">"-c"</span>    <span class="token punctuation">-</span> <span class="token punctuation">|</span><span class="token scalar string">      trap "touch /lifecycle/main-terminated" 15      until [ -f "/lifecycle/main-terminated" ];do        date        sleep 1      done</span>    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle      <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /lifecycle  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle    <span class="token key atrule">emptyDir</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在日志中看到，main容器先结束，sidecar检测到main-terminated文件后，执行完post-stop-hook，sidecar主进程开始退出</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl  logs -f test-stop main<span class="token punctuation">..</span>.Tue Sep  8 03:14:20 UTC 2020Tue Sep  8 03:14:21 UTC 2020Tue Sep  8 03:14:22 UTC 2020$ kubectl  logs -f test-stop sidecarTue Sep  8 03:14:22 UTC 2020Tue Sep  8 03:14:23 UTC 2020<span class="token comment" spellcheck="true"># post stop hook 检测到main容器退出，记录日志</span>main <span class="token keyword">exit</span> at Tue Sep  8 03:14:23 UTC 2020<span class="token comment" spellcheck="true"># sidecar主进程退出</span>sidecar <span class="token keyword">exit</span> at Tue Sep  8 03:14:29 UTC 2020<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过测试，使用postStopHook可以达到sidecar延迟退出的目的，但这种方式也有一些缺点</p><ol><li>配置复杂，多个sidecar都需要配置postStop监听业务容器状态</li><li>业务容器需要有可观察性（提供特定形式的健康检测）</li><li>poststop执行异常，会等到最大优雅退出时间（默认30s）后才终止</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前对于sidecar生命周期的支持方案对比如下：</p><table><thead><tr><th>方案</th><th>启动顺序</th><th>退出顺序</th><th>job sidecar</th><th>是否需要用户修改代码</th><th>是否需要修改k8s代码</th><th>缺点</th><th>备注</th></tr></thead><tbody><tr><td>用户控制</td><td>支持</td><td>不支持</td><td>不支持</td><td>需要</td><td>不需要</td><td>需要用户更改启动脚本;退出支持难度大，需要同时修改业务容器与sidecar启动脚本；大部分情况不支持</td><td>启动时需要检测sidecar服务状态</td></tr><tr><td>Lifecycle Hooks</td><td>支持</td><td>支持</td><td>不支持</td><td>不需要</td><td>不需要</td><td>配置hook复杂度高;在hook执行异常情况下不能确保顺序</td><td></td></tr><tr><td>富容器</td><td>支持</td><td>部分支持</td><td>部分支持</td><td>不需要</td><td>需要（更改镜像或启动命令）</td><td>所有功能集成在一个容器中，对于外部sidecar如istio envoy等，不可控;</td><td></td></tr><tr><td>修改源码</td><td>支持</td><td>支持</td><td>支持</td><td>不需要</td><td>需要</td><td>需要满足各种情况，实现难度较大</td><td>社区有计划支持</td></tr></tbody></table><p>在k8s提供此类功能前，目前没有完善的方案。Lifecycle Hooks不需要更改用户启动代码以及k8s相关代码，相对于其他方式不失为一种解决思路。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启shareProcessNamespace后容器异常</title>
      <link href="/cotainer-init/"/>
      <url>/cotainer-init/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目前k8s不支持容器启动顺序，部分业务通过开启<code>shareProcessNamespace</code>监控某些进程状态。当开启共享pid后，有用户反馈某个容器主进程退出，但是容器并没有重启，执行<code>exec</code>会卡住，现象参考<a href="3">issue</a></p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><ol><li><p>创建deployment</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span><span class="token key atrule">labels</span><span class="token punctuation">:</span> <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token key atrule">spec</span><span class="token punctuation">:</span><span class="token key atrule">selector</span><span class="token punctuation">:</span> <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>   <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx<span class="token key atrule">template</span><span class="token punctuation">:</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span>   <span class="token key atrule">labels</span><span class="token punctuation">:</span>     <span class="token key atrule">app</span><span class="token punctuation">:</span> nginx   <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx <span class="token key atrule">spec</span><span class="token punctuation">:</span>   <span class="token key atrule">shareProcessNamespace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token key atrule">containers</span><span class="token punctuation">:</span>   <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>alpine     <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看进程信息<br>由于开启了<code>shareProcessNamespace</code>, <code>pause</code>变为<code>pid 1</code>, <code>nginx daemon</code>pid为<code>6</code>, ppid为<code>containerd-shim</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看容器内进程</span>/ <span class="token comment" spellcheck="true"># ps -efo "pid,ppid,comm,args"</span>PID   PPID  COMMAND          COMMAND 1     0 pause            /pause 6     0 nginx            nginx: master process nginx -g daemon off<span class="token punctuation">;</span>11     6 nginx            nginx: worker process12     6 nginx            nginx: worker process13     6 nginx            nginx: worker process14     6 nginx            nginx: worker process15     0 sh               sh47    15 <span class="token function">ps</span>               <span class="token function">ps</span> -efo pid,ppid,comm,args<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除主进程<br>子进程被<code>pid 1</code>回收, 有时也会被<code>containerd-shim</code>回收</p><pre class="line-numbers language-bash"><code class="language-bash">/ <span class="token comment" spellcheck="true"># kill -9 6</span>/ <span class="token comment" spellcheck="true"># </span>/ <span class="token comment" spellcheck="true"># ps -efo "pid,ppid,comm,args"</span>PID   PPID  COMMAND          COMMAND 1     0 pause            /pause11     1 nginx            nginx: worker process12     1 nginx            nginx: worker process13     1 nginx            nginx: worker process14     1 nginx            nginx: worker process15     0 sh               sh48    15 <span class="token function">ps</span>               <span class="token function">ps</span> -efo pid,ppid,comm,args<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>docker hang<br>此时对此容器执行docker命令(<code>inspect, logs, exec</code>)将卡住， 同样通过<code>kubectl</code>执行会超时。</p></li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在未开启<code>shareProcessNamespace</code>的容器中，主进程退出<code>pid 1</code>, 此pid namespace销毁，系统会<code>kill</code>其下的所有进程。开启后，<code>pid 1</code>为<code>pause</code>进程，容器主进程退出，由于共享pid namespace，其他进程没有退出变成孤儿进程。此时调用docker相关接口去操作容器，docker首先去找主进程，但主进程已经不存在了，导致异常(待确认)。</p><p>清理掉这些孤儿进程容器便会正常退出，可以<code>kill</code>掉这些进程或者<code>kill</code>pause进程，即可恢复。</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>有没有优雅的方式解决此种问题，如果主进程退出子进程也一起退出便符合预期，这就需要进程管理工具来实现，在宿主机中有<code>systemd</code>、<code>god</code>，容器中也有类似的工具即<code>init进程</code>(传递信息，回收子进程)，常见的有</p><ol><li><code>docker init</code>, docker自带的init进程(即<code>tini</code>)</li><li><a href="https://github.com/krallin/tini" target="_blank" rel="noopener"><code>tini</code></a>, 可回收孤儿进程/僵尸进程，<code>kill</code>进程组等</li><li><a href="https://github.com/Yelp/dumb-init" target="_blank" rel="noopener"><code>dumb-init</code></a>, 可管理进程，重写信号等</li></ol><p>经过测试，<code>tini</code>进程只能回收前台程序，对于后台程序则无能为力(例如<code>nohup</code>, <code>&amp;</code>启动的程序)，<code>dumb-init</code>在主进程退出时，会传递信号给子进程，符合预期。</p><p>开启<code>dumb-init</code>进程的<code>dockerfile</code>如下，<code>tini</code>也类似</p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">FROM nginx:alpine# tini# RUN apk add --no-cache tini# ENTRYPOINT ["/sbin/tini", "-s", "-g", "--"]# dumb-initRUN wget -O /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.2/dumb-init_1.2.2_amd64RUN chmod +x /usr/bin/dumb-initENTRYPOINT ["/usr/bin/dumb-init", "-v", "--"]CMD ["nginx", "-g", "daemon off;"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>init方式对于此问题是一种临时的解决方案，需要docker从根本上解决此种情况。容器推荐单进程运行，但某些情况必须要运行多进程，如果不想处理处理传递回收进程等，可以通过<code>init</code>进程，无需更改代码即可实现。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/Yelp/dumb-init" target="_blank" rel="noopener">https://github.com/Yelp/dumb-init</a><br>[2] <a href="https://github.com/krallin/tini" target="_blank" rel="noopener">https://github.com/krallin/tini</a><br>[3] <a href="https://github.com/kubernetes/kubernetes/issues/92214" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/92214</a></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus最佳实践-聚合函数</title>
      <link href="/prometheus-best-practice-operation/"/>
      <url>/prometheus-best-practice-operation/</url>
      
        <content type="html"><![CDATA[<h2 id="rate"><a href="#rate" class="headerlink" title="rate"></a>rate</h2><p>prometheus中<code>rate</code>只能用于<code>counter</code>类型，对于需要聚合的数据需要先<code>rate</code>再<code>sum</code>，而不是<code>rate(sum)</code></p><h2 id="数据准确性"><a href="#数据准确性" class="headerlink" title="数据准确性"></a>数据准确性</h2><p><code>rate/increase/delta</code>等操作对于原始值进行了外推（类似线性插件），得到的不是准确值</p><p>如<code>rate(http_requests_total[2m])</code>指两分钟内每秒平均请求量，通过<code>2m</code>内首尾两个数据外推得到差值，比120s得到；<br>同理<code>increase(http_requests_total[2m])</code>指的不是首尾两个值的增长量，而是外推后计算出<code>2m</code>内的增长量。</p><h2 id="absent"><a href="#absent" class="headerlink" title="absent"></a>absent</h2><p>通常报警中，我们需要对某个对象是不是有数据进行监控（即<code>nodata</code>监控），<code>absent</code>用来验证指标是不是有数据很有用</p><h2 id="predict-linear"><a href="#predict-linear" class="headerlink" title="predict_linear"></a>predict_linear</h2><p>线性回归预测，适合线性数据的预测，如预测etcd的未来4小时文件描述符使用量</p><pre><code>predict_linear(cluster:etcd:fd_utilization[1h], 3600 * 4)</code></pre><h2 id="quantile-over-time"><a href="#quantile-over-time" class="headerlink" title="quantile_over_time"></a>quantile_over_time</h2><p>一段时间内统计分位数</p><pre><code>quantile_over_time(0.9, http_requests_total[1d]) # 一天内请求量的90分位</code></pre><h2 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h2><p>某些情况的需要比较两个标量（通常用来报警），可以使用bool</p><pre><code>http_requests_total &gt; bool 100 </code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus </tag>
            
            <tag> monitor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes相关开源项目</title>
      <link href="/kubernetes-opensource-project/"/>
      <url>/kubernetes-opensource-project/</url>
      
        <content type="html"><![CDATA[<p>总结下项目中可参考k8s相关开源项目，不断更新中…</p><h2 id="cncf"><a href="#cncf" class="headerlink" title="cncf"></a>cncf</h2><ul><li><a href="https://www.cncf.io/projects/" target="_blank" rel="noopener">project</a></li><li><a href="https://www.cncf.io/sandbox-projects/" target="_blank" rel="noopener">sandbox</a></li></ul><h2 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h2><ul><li><a href="https://github.com/openkruise/kruise" target="_blank" rel="noopener">kruise</a>: 各种自定义app，包括增强deployment/statefulset等</li><li><a href="https://github.com/AliyunContainerService/kubernetes-cronhpa-controller" target="_blank" rel="noopener">kubernetes-cronhpa-controller</a>: 定时扩缩</li><li><a href="https://github.com/AliyunContainerService/kube-eventer" target="_blank" rel="noopener">kube-eventer</a>: event收集</li><li><a href="https://github.com/AliyunContainerService/gpushare-scheduler-extender" target="_blank" rel="noopener">gpushare-scheduler-extender</a>: 共享GPU</li><li><a href="https://github.com/AliyunContainerService/log-pilot" target="_blank" rel="noopener">log-pilot</a>: docker日志收集工具</li></ul><h2 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h2><ul><li><a href="https://github.com/tkestack/tapp" target="_blank" rel="noopener">tapp</a>: 增强版deployment/statefulset</li><li><a href="https://github.com/tkestack/cron-hpa" target="_blank" rel="noopener">cron-hpa</a>: 定时扩缩</li><li><a href="https://github.com/tkestack/lb-controlling-framework" target="_blank" rel="noopener">lb-controlling-framework</a>: lb扩展，可自定义接口</li><li><a href="https://github.com/Tencent/tke-kms-plugin" target="_blank" rel="noopener">tke-kms-plugin</a>: 实现kms,可参考</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="https://github.com/stakater" target="_blank" rel="noopener">stakater</a>: 提供多种controller, 白名单、reloader等工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> crd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s如何优雅升级应用</title>
      <link href="/k8s-graceful-update-app/"/>
      <url>/k8s-graceful-update-app/</url>
      
        <content type="html"><![CDATA[<p>在k8s中通常用户通过<code>ingress</code>接入流量，转发到后端实例(<code>ingress → pod</code>)，在后端应用更新过程中，<code>ingress</code>是否能做到优雅升级，本文将通过分析升级流程与实验验证，说明在k8s中如何实现优化升级。</p><h2 id="Ingress原理"><a href="#Ingress原理" class="headerlink" title="Ingress原理"></a>Ingress原理</h2><p>用户创建ingress资源后，<code>ingress-nginx</code>通过<code>service</code>获取到对应的<code>endpoint</code>，监听到<code>endpoint</code>变化后将动态更新<code>upstream</code>。</p><p><code>endpoint</code>每次变化后会通过<code>selector</code>匹配的<code>pod</code>列表中<code>ready pod</code>（不包括待删除的<code>pod</code>, 及<code>DeletionTimestamp</code>不为空）</p><pre class="line-numbers language-bash"><code class="language-bash">pod ready <span class="token operator">=</span> 所有container ready<span class="token punctuation">(</span>启动成功, 健康检查通过<span class="token punctuation">)</span> + 所有rediness gateway执行成功<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>那么<code>endpoint</code>在什么状况下会发生变化：</p><ul><li>service变化（一般不会）</li><li>扩缩容</li><li>升级</li><li>删除pod</li></ul><p>不管是什么操作，可归结于启动、删除、退出</p><ul><li><strong>启动</strong>，只要确保<code>pod ready</code>时能服务能正常接受流量，不会影响影响服务</li><li><strong>退出</strong>, 如果是应用异常退出，不能处理已接受的流量，此种状况是应用本身行为，不在讨论范围</li><li><strong>删除</strong>, 由于k8s所有组件都采用监听机制，无法保证<code>pod</code>删除时<code>ingress-nginx</code>的后端已经更新</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 大约在2s内</span>ingress-nginx 生效时间 <span class="token operator">=</span> endpoint 生效时间 + upstream更新时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果要保证pod删除时不丢流量，需要做到</p><ul><li>已接受的请求需要处理完，可监听TERM信号，处理完再退出， 可参考<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods</a></li><li>删除时不接受新的请求，这部分无法保证，只能保证#1</li></ul><h2 id="ingress-nginx-重试机制"><a href="#ingress-nginx-重试机制" class="headerlink" title="ingress-nginx 重试机制"></a>ingress-nginx 重试机制</h2><p>ingress-nginx默认开启了proxy_next_upstream，配置如下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># In case of errors try the next upstream server before returning an error</span>proxy_next_upstream error <span class="token function">timeout</span><span class="token punctuation">;</span>proxy_next_upstream_timeout 0<span class="token punctuation">;</span>proxy_next_upstream_tries 3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果一次请求中，<code>upstream server</code> 出错或超时将通过rr算法重试下一个server，最多尝试三次。如果后端大于三个实例，一个实例异常不会影响服务。</p><h2 id="升级策略"><a href="#升级策略" class="headerlink" title="升级策略"></a>升级策略</h2><p>对于<code>Deployment</code>有两种升级策略， <code>Recreate</code>与<code>RollingUpdate</code></p><ul><li><strong>Recreate</strong>, 先将旧版缩到0再将新版扩到期望值，不建议使用</li><li><strong>RollingUpdate</strong>，默认策略，滚动更新</li></ul><p>在滚动升级时主要依据<code>maxSurge</code>与<code>maxUnavailable</code>对新旧版本进行扩缩</p><ul><li><strong>maxSurge</strong>， 升级中最多有多少pod超过期望值</li><li><strong>maxUnavailable</strong>， 此值用来计算升级中最小可用的实例数，最大不可用的实例数表示不准确</li></ul><p>举个例子，比如10个副本的Deployment， 采用默认值<code>maxSurge</code>与<code>maxUnavaiable</code>都为25%</p><pre class="line-numbers language-bash"><code class="language-bash">// 向上取整为 3 maxSurge <span class="token operator">=</span> replicas * deployment.spec.strategy.rollingUpdate.maxSurge<span class="token punctuation">(</span>25%<span class="token punctuation">)</span><span class="token operator">=</span> 2.5// 向下取整为 2 maxUnavailable <span class="token operator">=</span> replicas * deployment.spec.strategy.rollingUpdate.maxUnavailable<span class="token punctuation">(</span>25%<span class="token punctuation">)</span><span class="token operator">=</span> 2.5maxAvailable <span class="token operator">=</span> replicas<span class="token punctuation">(</span>10<span class="token punctuation">)</span> + MaxSurge（3） <span class="token operator">=</span> 13minAvailable :<span class="token operator">=</span> *<span class="token punctuation">(</span>deployment.Spec.Replicas<span class="token punctuation">)</span>（10） - maxUnavailable（2）<span class="token operator">=</span> 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在升级过程中，首先创建 newRS，然后为其设定 replicas，此时计算出 replicas 结果为 3。等到下一个 syncLoop 时，所有 rs 的 replicas 已经达到最大值 10 + 3 = 13，此时需要 scale down oldRSs 了，scale down 的数量是通过以下公式得到的：</p><pre class="line-numbers language-bash"><code class="language-bash">// 13 <span class="token operator">=</span> 10 + 3 allPodsCount :<span class="token operator">=</span> newRS<span class="token punctuation">(</span>10<span class="token punctuation">)</span> + oldRS<span class="token punctuation">(</span>3<span class="token punctuation">)</span>// ??? newRSUnavailablePodCount :<span class="token operator">=</span> *<span class="token punctuation">(</span>newRS.Spec.Replicas<span class="token punctuation">)</span> - newRS.Status.AvailableReplicas// 13 - 8 - ??? maxScaledDown :<span class="token operator">=</span> allPodsCount - minAvailable - newRSUnavailablePodCountnewRSUnavailablePodCount 此时不确定，但是值在 <span class="token punctuation">[</span>0,3<span class="token punctuation">]</span> 中，此时假设 newRS 的三个 pod 还处于 containerCreating 状态，则newRSUnavailablePodCount 为 3，根据以上公式计算所知 maxScaledDown 为 2。如果有个新版本pod已经ready，则maxScaledDown 为 4。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特殊情况，当只有一个副本，<code>maxSurge</code>与<code>maxUnavaiable</code>都为1时，按照以上公式，先扩容1个新版pod，再缩一个旧版的，如果旧版已经删除了而新版还没有起来可能会丟流量，可以将<code>maxUnavaiable</code>设置为0可避免以上情况。</p><h2 id="实验验证"><a href="#实验验证" class="headerlink" title="实验验证"></a>实验验证</h2><p>滚动升级终于也是通过扩缩新旧版本来实现的，我们只需要分析扩缩容过程中会不会丢流量即可。</p><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h3><p>image: nginx<br>tool:  <code>wrk -c 2 -d 120 -H &quot;Connection:Close&quot; http://my.nginx.svc</code></p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>1) 从1扩到10个</p><p>不丢流量，nginx启动很快不需要额外的初始化工作，正常情况需要配置健康检查</p><h3 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h3><p><strong>1) 10 → 1</strong></p><p>缩容时会有502错误</p><pre class="line-numbers language-bash"><code class="language-bash">Running 2m <span class="token function">test</span> @ http://my.nginx.svc  2 threads and 2 connections  Thread Stats   Avg      Stdev     Max   +/- Stdev    Latency    11.73ms   27.02ms 229.17ms   95.14%    Req/Sec   162.91     45.77   232.00     74.13%  8969 requests <span class="token keyword">in</span> 28.24s, 2.40MB <span class="token function">read</span>  Non-2xx or 3xx responses: 366Requests/sec:    317.62Transfer/sec:     86.93KB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看ingress日志</p><pre class="line-numbers language-bash"><code class="language-bash">2020/06/19 08:12:28 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> 9533<span class="token comment" spellcheck="true">#9533: *197916788 connect() failed (111: Connection refused) while connecting to upstream, client: 10.232.41.102, server: my.nginx.svc, request: "GET / HTTP/1.1", upstream: "http://10.126.110.3:80/", host: "my.nginx.svc"</span>2020/06/19 08:12:33 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> 8935<span class="token comment" spellcheck="true">#8935: *197916707 upstream timed out (110: Operation timed out) while connecting to upstream, client: 10.232.41.102, server: my.nginx.svc, request: "GET / HTTP/1.1", upstream: "http://10.126.69.136:80/", host: "my.nginx.svc"</span>2020/06/19 08:12:33 <span class="token punctuation">[</span>error<span class="token punctuation">]</span> 9533<span class="token comment" spellcheck="true">#9533: *197916788 upstream timed out (110: Operation timed out) while connecting to upstream, client: 10.232.41.102, server: my.nginx.svc, request: "GET / HTTP/1.1", upstream: "http://10.126.69.136:80/", host: "my.nginx.svc</span>10.232.41.102 - - <span class="token punctuation">[</span>18/Jun/2020:09:14:35 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> 502 157 <span class="token string">"-"</span> <span class="token string">"-"</span> 38 0.001 <span class="token punctuation">[</span>default-my-nginx-80<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> 10.46.12.80:80, 10.46.12.79:80, 10.46.12.80:80 0, 0, 0 0.000, 0.000, 0.000 502, 502, 502 5cfc063dbe7daf1db953a0e16891f100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2) 4→1</strong></p><p>会丟流量</p><p><strong>3）3→1</strong></p><p>测试多次，偶现过丢流量的情况，这与ingress重试算法有关系</p><p><strong>4） 10→1</strong>, 忽略term信号, 不丢流量</p><pre class="line-numbers language-bash"><code class="language-bash">Running 2m <span class="token function">test</span> @ http://my.nginx.svc  2 threads and 2 connectionsThread Stats   Avg      Stdev     Max   +/- Stdev    Latency    12.12ms   16.66ms 214.89ms   88.39%    Req/Sec   129.75     74.05   250.00     62.35%  8811 requests <span class="token keyword">in</span> 34.24s, 2.35MB <span class="token function">read</span>Requests/sec:    257.35Transfer/sec:     70.41KB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过分析及实验，在pod启动时可配置健康检查避免请求异常；同一时刻大于2个pod终止可能会丢失流量，通过监听退出信号可避免此种情况。综上，应用的优化升级需要做到以下几点：</p><ul><li>健康检测，<code>pod ready</code>时能够正常接受流量</li><li>优雅停止，保证处理完请求再退出，在这段时间内实例ip可从ingress后端摘除</li><li>滚动升级配置，若只有1个实例需设置maxsurge=0，更建议副本数设置多个</li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ingress获取真实IP</title>
      <link href="/ingress-real-ip/"/>
      <url>/ingress-real-ip/</url>
      
        <content type="html"><![CDATA[<p>一般情况下，经过ingress的请求会携带header<code>X-Real-IP</code>，用户可根据header解析出真实访问IP。</p><p>特殊情况，用户请求可能经过多个nginx才达到ingress, 通过上述方法得到的并不是用户的真实IP。</p><blockquote><p>request -&gt; nginx -&gt; … -&gt; ingress-nginx -&gt; backend</p></blockquote><h2 id="方案1-use-forwarded-headers"><a href="#方案1-use-forwarded-headers" class="headerlink" title="方案1 use-forwarded-headers"></a>方案1 use-forwarded-headers</h2><p>nginx-ingress官方的建议是开启<a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#forwarded-for-header" target="_blank" rel="noopener">use-forwarded-headers</a>, 配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>configuration<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">compute-full-forwarded-for</span><span class="token punctuation">:</span> <span class="token string">'true'</span>  <span class="token key atrule">use-forwarded-headers</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方案2-real-ip-header"><a href="#方案2-real-ip-header" class="headerlink" title="方案2 real_ip_header"></a>方案2 real_ip_header</h2><p>这种方式确实可以起作用，但是有用户反馈开启后访问ingres后端服务一直报<code>308</code>，检查了ingress的代码开启<code>use-forwarded-headers</code>后会同时开启<code>ssl-redirect</code>导致308。</p><p>那么我们只需要开启nginx配置中的相关real-ip的配置，如下在<code>http-snippet</code>添加<code>real_ip_header X-Forwarded-For;</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">kind</span><span class="token punctuation">:</span> ConfigMap<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>configuration<span class="token key atrule">data</span><span class="token punctuation">:</span>  <span class="token key atrule">http-snippet</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">    real_ip_header X-Forwarded-For;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="golang中获取真实ip"><a href="#golang中获取真实ip" class="headerlink" title="golang中获取真实ip"></a>golang中获取真实ip</h2><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">RemoteIP</span><span class="token punctuation">(</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ingress 行为，将真实ip放到header `X-Original-Forwarded-For`, 普通nginx可去掉此条</span>    ip <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Original-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ip <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ip    <span class="token punctuation">}</span>    ip <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Forwarded-For"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ip <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ip    <span class="token punctuation">}</span>    ip <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"X-Real-Ip"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ip <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ip    <span class="token punctuation">}</span>    <span class="token keyword">if</span> ip<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">SplitHostPort</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ip    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>nginx-ingress configmap中的配置会是全局生效的，上线前需要严格测试。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ingress Header Too Large</title>
      <link href="/ingress-header-too-large/"/>
      <url>/ingress-header-too-large/</url>
      
        <content type="html"><![CDATA[<p>线上遇到多次由ingress header过大引起的请求失败, 可能返回502/400，解决方案如下。</p><h2 id="502-–-too-big-header"><a href="#502-–-too-big-header" class="headerlink" title="502 – too big header"></a>502 – too big header</h2><p>502错误一般是后端服务不可用，但这里是nginx-ingress返回的，在nginx-ingress可看到如下日志：<br><code>upstream sent too big header while reading response header from upstream, client...</code></p><p>需要在ingress配置如下参数</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/proxy-buffer-size</span><span class="token punctuation">:</span> 128k <span class="token comment" spellcheck="true">#根据实际情况配置</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/proxy-buffering</span><span class="token punctuation">:</span> <span class="token string">"on"</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/server-snippet</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      large_client_header_buffers 16 128K;      client_header_buffer_size 128k;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="431-400-–-too-big-header"><a href="#431-400-–-too-big-header" class="headerlink" title="431/400 – too big header"></a>431/400 – too big header</h2><p>http header过大也有可能返回400/431, 可按照上述调整，如果还是有问题需要检查后端服务的header设置，比如golang http header默认是<code>1M</code>;<br>springboot应用需要在<code>application.properties</code>加上<code>server.max-http-header-size=32KB</code>等</p><h2 id="413-–-too-large-body"><a href="#413-–-too-large-body" class="headerlink" title="413 – too large body"></a>413 – too large body</h2><p>如果返回413，则超过了body size的限制（默认<code>1M</code>）, 可在ingress annotation添加<br><code>nginx.ingress.kubernetes.io/proxy-body-size: 8m</code></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ingress nginx benchmark</title>
      <link href="/ingress-benchmark/"/>
      <url>/ingress-benchmark/</url>
      
        <content type="html"><![CDATA[<p>Ingress是目前Kubernetes集群流量接入的重要入口，了解其性能指标有助于用户选用合适的网络方案。</p><h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><p>通过wrk压测后端nginx服务，对比ingress-nginx, 原生nginx，以及直连后端性能的差异，如下图:<br><img src="/img/blogImg/ingress-benchmark1.png" alt></p><ul><li>方案1，经过ingress</li><li>方案2，经过nginx</li><li>方案3，直连ip</li></ul><h3 id="硬件环境"><a href="#硬件环境" class="headerlink" title="硬件环境"></a>硬件环境</h3><ul><li>CPU： 2x  Intel(R) Xeon(R) CPU E5-2620 v4 @ 2.10GHz, 32 cores</li><li>Network： 10-Gigabit</li><li>Memory： 128 GB</li></ul><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><ul><li>wrk, 4.1.0, 在k8s master测试，减少网络影响</li><li>ingress-nginx, 0.30.0, <a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx</a></li><li>nginx, 1.13.5 </li><li>k8s, v1.14.9 </li><li>centos, 7.3.1611(Linux 4.9.2)</li></ul><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><p>ingress-nginx主要工作是转发请求到后端pod, 我们着重对其RPS（每秒请求量）进行测试</p><p>通过以下命令</p><pre class="line-numbers language-yaml"><code class="language-yaml">wrk <span class="token punctuation">-</span>t4 <span class="token punctuation">-</span>c1000 <span class="token punctuation">-</span>d120s <span class="token punctuation">-</span><span class="token punctuation">-</span>latency http<span class="token punctuation">:</span>//my.nginx.svc/1kb.bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><h3 id="不同cpu下的性能"><a href="#不同cpu下的性能" class="headerlink" title="不同cpu下的性能"></a>不同cpu下的性能</h3><p>对比不同ingress-nginx启动不同worker数量的性能差异，以下测试ingress-nginx开启了keepalive等特性</p><table><thead><tr><th>CPU</th><th>RPS</th></tr></thead><tbody><tr><td>1</td><td>5534</td></tr><tr><td>2</td><td>11203</td></tr><tr><td>4</td><td>22890</td></tr><tr><td>8</td><td>47025</td></tr><tr><td>16</td><td>93644</td></tr><tr><td>24</td><td>125990</td></tr><tr><td>32</td><td>153473</td></tr></tbody></table><p><img src="/img/blogImg/ingress-benchmark2.png" alt></p><p>如图所示，不同cpu下，ingress的rps与cpu成正比，cpu在16核之后增长趋势放缓。</p><h3 id="不同方案的性能对比"><a href="#不同方案的性能对比" class="headerlink" title="不同方案的性能对比"></a>不同方案的性能对比</h3><table><thead><tr><th>方案</th><th>RPS</th><th>备注</th></tr></thead><tbody><tr><td>ingress-nginx(原始)</td><td>69171</td><td></td></tr><tr><td>ingress-nginx(配置优化)</td><td>153473</td><td>调整worker，access-log, keepalive等</td></tr><tr><td>nginx</td><td>336769</td><td>开启keepalive, 关闭log</td></tr><tr><td>直连ip</td><td>340748</td><td>测试中的pod ip为真实ip</td></tr></tbody></table><p>通过实验可以看到，使用nginx代理和直连ip，rps相差不大；原始ingress-nginx rps很低，优化后rps提升一倍，但对比nginx还是有较大的性能差异。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>默认ingress-nginx性能较差，配置优化后也只有15w RPS，对比原生nginx（33W) 差距较大。经过分析主要瓶颈在于ingress-nginx的lua过滤脚本，具体原因需要进一步分析。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#upstream-keepalive-connections" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#upstream-keepalive-connections</a></li><li><a href="https://www.nginx.com/blog/testing-performance-nginx-ingress-controller-kubernetes/" target="_blank" rel="noopener">https://www.nginx.com/blog/testing-performance-nginx-ingress-controller-kubernetes/</a></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>本测试所有配置见<a href="https://github.com/qingwave/ingress-nginx-benchmark" target="_blank" rel="noopener">qingwave/ingress-nginx-benchmark</a></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可能是史上最全的Kubernetes证书解析</title>
      <link href="/k8s-tls/"/>
      <url>/k8s-tls/</url>
      
        <content type="html"><![CDATA[<p>为了避免广告法，题目还是加个可能吧。</p><p>想要安全就必须复杂起来，证书是少不了的。在Kubernetes中提供了非常丰富的证书类型，满足各种不同场景的需求，今天我们就来看一看Kubernetes中的证书。</p><h2 id="k8s证书分类"><a href="#k8s证书分类" class="headerlink" title="k8s证书分类"></a>k8s证书分类</h2><p>在说证书之前，先想想作为集群的入口apiserver需要提供那些服务，与那些组件通信，通信的两方可能需要配置证书。<br>与apiserver通信的组件大体可以分为以下几类：</p><ul><li>client(kubectl，restapi等)：普通用户与apiserver之间的通信，对各类资源进行操作</li><li>kubelet，kubeproxy：master与node之间的通信</li><li>etcd：k8s的存储库</li><li>webhook：这里指apiserver提供的admission-webhook，在数据持久化前调用webhook</li><li>aggregation layer：扩展apiserver, 需要将自定义的api注册到k8s中，相比CRD性能更新</li><li>pod: 在pod中调用apiserver(一般调用为10.254.0.1:433)</li></ul><p>居然有这么多种，除了在pod中通过serviceacount认证（当然pod需要认证apiserver的证书），其他几种都需要配置证书。</p><p>其他集群内组件与apiserver通信的，kubelet/etcd/kube-proxy对应的也可以配置证书。</p><h2 id="apiserver证书"><a href="#apiserver证书" class="headerlink" title="apiserver证书"></a>apiserver证书</h2><p>简单列举下apiserver证书相关的启动参数</p><pre><code>--cert-dir string                           The directory where the TLS certs are located. If --tls-cert-file and --tls-private-key-file are provided, this flag will be ignored. (default &quot;/var/run/kubernetes&quot;)--client-ca-file string                     If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.--etcd-certfile string                      SSL certification file used to secure etcd communication.--etcd-keyfile string                       SSL key file used to secure etcd communication.--kubelet-certificate-authority string      Path to a cert file for the certificate authority.--kubelet-client-certificate string         Path to a client cert file for TLS.--kubelet-client-key string                 Path to a client key file for TLS.--proxy-client-cert-file string             Client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins. It is expected that this cert includes a signature from the CA in the --requestheader-client-ca-file flag. That CA is published in the &#39;extension-apiserver-authentication&#39; configmap in the kube-system namespace. Components recieving calls from kube-aggregator should use that CA to perform their half of the mutual TLS verification.--proxy-client-key-file string              Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins.--requestheader-allowed-names stringSlice   List of client certificate common names to allow to provide usernames in headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities in --requestheader-client-ca-file is allowed.--requestheader-client-ca-file string       Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames in headers specified by --requestheader-username-headers--service-account-key-file stringArray      File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens. If unspecified, --tls-private-key-file is used. The specified file can contain multiple keys, and the flag can be specified multiple times with different files.--ssh-keyfile string                        If non-empty, use secure SSH proxy to the nodes, using this user keyfile--tls-ca-file string                        If set, this certificate authority will used for secure access from Admission Controllers. This must be a valid PEM-encoded CA bundle. Alternatively, the certificate authority can be appended to the certificate provided by --tls-cert-file.--tls-cert-file string                      File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to /var/run/kubernetes.--tls-private-key-file string               File containing the default x509 private key matching --tls-cert-file.--tls-sni-cert-key namedCertKey             A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: &quot;example.crt,example.key&quot; or &quot;foo.crt,foo.key:*.foo.com,foo.com&quot;. (default [])--oidc-ca-file string                       If set, the OpenID server&#39;s certificate will be verified by one of the authorities in the oidc-ca-file, otherwise the host&#39;s root CA set will be used.--tls-sni-cert-key namedCertKey             A pair of x509 certificate and private key file paths, optionally suffixed with a list of domain patterns which are fully qualified domain names, possibly with prefixed wildcard segments. If no domain patterns are provided, the names of the certificate are extracted. Non-wildcard matches trump over wildcard matches, explicit domain patterns trump over extracted names. For multiple key/certificate pairs, use the --tls-sni-cert-key multiple times. Examples: &quot;example.crt,example.key&quot; or &quot;foo.crt,foo.key:*.foo.com,foo.com&quot;. (default [])</code></pre><p>不要害怕，咱们一个个看。</p><h3 id="tls证书"><a href="#tls证书" class="headerlink" title="tls证书"></a>tls证书</h3><p>首先，apiserver本身是一个http服务器，需要tls证书</p><pre><code>--tls-cert-file string    File containing the default x509 Certificate for HTTPS. (CA cert, if any, concatenated after server cert). If HTTPS serving is enabled, and --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory specified by --cert-dir.--tls-private-key-file string    File containing the default x509 private key matching --tls-cert-file.其他client验证apiserver时可以通过签署这两个证书的CA，我们称为`tls-ca`</code></pre><h3 id="client证书"><a href="#client证书" class="headerlink" title="client证书"></a>client证书</h3><p>apiserver提供了tls证书，同样也需要验证client的配置，但是client太多了(kubectl,各种restapi调用的), 这些client需要统一用一个CA签发，我们称为<code>client-ca</code>。</p><pre><code>--client-ca-file string    If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.</code></pre><p>需要注意的是，在apiserver认证中，通过<code>CN</code>和<code>O</code>来识别用户，开启RBAC的用户要配置<code>CN</code>和<code>O</code>做一些授权：</p><ul><li>CN：Common Name，kube-apiserver 从证书中提取作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li><li>O：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)</li></ul><p>如kube-proxy的证书申请, User为<code>system:kube-proxy</code>, Group为<code>k8s</code></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"CN"</span><span class="token operator">:</span> <span class="token string">"system:kube-proxy"</span><span class="token punctuation">,</span>  <span class="token property">"hosts"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"key"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"algo"</span><span class="token operator">:</span> <span class="token string">"rsa"</span><span class="token punctuation">,</span>    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">2048</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"names"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"C"</span><span class="token operator">:</span> <span class="token string">"CN"</span><span class="token punctuation">,</span>      <span class="token property">"ST"</span><span class="token operator">:</span> <span class="token string">"BeiJing"</span><span class="token punctuation">,</span>      <span class="token property">"L"</span><span class="token operator">:</span> <span class="token string">"BeiJing"</span><span class="token punctuation">,</span>      <span class="token property">"O"</span><span class="token operator">:</span> <span class="token string">"k8s"</span><span class="token punctuation">,</span>      <span class="token property">"OU"</span><span class="token operator">:</span> <span class="token string">"System"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="requestheader证书"><a href="#requestheader证书" class="headerlink" title="requestheader证书"></a>requestheader证书</h3><p>apiserver可以使用HTTP请求头中的指定字段来进行认证，相关配置如下:</p><pre><code>--requestheader-allowed-names stringSlice    List of client certificate common names to allow to provide usernames in headers specified by --requestheader-username-headers. If empty, any client certificate validated by the authorities in --requestheader-client-ca-file is allowed.--requestheader-client-ca-file string    Root certificate bundle to use to verify client certificates on incoming requests before trusting usernames in headers specified by --requestheader-username-headers. WARNING: generally do not depend on authorization being already done for incoming requests.--requestheader-extra-headers-prefix strings            List of request header prefixes to inspect. X-Remote-Extra- is suggested.--requestheader-group-headers strings                   List of request headers to inspect for groups. X-Remote-Group is suggested.--requestheader-username-headers strings                List of request headers to inspect for usernames. X-Remote-User is common.</code></pre><p>收到请求时，apiserver会首先认证<code>requsetheader-ca</code>，验证成功并且<code>CN</code>在<code>requestheader-allowed-names</code>（默认全部需求）中，然后通过Http header中的<code>X-Remote-User, X-Remote-Group</code>去得到用户；如果匹配不成功回去验证<code>client-ca</code>。</p><p>如上，<code>requestheader</code>证书与<code>client-ca</code>不能是同一个。</p><h3 id="proxy证书"><a href="#proxy证书" class="headerlink" title="proxy证书"></a>proxy证书</h3><p>k8s提供了丰富的扩展机制，CRD与[API Aggregation][<a href="https://kubernetes.io/zh/docs/tasks/access-kubernetes-api/configure-aggregation-layer/]。" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/access-kubernetes-api/configure-aggregation-layer/]。</a><br>对于API Aggregation(例如metrics-server提供了metrics.k8s.io api), apiserver接受到请求后经过一系列验证过滤，会将请求转发到扩展API，这里apisever作为代理服务器，需要配置配置证书。</p><pre><code>--proxy-client-cert-file string                 Client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins. It is expected that this cert includes a signature from the CA in the --requestheader-client-ca-file flag. That CA is published in the &#39;extension-apiserver-authentication&#39; configmap in the kube-system namespace. Components recieving calls from kube-aggregator should use that CA to perform their half of the mutual TLS verification.--proxy-client-key-file string                  Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver when it must call out during a request. This includes proxying requests to a user api-server and calling out to webhook admission plugins.</code></pre><p>需要注意的是对证书需要通过<code>requestheader-ca</code>签发，扩展api会通过requestheader证书去验证，具体流程后面会写一篇，下图为官方提供的流程<br><img src="https://d33wubrfki0l68.cloudfront.net/3c5428678a95c3715894011d8dd4812d2cf229b9/e745c/images/docs/aggregation-api-auth-flow.png" alt="aggregation-api"></p><h3 id="kubelet证书"><a href="#kubelet证书" class="headerlink" title="kubelet证书"></a>kubelet证书</h3><p>对于kubelet，apiserver单独提供了证书配置选项，同时kubelet组件也提供了反向设置的相关选项:</p><pre><code># API Server--kubelet-certificate-authority string    Path to a cert file for the certificate authority.--kubelet-client-certificate string    Path to a client cert file for TLS.--kubelet-client-key string    Path to a client key file for TLS.# kubelet--client-ca-file string    If set, any request presenting a client certificate signed by one of the authorities in the client-ca-file is authenticated with an identity corresponding to the CommonName of the client certificate.--tls-cert-file string     File containing x509 Certificate used for serving HTTPS (with intermediate certs, if any, concatenated after server cert). If --tls-cert-file and --tls-private-key-file are not provided, a self-signed certificate and key are generated for the public address and saved to the directory passed to --cert-dir.--tls-private-key-file string    File containing x509 private key matching --tls-cert-file.</code></pre><p>kubelet也是即作为server也作为client, 需要提供tls证书和client-ca, 我们称这个CA为<code>kubelet-ca</code>, 可以是单独的CA。</p><h3 id="etcd证书"><a href="#etcd证书" class="headerlink" title="etcd证书"></a>etcd证书</h3><p>这个也不用多说，用来连接etcd，由<code>etcd-ca</code>签发</p><pre><code>--etcd-certfile string                      SSL certification file used to secure etcd communication.--etcd-keyfile string                       SSL key file used to secure etcd communication.</code></pre><h3 id="serviceaccount证书"><a href="#serviceaccount证书" class="headerlink" title="serviceaccount证书"></a>serviceaccount证书</h3><p>在k8s中，通过<code>JWT</code>认证<code>serviecaccount</code>，同样有两个证书配置:</p><pre><code># apiserver--service-account-key-file stringArray # 用于验证sa    File containing PEM-encoded x509 RSA or ECDSA private or public keys, used to verify ServiceAccount tokens. The specified file can contain multiple keys, and the flag can be specified multiple times with different files. If unspecified, --tls-private-key-file is used. Must be specified when --service-account-signing-key is provided--service-account-signing-key-file string    Path to the file that contains the current private key of the service account token issuer. The issuer will sign issued ID tokens with this private key. (Requires the &#39;TokenRequest&#39; feature gate.)# controller-manager–service-account-private-key-file #用于签署sa</code></pre><p>这两个配置描述了对<code>serviceaccount</code>进行签名验证时所使用的证书；可以是单独的生成，我们称为<code>sa-key</code>。</p><h2 id="其他证书"><a href="#其他证书" class="headerlink" title="其他证书"></a>其他证书</h2><p>其他还有<code>oidc</code>证书，用于OpenID认证；<code>ssh</code>证书，用来连接node，目前以及废弃。</p><p>etcd与kubelet证书上面已经提过了，需要双方都配置。</p><p>k8s中也支持证书申请，用户可以创建<code>CertificateSigningRequest</code>来申请证书，需要在controller-manager配置下面的证书，用于签发证书称为<code>sing-ca</code>，多用于webhook的证书配置。</p><pre><code>--cluster-signing-cert-file string          Filename containing a PEM-encoded X509 CA certificate used to issue cluster-scoped certificates (default &quot;/etc/kubernetes/ca/ca.pem&quot;)--cluster-signing-key-file string           Filename containing a PEM-encoded RSA or ECDSA private key used to sign cluster-scoped certificates (default &quot;/etc/kubernetes/ca/ca.key&quot;)</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>k8s提供了强大的功能，需要考虑到各个场景的安全问题，上面我们梳理了遍目前常用的证书</p><ul><li>tls-ca</li><li>client-ca</li><li>requestheader-ca</li><li>proxy-ca</li><li>kubelet-ca</li><li>etcd-ca</li><li>sa-key</li><li>sign-ca</li></ul><p>上面除了<code>proxy-ca</code>必须使用<code>requestheader-ca</code>签发，其他所有的都可以是单独的CA，可以根据安全性评估是使用一个CA还是多个CA，我们建议下面的CA尽量是独立的</p><ul><li>client-ca</li><li>requestheader-ca</li><li>etcd-ca</li><li>kubelet-ca</li><li>sign-ca</li></ul><p>终于理完了，可以起床啦。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> apiserver </tag>
            
            <tag> tls </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes扩展apiserver实现分析</title>
      <link href="/kube-apiserver-aggretation-api/"/>
      <url>/kube-apiserver-aggretation-api/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes提供了丰富的扩展功能，实现自定义资源有两种方式<code>CRD</code>与<code>Aggregation API</code>。相对于<code>CRD</code>，扩展API功能更丰富，可以实现单独的存储。今天来聊一聊，k8s是如是实现扩展api的，它与apiserver之间又是如何协作的</p><h2 id="AggregationApiserver介绍"><a href="#AggregationApiserver介绍" class="headerlink" title="AggregationApiserver介绍"></a>AggregationApiserver介绍</h2><p><code>Aggregator</code>类似于一个七层负载均衡，将来自用户的请求拦截转发给其他服务器，并且负责整个 APIServer 的 Discovery 功能。</p><p>通过<code>APIServices</code>对象关联到某个<code>Service</code>来进行请求的转发，其关联的<code>Service</code>类型进一步决定了请求转发形式。<code>Aggregator</code>包括一个<code>GenericAPIServer</code>和维护自身状态的<code>Controller</code>。其中 <code>GenericAPIServer</code>主要处理<code>apiregistration.k8s.io</code>组下的<code>APIService</code>资源请求。</p><p>主要controller包括：</p><ol><li>apiserviceRegistrationController：负责<code>APIServices</code>中资源的注册与删除；</li><li>availableConditionController：维护<code>APIServices</code>的可用状态，包括其引用<code>Service</code>是否可用等；</li><li>autoRegistrationController：用于保持API中存在的一组特定的<code>APIServices</code>；</li><li>crdRegistrationController：负责将<code>CRD GroupVersions</code>自动注册到<code>APIServices</code>中；</li><li>openAPIAggregationController：将<code>APIServices</code>资源的变化同步至提供的<code>OpenAPI</code>文档；</li></ol><p>在 kube-apiserver 中需要增加以下配置来开启 API Aggregation：</p><pre><code>--proxy-client-cert-file=/etc/kubernetes/certs/proxy.crt--proxy-client-key-file=/etc/kubernetes/certs/proxy.key--requestheader-client-ca-file=/etc/kubernetes/certs/proxy-ca.crt--requestheader-extra-headers-prefix=X-Remote-Extra---requestheader-group-headers=X-Remote-Group--requestheader-username-headers=X-Remote-User</code></pre><p>如果 kube-proxy 没有和 API server 运行在同一台主机上，那么需要确保启用了如下 apiserver 标记：</p><pre><code>--enable-aggregator-routing=true</code></pre><p>在<a href="./kube-apiserver-start.md">apiserver启动流程</a>中，分析了<code>AggregationApiserver</code>的初始化流程, 需要了解的可以回去看下。</p><h2 id="AggregationApiserver认证流程"><a href="#AggregationApiserver认证流程" class="headerlink" title="AggregationApiserver认证流程"></a>AggregationApiserver认证流程</h2><p>与自定义资源定义（CRD）不同，除标准的 Kubernetes apiserver 外，Aggregation API 还涉及另一个服务器：扩展 apiserver。Kubernetes apiserver 将需要与您的扩展 apiserver 通信，并且您的扩展 apiserver 也需要与 Kubernetes apiserver 通信。为了确保此通信的安全，Kubernetes apiserver 使用 x509 证书向扩展 apiserver 认证。</p><p>AggregationApi的请求链路如下：</p><pre><code>defaultHandlerChain-&gt;aggregator-&gt;aggregation-apiserver-&gt;aggregator-&gt;user</code></pre><p>大致流程如下：</p><ol><li>Kubernetes apiserver：对发出请求的用户身份认证，并对请求的 API 路径执行鉴权。</li><li>Kubernetes apiserver：将请求转发到扩展 apiserver</li><li>扩展 apiserver：认证来自 Kubernetes apiserver 的请求</li><li>扩展 apiserver：对来自原始用户的请求鉴权</li><li>扩展 apiserver：执行对应操作返回</li></ol><p>如图所示：<br><a href="https://d33wubrfki0l68.cloudfront.net/3c5428678a95c3715894011d8dd4812d2cf229b9/e745c/images/docs/aggregation-api-auth-flow.png" target="_blank" rel="noopener">aggregation-apiserver-auth</a></p><p>apiserver与扩展apiserver通过证书认证,</p><ul><li>apiserver配置<code>porxy-client</code>证书(使用requestheader根证书签发)，扩展apiserver配置<code>reqeustheader</code>根证书，如果没配置，会默认从configmap <code>kube-system/extension-apiserver-authentication</code> 去找</li><li>扩展apiserver通过<code>extension-apiserver-authentication</code>获取apiserver的<code>client-ca</code>，生成证书对，apiserver可以使用<code>client-ca</code>验证它</li><li>由于apiserver-&gt;扩展apiserver通过<code>reqeustheader</code>方式认证，apiserver会将接受到的请求经过认证，转换为header，扩展apiserver通过header获取用户，再通过apiserver接口做权限校验。</li></ul><p>有同学有疑问，为什么这里需要做两次认证，两次鉴权。这是由于扩展apiserveer是一个单独的服务器，如果接受非apiserver的请求也是需要做认证鉴权的。那能不能认证是apiserver后就不做鉴权了呢，这得需要apiserver在转发请求时加入鉴权信息就行。</p><h2 id="AggregationApiserver处理流程"><a href="#AggregationApiserver处理流程" class="headerlink" title="AggregationApiserver处理流程"></a>AggregationApiserver处理流程</h2><h3 id="apiserver处理逻辑"><a href="#apiserver处理逻辑" class="headerlink" title="apiserver处理逻辑"></a>apiserver处理逻辑</h3><p>在apiserver认证时，认证接受会将认证信息删除, 可参考前面的[apiserver认证源码分析]</p><p>处理逻辑如下：</p><ol><li>通过<code>context</code>获取user信息</li><li>构造请求，删除reqeustheader信息，通过user重新填充</li><li>通过<code>proxyRoundTripper</code>转发请求</li></ol><p>(kube-apiserver-authentication-code.md)<br>aggregation的<a href="https://github.com/kubernetes/kubernetes/blob/df9b4e92e84849e2b9fdb5b4849c9c4ebfae8040/staging/src/k8s.io/kube-aggregator/pkg/apiserver/handler_proxy.go#L109" target="_blank" rel="noopener">hander</a>的实现：</p><pre class="line-numbers language-golang"><code class="language-golang">// 通过context获取user    user, ok := genericapirequest.UserFrom(req.Context())    if !ok {        proxyError(w, req, "missing user", http.StatusInternalServerError)        return  }  // 构造请求url,通过apiservice配置的service/namespace随机得到某个endpoint后端  location := &url.URL{}    location.Scheme = "https"    rloc, err := r.serviceResolver.ResolveEndpoint(handlingInfo.serviceNamespace, handlingInfo.serviceName, handlingInfo.servicePort)    if err != nil {        klog.Errorf("error resolving %s/%s: %v", handlingInfo.serviceNamespace, handlingInfo.serviceName, err)        proxyError(w, req, "service unavailable", http.StatusServiceUnavailable)        return    }    location.Host = rloc.Host    location.Path = req.URL.Path  location.RawQuery = req.URL.Query().Encode()  // we need to wrap the roundtripper in another roundtripper which will apply the front proxy headers  // 包裹请求信息，将user信息放到header中    proxyRoundTripper, upgrade, err := maybeWrapForConnectionUpgrades(handlingInfo.restConfig, handlingInfo.proxyRoundTripper, req)    if err != nil {        proxyError(w, req, err.Error(), http.StatusInternalServerError)        return    }  proxyRoundTripper = transport.NewAuthProxyRoundTripper(user.GetName(), user.GetGroups(), user.GetExtra(), proxyRoundTripper)  // 调用后端  handler := proxy.NewUpgradeAwareHandler(location, proxyRoundTripper, true, upgrade, &responder{w: w})    handler.ServeHTTP(w, newReq)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据扩展apiserver找到后端时通过service获取对应endpoint列表，随机选择某个endpoint、<br>实现如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ResourceLocation returns a URL to which one can send traffic for the specified service.</span><span class="token keyword">func</span> <span class="token function">ResolveEndpoint</span><span class="token punctuation">(</span>services listersv1<span class="token punctuation">.</span>ServiceLister<span class="token punctuation">,</span> endpoints listersv1<span class="token punctuation">.</span>EndpointsLister<span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">,</span> port <span class="token builtin">int32</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    svc<span class="token punctuation">,</span> err <span class="token operator">:=</span> services<span class="token punctuation">.</span><span class="token function">Services</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    svcPort<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">findServicePort</span><span class="token punctuation">(</span>svc<span class="token punctuation">,</span> port<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> svc<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Type <span class="token operator">==</span> v1<span class="token punctuation">.</span>ServiceTypeClusterIP<span class="token punctuation">,</span> svc<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Type <span class="token operator">==</span> v1<span class="token punctuation">.</span>ServiceTypeLoadBalancer<span class="token punctuation">,</span> svc<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Type <span class="token operator">==</span> v1<span class="token punctuation">.</span>ServiceTypeNodePort<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">// these are fine</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unsupported service type %q"</span><span class="token punctuation">,</span> svc<span class="token punctuation">.</span>Spec<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    eps<span class="token punctuation">,</span> err <span class="token operator">:=</span> endpoints<span class="token punctuation">.</span><span class="token function">Endpoints</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>svc<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>eps<span class="token punctuation">.</span>Subsets<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">NewServiceUnavailable</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"no endpoints available for service %q"</span><span class="token punctuation">,</span> svc<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Pick a random Subset to start searching from.</span>    ssSeed <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>eps<span class="token punctuation">.</span>Subsets<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Find a Subset that has the port.</span>    <span class="token keyword">for</span> ssi <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> ssi <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>eps<span class="token punctuation">.</span>Subsets<span class="token punctuation">)</span><span class="token punctuation">;</span> ssi<span class="token operator">++</span> <span class="token punctuation">{</span>        ss <span class="token operator">:=</span> <span class="token operator">&amp;</span>eps<span class="token punctuation">.</span>Subsets<span class="token punctuation">[</span><span class="token punctuation">(</span>ssSeed<span class="token operator">+</span>ssi<span class="token punctuation">)</span><span class="token operator">%</span><span class="token function">len</span><span class="token punctuation">(</span>eps<span class="token punctuation">.</span>Subsets<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span>Addresses<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> ss<span class="token punctuation">.</span>Ports <span class="token punctuation">{</span>            <span class="token keyword">if</span> ss<span class="token punctuation">.</span>Ports<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name <span class="token operator">==</span> svcPort<span class="token punctuation">.</span>Name <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Pick a random address.</span>                <span class="token comment" spellcheck="true">// 核心，随机选择endpoint</span>                ip <span class="token operator">:=</span> ss<span class="token punctuation">.</span>Addresses<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span>Addresses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>IP                port <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>ss<span class="token punctuation">.</span>Ports<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Port<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">&amp;</span>url<span class="token punctuation">.</span>URL<span class="token punctuation">{</span>                    Scheme<span class="token punctuation">:</span> <span class="token string">"https"</span><span class="token punctuation">,</span>                    Host<span class="token punctuation">:</span>   net<span class="token punctuation">.</span><span class="token function">JoinHostPort</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">NewServiceUnavailable</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"no endpoints available for service %q"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ProxyRoundTripper创建在<a href="https://github.com/kubernetes/kubernetes/blob/a42e029e6905bee5b9d5489610c4fbe5988eeac6/staging/src/k8s.io/client-go/transport/round_trippers.go#L101" target="_blank" rel="noopener">round_trippers.go</a></p><pre class="line-numbers language-golang"><code class="language-golang">func NewAuthProxyRoundTripper(username string, groups []string, extra map[string][]string, rt http.RoundTripper) http.RoundTripper {    return &authProxyRoundTripper{        username: username,        groups:   groups,        extra:    extra,        rt:       rt,    }}func (rt *authProxyRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {  req = utilnet.CloneRequest(req)  // 包裹user信息    SetAuthProxyHeaders(req, rt.username, rt.groups, rt.extra)    return rt.rt.RoundTrip(req)}// SetAuthProxyHeaders stomps the auth proxy header fields.  It mutates its argument.func SetAuthProxyHeaders(req *http.Request, username string, groups []string, extra map[string][]string) {  // 清楚原始url的requestheader信息    req.Header.Del("X-Remote-User")    req.Header.Del("X-Remote-Group")    for key := range req.Header {        if strings.HasPrefix(strings.ToLower(key), strings.ToLower("X-Remote-Extra-")) {            req.Header.Del(key)        }    }  // 通过user重新填充信息    req.Header.Set("X-Remote-User", username)    for _, group := range groups {        req.Header.Add("X-Remote-Group", group)    }    for key, values := range extra {        for _, value := range values {            req.Header.Add("X-Remote-Extra-"+headerKeyEscape(key), value)        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展apiserver处理逻辑"><a href="#扩展apiserver处理逻辑" class="headerlink" title="扩展apiserver处理逻辑"></a>扩展apiserver处理逻辑</h3><p>下以metrics-server为例说明扩展apiserver在收到apiserver请求后的处理</p><p>与apiserver初始化相同，metrics-server也需要初始化生成<code>genericServer</code>, 然后注册apigroup<br><code>pkg/metrics-server/config.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c Config<span class="token punctuation">)</span> <span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>MetricsServer<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    informer<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">informer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    kubeletClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">kubeletClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    addressResolver <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">addressResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 创建scraper，负责抓取监控数据</span>    scrape <span class="token operator">:=</span> scraper<span class="token punctuation">.</span><span class="token function">NewScraper</span><span class="token punctuation">(</span>informer<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Nodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kubeletClient<span class="token punctuation">,</span> addressResolver<span class="token punctuation">,</span> c<span class="token punctuation">.</span>ScrapeTimeout<span class="token punctuation">)</span>    scraper<span class="token punctuation">.</span><span class="token function">RegisterScraperMetrics</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>ScrapeTimeout<span class="token punctuation">)</span>    <span class="token function">RegisterServerMetrics</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>MetricResolution<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 生成genericServer, 包裹有 DefaultBuildHandlerChain</span>    genericServer<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>Apiserver<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span>informer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"metrics-server"</span><span class="token punctuation">,</span> genericapiserver<span class="token punctuation">.</span><span class="token function">NewEmptyDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    store <span class="token operator">:=</span> storage<span class="token punctuation">.</span><span class="token function">NewStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 注册api</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> api<span class="token punctuation">.</span><span class="token function">Install</span><span class="token punctuation">(</span>store<span class="token punctuation">,</span> informer<span class="token punctuation">.</span><span class="token function">Core</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> genericServer<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>MetricsServer<span class="token punctuation">{</span>        GenericAPIServer<span class="token punctuation">:</span> genericServer<span class="token punctuation">,</span>        storage<span class="token punctuation">:</span>          store<span class="token punctuation">,</span>        scraper<span class="token punctuation">:</span>          scrape<span class="token punctuation">,</span>        resolution<span class="token punctuation">:</span>       c<span class="token punctuation">.</span>MetricResolution<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>api注册代码，通过<code>Build</code>生成apigroup，调用<code>InstallAPIGroup</code>进行注册<br><code>pkg/api/install.go</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// InstallStorage builds the metrics for the metrics.k8s.io API, and then installs it into the given API metrics-server.</span><span class="token keyword">func</span> <span class="token function">Install</span><span class="token punctuation">(</span>metrics MetricsGetter<span class="token punctuation">,</span> informers coreinf<span class="token punctuation">.</span>Interface<span class="token punctuation">,</span> server <span class="token operator">*</span>genericapiserver<span class="token punctuation">.</span>GenericAPIServer<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    info <span class="token operator">:=</span> <span class="token function">Build</span><span class="token punctuation">(</span>metrics<span class="token punctuation">,</span> informers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 注册apigroup</span>    <span class="token keyword">return</span> server<span class="token punctuation">.</span><span class="token function">InstallAPIGroup</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Build constructs APIGroupInfo the metrics.k8s.io API group using the given getters.</span><span class="token keyword">func</span> <span class="token function">Build</span><span class="token punctuation">(</span>m MetricsGetter<span class="token punctuation">,</span> informers coreinf<span class="token punctuation">.</span>Interface<span class="token punctuation">)</span> genericapiserver<span class="token punctuation">.</span>APIGroupInfo <span class="token punctuation">{</span>    apiGroupInfo <span class="token operator">:=</span> genericapiserver<span class="token punctuation">.</span><span class="token function">NewDefaultAPIGroupInfo</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span>GroupName<span class="token punctuation">,</span> Scheme<span class="token punctuation">,</span> metav1<span class="token punctuation">.</span>ParameterCodec<span class="token punctuation">,</span> Codecs<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 注册metrics相关api</span>    node <span class="token operator">:=</span> <span class="token function">newNodeMetrics</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span><span class="token string">"nodemetrics"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> informers<span class="token punctuation">.</span><span class="token function">Nodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pod <span class="token operator">:=</span> <span class="token function">newPodMetrics</span><span class="token punctuation">(</span>metrics<span class="token punctuation">.</span><span class="token function">Resource</span><span class="token punctuation">(</span><span class="token string">"podmetrics"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> informers<span class="token punctuation">.</span><span class="token function">Pods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    metricsServerResources <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>rest<span class="token punctuation">.</span>Storage<span class="token punctuation">{</span>        <span class="token string">"nodes"</span><span class="token punctuation">:</span> node<span class="token punctuation">,</span>        <span class="token string">"pods"</span><span class="token punctuation">:</span>  pod<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    apiGroupInfo<span class="token punctuation">.</span>VersionedResourcesStorageMap<span class="token punctuation">[</span>v1beta1<span class="token punctuation">.</span>SchemeGroupVersion<span class="token punctuation">.</span>Version<span class="token punctuation">]</span> <span class="token operator">=</span> metricsServerResources    <span class="token keyword">return</span> apiGroupInfo<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同apiserver，metrics-server收到请求后会经过<code>DefaultBuildHandlerChain</code></p><ul><li>认证，从apiserver转发来的请求是<code>reqeustheader</code>形式，metrics-server会使用<code>requestheader-ca</code>验证证书</li><li>鉴权，同apiserver一样</li></ul><blockquote><p>注意, 如果apiserver未配置<code>proxy-client</code>证书，metrics-server认证不通过，即使apiserver认证通过，metrics-server也会认为是匿名用户<code>system:anonymous</code></p></blockquote><p>最后，metrics-server执行具体逻辑，返回结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>扩容apiserver的创建，处理流程与apiserver完全一样，可以直接调用apiserver的库，扩展apiserver直接处理请求，不需要经过webhook，性能更好，更强大的是完全不使用etcd，替换成时序数据库或者其他数据库。后续可以分析下CRD与扩展apiserver的区别以及使用场景。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> apiserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kube-apiserver启动流程分析</title>
      <link href="/kube-apiserver-start/"/>
      <url>/kube-apiserver-start/</url>
      
        <content type="html"><![CDATA[<p>kube-apiserver 共由 3 个组件构成（Aggregator. KubeAPIServer. APIExtensionServer），这些组件依次通过 Delegation 处理请求：</p><ul><li>Aggregator：暴露的功能类似于一个七层负载均衡，将来自用户的请求拦截转发给其他服务器，并且负责整个 APIServer 的 Discovery 功能；也负责处理ApiService，注册对应的扩展api。</li><li>KubeAPIServer ：负责对请求的一些通用处理，认证. 鉴权等，以及处理各个内建资源的 REST 服务；</li><li>APIExtensionServer：主要处理 CustomResourceDefinition（CRD）和 CustomResource（CR）的 REST 请求，也是 Delegation 的最后一环，如果对应 CR 不能被处理的话则会返回 404。</li></ul><h2 id="kube-apiserver启动流程"><a href="#kube-apiserver启动流程" class="headerlink" title="kube-apiserver启动流程"></a>kube-apiserver启动流程</h2><p>Apiserver通过<code>Run</code>方法启动, 主要逻辑为：</p><ol><li>调用<code>CreateServerChain</code>构建服务调用链并判断是否启动非安全的<code>httpserver</code>，<code>httpserver</code>链中包含 apiserver要启动的三个server，以及为每个server注册对应资源的路由；</li><li>调用<code>server.PrepareRun</code>进行服务运行前的准备，该方法主要完成了健康检查. 存活检查和OpenAPI路由的注册工作；</li><li><p>调用<code>prepared.Run</code>启动server；</p><pre class="line-numbers language-golang"><code class="language-golang">// Run runs the specified APIServer.  This should never exit.func Run(completeOptions completedServerRunOptions, stopCh <-chan struct{}) error { // To help debugging, immediately log version klog.Infof("Version: %+v", version.Get())// 创建调用链 server, err := CreateServerChain(completeOptions, stopCh) if err != nil {     return err }// 进行一些准备工作， 注册一些hander，执行hook等 prepared, err := server.PrepareRun() if err != nil {     return err }// 开始执行 return prepared.Run(stopCh)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>执行具体的<code>Run</code>方法</p><pre class="line-numbers language-golang"><code class="language-golang">// Run spawns the secure http server. It only returns if stopCh is closed// or the secure port cannot be listened on initially.func (s preparedGenericAPIServer) Run(stopCh <-chan struct{}) error {    delayedStopCh := make(chan struct{})    go func() {        defer close(delayedStopCh)        <-stopCh        // As soon as shutdown is initiated, /readyz should start returning failure.        // This gives the load balancer a window defined by ShutdownDelayDuration to detect that /readyz is red        // and stop sending traffic to this server.        // 当终止时，关闭readiness        close(s.readinessStopCh)        time.Sleep(s.ShutdownDelayDuration)    }()    // 执行非阻塞Run    // close socket after delayed stopCh    err := s.NonBlockingRun(delayedStopCh)    if err != nil {        return err    }    <-stopCh    // run shutdown hooks directly. This includes deregistering from the kubernetes endpoint in case of kube-apiserver.    // 关闭前执行一些hook操作    err = s.RunPreShutdownHooks()    if err != nil {        return err    }    // wait for the delayed stopCh before closing the handler chain (it rejects everything after Wait has been called).    <-delayedStopCh    // 等待所有请求执行完    // Wait for all requests to finish, which are bounded by the RequestTimeout variable.    s.HandlerChainWaitGroup.Wait()    return nil}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行<code>NonBlockingRun</code><br><code>k8s.io/kubernetes/staging/src/k8s.io/apiserver/pkg/server/genericapiserver.go:351</code></p><pre class="line-numbers language-golang"><code class="language-golang">func (s preparedGenericAPIServer) NonBlockingRun(stopCh <-chan struct{}) error {    auditStopCh := make(chan struct{})    // 1. 判断是否要启动审计日志    if s.AuditBackend != nil {        if err := s.AuditBackend.Run(auditStopCh); err != nil {            return fmt.Errorf("failed to run the audit backend: %v", err)        }    }    // 2. 启动 https server    internalStopCh := make(chan struct{})    var stoppedCh <-chan struct{}    if s.SecureServingInfo != nil && s.Handler != nil {        var err error        stoppedCh, err = s.SecureServingInfo.Serve(s.Handler, s.ShutdownTimeout, internalStopCh)        if err != nil {            close(internalStopCh)            close(auditStopCh)            return err        }    }    go func() {        <-stopCh        close(s.readinessStopCh)        close(internalStopCh)        if stoppedCh != nil {            <-stoppedCh        }        s.HandlerChainWaitGroup.Wait()        close(auditStopCh)    }()    // 3. 执行 postStartHooks    s.RunPostStartHooks(stopCh)    // 4. 向 systemd 发送 ready 信号    if _, err := systemd.SdNotify(true, "READY=1\n"); err != nil {        klog.Errorf("Unable to send systemd daemon successful start message: %v\n", err)    }    return nil}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用链分析"><a href="#调用链分析" class="headerlink" title="调用链分析"></a>调用链分析</h2><p>上一节简单分析了Apiserver的启动流程，通过初始化各种配置，封装调用链，启动Server。这节主要分析调用链。</p><p>初始化阶段, 通过<code>CreateServerChain</code>创建调用链， 代码在<a href="https://github.com/kubernetes/kubernetes/blob/1d057da2f73118893b5cc27c15d59ff03beb271e/cmd/kube-apiserver/app/server.go#L169" target="_blank" rel="noopener">server.go</a></p><pre class="line-numbers language-golang"><code class="language-golang">// CreateServerChain creates the apiservers connected via delegation.func CreateServerChain(completedOptions completedServerRunOptions, stopCh <-chan struct{}) (*aggregatorapiserver.APIAggregator, error) {  // nodetunneler与node通信，proxy实现代理功能，转发请求给其他apiservice  // apiserver到cluster的通信可以通过三种方法  // apiserver到kubelet的endpoint，用于logs功能，exec功能，port-forward功能  // HTTP连接，即使可以用HTTPS也不做任何其他校验，并不安全  // ssh tunnel，不推荐使用  nodeTunneler, proxyTransport, err := CreateNodeDialer(completedOptions)    // 1. 为 kubeAPIServer 创建配置    kubeAPIServerConfig, insecureServingInfo, serviceResolver, pluginInitializer, admissionPostStartHook, err :=                                         CreateKubeAPIServerConfig(completedOptions, nodeTunneler, proxyTransport)    if err != nil {        return nil, err    }    // 2. 判断是否配置了 APIExtensionsServer，创建 apiExtensionsConfig     apiExtensionsConfig, err := createAPIExtensionsConfig(*kubeAPIServerConfig.GenericConfig, kubeAPIServerConfig.ExtraConfig.VersionedInformers,        pluginInitializer, completedOptions.ServerRunOptions, completedOptions.MasterCount,vc        serviceResolver, webhook.NewDefaultAuthenticationInfoResolverWrapper(proxyTransport, kubeAPIServerConfig.GenericConfig.LoopbackClientConfig))    if err != nil {        return nil, err    }    // 3. 初始化 APIExtensionsServer, 通过一个空的delegate初始化    apiExtensionsServer, err := createAPIExtensionsServer(apiExtensionsConfig, genericapiserver.NewEmptyDelegate())    if err != nil {        return nil, err    }    // 4. 初始化 KubeAPIServer    kubeAPIServer, err := CreateKubeAPIServer(kubeAPIServerConfig, apiExtensionsServer.GenericAPIServer, admissionPostStartHook)    if err != nil {        return nil, err    }    // 5. 创建 AggregatorConfig    aggregatorConfig, err := createAggregatorConfig(*kubeAPIServerConfig.GenericConfig, completedOptions.ServerRunOptions, kubeAPIServerConfig.          ExtraConfig.VersionedInformers, serviceResolver, proxyTransport, pluginInitializer)    if err != nil {        return nil, err    }    // 6. 初始化 AggregatorServer    aggregatorServer, err := createAggregatorServer(aggregatorConfig, kubeAPIServer.GenericAPIServer, apiExtensionsServer.Informers)    if err != nil {        return nil, err    }    // 7. 判断是否启动非安全端口的 http server    if insecureServingInfo != nil {        insecureHandlerChain := kubeserver.BuildInsecureHandlerChain(aggregatorServer.GenericAPIServer.UnprotectedHandler(), kubeAPIServerConfig.GenericConfig)        if err := insecureServingInfo.Serve(insecureHandlerChain, kubeAPIServerConfig.GenericConfig.RequestTimeout, stopCh); err != nil {            return nil, err        }    }    return aggregatorServer, nil}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建过程主要有以下步骤：</p><ol><li>根据配置构造apiserver的配置，调用方法<code>CreateKubeAPIServerConfig</code></li><li>根据配置构造扩展的apiserver的配置，调用方法为<code>createAPIExtensionsConfig</code></li><li>创建server，包括扩展的apiserver和原生的apiserver，调用方法为<code>createAPIExtensionsServer</code>和<code>CreateKubeAPIServer</code>。主要就是将各个handler的路由方法注册到Container中去，完全遵循go-restful的设计模式，即将处理方法注册到Route中去，同一个根路径下的Route注册到WebService中去，WebService注册到Container中，Container负责分发。访问的过程为<code>Container--&gt;WebService--&gt;Route</code></li><li>聚合server的配置和和创建。主要就是将原生的apiserver和扩展的apiserver的访问进行整合，添加后续的一些处理接口。调用方法为<code>createAggregatorConfig</code>和<code>createAggregatorServer</code></li><li>创建完成，返回配置的server信息</li></ol><p>以上几个步骤，最核心的就是apiserver如何创建，即如何按照go-restful的模式，添加路由和相应的处理方法。</p><h3 id="配置初始化"><a href="#配置初始化" class="headerlink" title="配置初始化"></a>配置初始化</h3><p>先看apiserver配置的创建<code>CreateKubeAPIServerConfig-&gt;buildGenericConfig-&gt;genericapiserver.NewConfig</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// BuildGenericConfig takes the master server options and produces the genericapiserver.Config associated with it</span><span class="token keyword">func</span> <span class="token function">buildGenericConfig</span><span class="token punctuation">(</span>    s <span class="token operator">*</span>options<span class="token punctuation">.</span>ServerRunOptions<span class="token punctuation">,</span>    proxyTransport <span class="token operator">*</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>    genericConfig <span class="token operator">*</span>genericapiserver<span class="token punctuation">.</span>Config<span class="token punctuation">,</span>    versionedInformers clientgoinformers<span class="token punctuation">.</span>SharedInformerFactory<span class="token punctuation">,</span>    insecureServingInfo <span class="token operator">*</span>genericapiserver<span class="token punctuation">.</span>DeprecatedInsecureServingInfo<span class="token punctuation">,</span>    serviceResolver aggregatorapiserver<span class="token punctuation">.</span>ServiceResolver<span class="token punctuation">,</span>    pluginInitializers <span class="token punctuation">[</span><span class="token punctuation">]</span>admission<span class="token punctuation">.</span>PluginInitializer<span class="token punctuation">,</span>    admissionPostStartHook genericapiserver<span class="token punctuation">.</span>PostStartHookFunc<span class="token punctuation">,</span>    storageFactory <span class="token operator">*</span>serverstorage<span class="token punctuation">.</span>DefaultStorageFactory<span class="token punctuation">,</span>    lastErr <span class="token builtin">error</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建genericConfig,其中包括DefaultBuildHandlerChain，一系列认证授权的中间件</span>    genericConfig <span class="token operator">=</span> genericapiserver<span class="token punctuation">.</span><span class="token function">NewConfig</span><span class="token punctuation">(</span>legacyscheme<span class="token punctuation">.</span>Codecs<span class="token punctuation">)</span>    genericConfig<span class="token punctuation">.</span>MergedResourceConfig <span class="token operator">=</span> master<span class="token punctuation">.</span><span class="token function">DefaultAPIResourceConfigSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 初始化各种配置</span>    <span class="token keyword">if</span> lastErr <span class="token operator">=</span> s<span class="token punctuation">.</span>GenericServerRunOptions<span class="token punctuation">.</span><span class="token function">ApplyTo</span><span class="token punctuation">(</span>genericConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> lastErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ...</span>    genericConfig<span class="token punctuation">.</span>OpenAPIConfig <span class="token operator">=</span> genericapiserver<span class="token punctuation">.</span><span class="token function">DefaultOpenAPIConfig</span><span class="token punctuation">(</span>generatedopenapi<span class="token punctuation">.</span>GetOpenAPIDefinitions<span class="token punctuation">,</span> openapinamer<span class="token punctuation">.</span><span class="token function">NewDefinitionNamer</span><span class="token punctuation">(</span>legacyscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">,</span> extensionsapiserver<span class="token punctuation">.</span>Scheme<span class="token punctuation">,</span> aggregatorscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">)</span><span class="token punctuation">)</span>    genericConfig<span class="token punctuation">.</span>OpenAPIConfig<span class="token punctuation">.</span>Info<span class="token punctuation">.</span>Title <span class="token operator">=</span> <span class="token string">"Kubernetes"</span>    <span class="token comment" spellcheck="true">// 长连接请求</span>    genericConfig<span class="token punctuation">.</span>LongRunningFunc <span class="token operator">=</span> filters<span class="token punctuation">.</span><span class="token function">BasicLongRunningRequestCheck</span><span class="token punctuation">(</span>        sets<span class="token punctuation">.</span><span class="token function">NewString</span><span class="token punctuation">(</span><span class="token string">"watch"</span><span class="token punctuation">,</span> <span class="token string">"proxy"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        sets<span class="token punctuation">.</span><span class="token function">NewString</span><span class="token punctuation">(</span><span class="token string">"attach"</span><span class="token punctuation">,</span> <span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token string">"proxy"</span><span class="token punctuation">,</span> <span class="token string">"log"</span><span class="token punctuation">,</span> <span class="token string">"portforward"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    kubeVersion <span class="token operator">:=</span> version<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    genericConfig<span class="token punctuation">.</span>Version <span class="token operator">=</span> <span class="token operator">&amp;</span>kubeVersion    <span class="token comment" spellcheck="true">// 初始化storageFactory， 用来连接etcd</span>    storageFactoryConfig <span class="token operator">:=</span> kubeapiserver<span class="token punctuation">.</span><span class="token function">NewStorageFactoryConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    storageFactoryConfig<span class="token punctuation">.</span>APIResourceConfig <span class="token operator">=</span> genericConfig<span class="token punctuation">.</span>MergedResourceConfig    completedStorageFactoryConfig<span class="token punctuation">,</span> err <span class="token operator">:=</span> storageFactoryConfig<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Etcd<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        lastErr <span class="token operator">=</span> err        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    storageFactory<span class="token punctuation">,</span> lastErr <span class="token operator">=</span> completedStorageFactoryConfig<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> lastErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> genericConfig<span class="token punctuation">.</span>EgressSelector <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        storageFactory<span class="token punctuation">.</span>StorageConfig<span class="token punctuation">.</span>Transport<span class="token punctuation">.</span>EgressLookup <span class="token operator">=</span> genericConfig<span class="token punctuation">.</span>EgressSelector<span class="token punctuation">.</span>Lookup    <span class="token punctuation">}</span>    <span class="token keyword">if</span> lastErr <span class="token operator">=</span> s<span class="token punctuation">.</span>Etcd<span class="token punctuation">.</span><span class="token function">ApplyWithStorageFactoryTo</span><span class="token punctuation">(</span>storageFactory<span class="token punctuation">,</span> genericConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> lastErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Use protobufs for self-communication.</span>    <span class="token comment" spellcheck="true">// Since not every generic apiserver has to support protobufs, we</span>    <span class="token comment" spellcheck="true">// cannot default to it in generic apiserver and need to explicitly</span>    <span class="token comment" spellcheck="true">// set it in kube-apiserver.</span>    <span class="token comment" spellcheck="true">// 内部使用protobufs通信</span>    genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">.</span>ContentConfig<span class="token punctuation">.</span>ContentType <span class="token operator">=</span> <span class="token string">"application/vnd.kubernetes.protobuf"</span>    <span class="token comment" spellcheck="true">// Disable compression for self-communication, since we are going to be</span>    <span class="token comment" spellcheck="true">// on a fast local network</span>    genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">.</span>DisableCompression <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// clientset初始化</span>    kubeClientConfig <span class="token operator">:=</span> genericConfig<span class="token punctuation">.</span>LoopbackClientConfig    clientgoExternalClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> clientgoclientset<span class="token punctuation">.</span><span class="token function">NewForConfig</span><span class="token punctuation">(</span>kubeClientConfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        lastErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create real external clientset: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    versionedInformers <span class="token operator">=</span> clientgoinformers<span class="token punctuation">.</span><span class="token function">NewSharedInformerFactory</span><span class="token punctuation">(</span>clientgoExternalClient<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Minute<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 初始化认证实例，支持多种认证方式：requestheader,token, tls等</span>    genericConfig<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Authenticator<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>OpenAPIConfig<span class="token punctuation">.</span>SecurityDefinitions<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">BuildAuthenticator</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>EgressSelector<span class="token punctuation">,</span> clientgoExternalClient<span class="token punctuation">,</span> versionedInformers<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        lastErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"invalid authentication config: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化鉴权配置</span>    genericConfig<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>RuleResolver<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">BuildAuthorizer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>EgressSelector<span class="token punctuation">,</span> versionedInformers<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        lastErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"invalid authorization config: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token operator">!</span>sets<span class="token punctuation">.</span><span class="token function">NewString</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Modes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span>modes<span class="token punctuation">.</span>ModeRBAC<span class="token punctuation">)</span> <span class="token punctuation">{</span>        genericConfig<span class="token punctuation">.</span>DisabledPostStartHooks<span class="token punctuation">.</span><span class="token function">Insert</span><span class="token punctuation">(</span>rbacrest<span class="token punctuation">.</span>PostStartHookName<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化admission webhook的配置</span>    admissionConfig <span class="token operator">:=</span> <span class="token operator">&amp;</span>kubeapiserveradmission<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>        ExternalInformers<span class="token punctuation">:</span>    versionedInformers<span class="token punctuation">,</span>        LoopbackClientConfig<span class="token punctuation">:</span> genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">,</span>        CloudConfigFile<span class="token punctuation">:</span>      s<span class="token punctuation">.</span>CloudProvider<span class="token punctuation">.</span>CloudConfigFile<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    serviceResolver <span class="token operator">=</span> <span class="token function">buildServiceResolver</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>EnableAggregatorRouting<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">.</span>Host<span class="token punctuation">,</span> versionedInformers<span class="token punctuation">)</span>    authInfoResolverWrapper <span class="token operator">:=</span> webhook<span class="token punctuation">.</span><span class="token function">NewDefaultAuthenticationInfoResolverWrapper</span><span class="token punctuation">(</span>proxyTransport<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>EgressSelector<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">)</span>    lastErr <span class="token operator">=</span> s<span class="token punctuation">.</span>Audit<span class="token punctuation">.</span><span class="token function">ApplyTo</span><span class="token punctuation">(</span>        genericConfig<span class="token punctuation">,</span>        genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">,</span>        versionedInformers<span class="token punctuation">,</span>        serveroptions<span class="token punctuation">.</span><span class="token function">NewProcessInfo</span><span class="token punctuation">(</span><span class="token string">"kube-apiserver"</span><span class="token punctuation">,</span> <span class="token string">"kube-system"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token operator">&amp;</span>serveroptions<span class="token punctuation">.</span>WebhookOptions<span class="token punctuation">{</span>            AuthInfoResolverWrapper<span class="token punctuation">:</span> authInfoResolverWrapper<span class="token punctuation">,</span>            ServiceResolver<span class="token punctuation">:</span>         serviceResolver<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">if</span> lastErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 初始化注入插件</span>    pluginInitializers<span class="token punctuation">,</span> admissionPostStartHook<span class="token punctuation">,</span> err <span class="token operator">=</span> admissionConfig<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>proxyTransport<span class="token punctuation">,</span> genericConfig<span class="token punctuation">.</span>EgressSelector<span class="token punctuation">,</span> serviceResolver<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        lastErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to create admission plugin initializer: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    err <span class="token operator">=</span> s<span class="token punctuation">.</span>Admission<span class="token punctuation">.</span><span class="token function">ApplyTo</span><span class="token punctuation">(</span>        genericConfig<span class="token punctuation">,</span>        versionedInformers<span class="token punctuation">,</span>        kubeClientConfig<span class="token punctuation">,</span>        feature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">,</span>        pluginInitializers<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        lastErr <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to initialize admission: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>genericfeatures<span class="token punctuation">.</span>APIPriorityAndFairness<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span>GenericServerRunOptions<span class="token punctuation">.</span>EnablePriorityAndFairness <span class="token punctuation">{</span>        genericConfig<span class="token punctuation">.</span>FlowControl <span class="token operator">=</span> <span class="token function">BuildPriorityAndFairness</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> clientgoExternalClient<span class="token punctuation">,</span> versionedInformers<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="APIExtensionsServer初始化"><a href="#APIExtensionsServer初始化" class="headerlink" title="APIExtensionsServer初始化"></a>APIExtensionsServer初始化</h3><p><code>APIExtensionsServer</code>最先初始化，在调用链的末尾, 处理CR、CRD相关资源.</p><p>其中包含的 controller 以及功能如下所示：</p><ol><li>openapiController：将 crd 资源的变化同步至提供的 OpenAPI 文档，可通过访问 /openapi/v2 进行查看；</li><li>crdController：负责将 crd 信息注册到 apiVersions 和 apiResources 中，两者的信息可通过 $ kubectl api-versions 和 $ kubectl api-resources 查看；</li><li>namingController：检查 crd obj 中是否有命名冲突，可在 crd .status.conditions 中查看；</li><li>establishingController：检查 crd 是否处于正常状态，可在 crd .status.conditions 中查看；</li><li>nonStructuralSchemaController：检查 crd obj 结构是否正常，可在 crd .status.conditions 中查看；</li><li>apiApprovalController：检查 crd 是否遵循 kubernetes API 声明策略，可在 crd .status.conditions 中查看；</li><li>finalizingController：类似于 finalizes 的功能，与 CRs 的删除有关；</li></ol><p><code>createAPIExtensionsServer</code>调用<code>apiextensionsConfig.Complete().New(delegateAPIServer)</code></p><p><code>k8s.io/kubernetes/staging/src/k8s.io/apiextensions-apiserver/pkg/apiserver/apiserver.go:132</code></p><pre class="line-numbers language-golang"><code class="language-golang">/ New returns a new instance of CustomResourceDefinitions from the given config.func (c completedConfig) New(delegationTarget genericapiserver.DelegationTarget) (*CustomResourceDefinitions, error) {    // 初始化 genericServer    genericServer, err := c.GenericConfig.New("apiextensions-apiserver", delegationTarget)    if err != nil {        return nil, err    }    s := &CustomResourceDefinitions{        GenericAPIServer: genericServer,    }    // 初始化apigroup, 即需要暴露的api，这里extension apiserver只注册了cr于crd相关的    apiResourceConfig := c.GenericConfig.MergedResourceConfig    apiGroupInfo := genericapiserver.NewDefaultAPIGroupInfo(apiextensions.GroupName, Scheme, metav1.ParameterCodec, Codecs)    if apiResourceConfig.VersionEnabled(v1beta1.SchemeGroupVersion) {        storage := map[string]rest.Storage{}        // customresourcedefinitions        customResourceDefintionStorage := customresourcedefinition.NewREST(Scheme, c.GenericConfig.RESTOptionsGetter)        storage["customresourcedefinitions"] = customResourceDefintionStorage        storage["customresourcedefinitions/status"] = customresourcedefinition.NewStatusREST(Scheme, customResourceDefintionStorage)        apiGroupInfo.VersionedResourcesStorageMap[v1beta1.SchemeGroupVersion.Version] = storage    }    if apiResourceConfig.VersionEnabled(v1.SchemeGroupVersion) {        storage := map[string]rest.Storage{}        // customresourcedefinitions        customResourceDefintionStorage := customresourcedefinition.NewREST(Scheme, c.GenericConfig.RESTOptionsGetter)        storage["customresourcedefinitions"] = customResourceDefintionStorage        storage["customresourcedefinitions/status"] = customresourcedefinition.NewStatusREST(Scheme, customResourceDefintionStorage)        apiGroupInfo.VersionedResourcesStorageMap[v1.SchemeGroupVersion.Version] = storage    }    // 注册apigroup    if err := s.GenericAPIServer.InstallAPIGroup(&apiGroupInfo); err != nil {        return nil, err    }    // clientset创建    crdClient, err := clientset.NewForConfig(s.GenericAPIServer.LoopbackClientConfig)    if err != nil {        // it's really bad that this is leaking here, but until we can fix the test (which I'm pretty sure isn't even testing what it wants to test),        // we need to be able to move forward        return nil, fmt.Errorf("failed to create clientset: %v", err)    }    s.Informers = externalinformers.NewSharedInformerFactory(crdClient, 5*time.Minute)    // 创建各种handler    delegateHandler := delegationTarget.UnprotectedHandler()    if delegateHandler == nil {        delegateHandler = http.NotFoundHandler()    }    versionDiscoveryHandler := &versionDiscoveryHandler{        discovery: map[schema.GroupVersion]*discovery.APIVersionHandler{},        delegate:  delegateHandler,    }    groupDiscoveryHandler := &groupDiscoveryHandler{        discovery: map[string]*discovery.APIGroupHandler{},        delegate:  delegateHandler,    }    establishingController := establish.NewEstablishingController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())    crdHandler, err := NewCustomResourceDefinitionHandler(        versionDiscoveryHandler,        groupDiscoveryHandler,        s.Informers.Apiextensions().V1().CustomResourceDefinitions(),        delegateHandler,        c.ExtraConfig.CRDRESTOptionsGetter,        c.GenericConfig.AdmissionControl,        establishingController,        c.ExtraConfig.ServiceResolver,        c.ExtraConfig.AuthResolverWrapper,        c.ExtraConfig.MasterCount,        s.GenericAPIServer.Authorizer,        c.GenericConfig.RequestTimeout,        time.Duration(c.GenericConfig.MinRequestTimeout)*time.Second,        apiGroupInfo.StaticOpenAPISpec,        c.GenericConfig.MaxRequestBodyBytes,    )    if err != nil {        return nil, err    }    s.GenericAPIServer.Handler.NonGoRestfulMux.Handle("/apis", crdHandler)    s.GenericAPIServer.Handler.NonGoRestfulMux.HandlePrefix("/apis/", crdHandler)    discoveryController := NewDiscoveryController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), versionDiscoveryHandler, groupDiscoveryHandler)    namingController := status.NewNamingConditionController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())    nonStructuralSchemaController := nonstructuralschema.NewConditionController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())    apiApprovalController := apiapproval.NewKubernetesAPIApprovalPolicyConformantConditionController(s.Informers.Apiextensions().V1().CustomResourceDefinitions(), crdClient.ApiextensionsV1())    finalizingController := finalizer.NewCRDFinalizer(        s.Informers.Apiextensions().V1().CustomResourceDefinitions(),        crdClient.ApiextensionsV1(),        crdHandler,    )    openapiController := openapicontroller.NewController(s.Informers.Apiextensions().V1().CustomResourceDefinitions())    // 加入到启动hook中    s.GenericAPIServer.AddPostStartHookOrDie("start-apiextensions-informers", func(context genericapiserver.PostStartHookContext) error {        s.Informers.Start(context.StopCh)        return nil    })    s.GenericAPIServer.AddPostStartHookOrDie("start-apiextensions-controllers", func(context genericapiserver.PostStartHookContext) error {        // OpenAPIVersionedService and StaticOpenAPISpec are populated in generic apiserver PrepareRun().        // Together they serve the /openapi/v2 endpoint on a generic apiserver. A generic apiserver may        // choose to not enable OpenAPI by having null openAPIConfig, and thus OpenAPIVersionedService        // and StaticOpenAPISpec are both null. In that case we don't run the CRD OpenAPI controller.        if s.GenericAPIServer.OpenAPIVersionedService != nil && s.GenericAPIServer.StaticOpenAPISpec != nil {            go openapiController.Run(s.GenericAPIServer.StaticOpenAPISpec, s.GenericAPIServer.OpenAPIVersionedService, context.StopCh)        }        go namingController.Run(context.StopCh)        go establishingController.Run(context.StopCh)        go nonStructuralSchemaController.Run(5, context.StopCh)        go apiApprovalController.Run(5, context.StopCh)        go finalizingController.Run(5, context.StopCh)        discoverySyncedCh := make(chan struct{})        go discoveryController.Run(context.StopCh, discoverySyncedCh)        select {        case <-context.StopCh:        case <-discoverySyncedCh:        }        return nil    })    // we don't want to report healthy until we can handle all CRDs that have already been registered.  Waiting for the informer    // to sync makes sure that the lister will be valid before we begin.  There may still be races for CRDs added after startup,    // but we won't go healthy until we can handle the ones already present.    s.GenericAPIServer.AddPostStartHookOrDie("crd-informer-synced", func(context genericapiserver.PostStartHookContext) error {        return wait.PollImmediateUntil(100*time.Millisecond, func() (bool, error) {            return s.Informers.Apiextensions().V1().CustomResourceDefinitions().Informer().HasSynced(), nil        }, context.StopCh)    })    return s, nil}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>c.GenericConfig.New</code>来初始化<code>genericapiserver</code>,包裹一些默认链，创建handler</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c completedConfig<span class="token punctuation">)</span> <span class="token function">New</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> delegationTarget DelegationTarget<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>GenericAPIServer<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>Serializer <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Genericapiserver.New() called with config.Serializer == nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>LoopbackClientConfig <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Genericapiserver.New() called with config.LoopbackClientConfig == nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>EquivalentResourceRegistry <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Genericapiserver.New() called with config.EquivalentResourceRegistry == nil"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 包裹了DefaultBuildHandlerChain</span>    handlerChainBuilder <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">BuildHandlerChainFunc</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Config<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建apiserverhandler</span>    apiServerHandler <span class="token operator">:=</span> <span class="token function">NewAPIServerHandler</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">,</span> handlerChainBuilder<span class="token punctuation">,</span> delegationTarget<span class="token punctuation">.</span><span class="token function">UnprotectedHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">...</span>    <span class="token keyword">return</span> s<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>APIServerHandler</code>包含多种<code>http.Handler</code>类型，包括<code>go-restful</code>以及<code>non-go-restful</code>，以及在以上两者之间选择的<code>Director</code>对象，<code>go-restful</code>用于处理已经注册的handler，<code>non-go-restful用来处理不存在的handler，API URI处理的选择过程为：</code>FullHandlerChain-&gt; Director -&gt;{GoRestfulContainer， NonGoRestfulMux}<code>。</code>NewAPIServerHandler`</p><pre><code>func NewAPIServerHandler(name string, s runtime.NegotiatedSerializer, handlerChainBuilder HandlerChainBuilderFn, notFoundHandler http.Handler) *APIServerHandler {    // non-go-restful路由    nonGoRestfulMux := mux.NewPathRecorderMux(name)    if notFoundHandler != nil {        nonGoRestfulMux.NotFoundHandler(notFoundHandler)    }    // go-resetful路由    gorestfulContainer := restful.NewContainer()    gorestfulContainer.ServeMux = http.NewServeMux()    gorestfulContainer.Router(restful.CurlyRouter{}) // e.g. for proxy/{kind}/{name}/{*}    gorestfulContainer.RecoverHandler(func(panicReason interface{}, httpWriter http.ResponseWriter) {        logStackOnRecover(s, panicReason, httpWriter)    })    gorestfulContainer.ServiceErrorHandler(func(serviceErr restful.ServiceError, request *restful.Request, response *restful.Response) {        serviceErrorHandler(s, serviceErr, request, response)    })    // 选择器, 根据path选择是否执行go-restful，注册过的path执行go-restful    director := director{        name:               name,        goRestfulContainer: gorestfulContainer,        nonGoRestfulMux:    nonGoRestfulMux,    }    return &amp;APIServerHandler{        FullHandlerChain:   handlerChainBuilder(director),        GoRestfulContainer: gorestfulContainer,        NonGoRestfulMux:    nonGoRestfulMux,        Director:           director,    }}</code></pre><p>以上是<code>APIExtensionsServer</code>的初始化流程，初始化Server, 调用<code>s.GenericAPIServer.InstallAPIGroup</code>注册api。此方法的调用链非常深，主要是为了将需要暴露的<code>API Resource</code>注册到 server 中，以便能通过 http 接口进行 resource 的 REST 操作，其他几种 server 在初始化时也都会执行对应的 <code>InstallAPI</code>方法。</p><h3 id="KubeAPIServer初始化"><a href="#KubeAPIServer初始化" class="headerlink" title="KubeAPIServer初始化"></a>KubeAPIServer初始化</h3><p>KubeAPIServer 主要是提供对 API Resource 的操作请求，为 kubernetes 中众多 API 注册路由信息，暴露 RESTful API 并且对外提供 kubernetes service，使集群中以及集群外的服务都可以通过 RESTful API 操作 kubernetes 中的资源。</p><p>与<code>APIExtensionsServer</code>，<code>KubeAPIServer</code>初始化流程如下</p><ol><li><code>CreateKubeAPIServer</code>调用<code>kubeAPIServerConfig.Complete().New</code>来初始化</li><li><code>New</code>函数创建默认的<code>apigroup</code>(pod,deployment等内部资源), 调用<code>InstallAPIs</code>注册</li><li>启动相关controller, 加入到<code>poststarthook</code></li></ol><h3 id="AggregatorServer初始化"><a href="#AggregatorServer初始化" class="headerlink" title="AggregatorServer初始化"></a>AggregatorServer初始化</h3><p><code>Aggregator</code>通过<code>APIServices</code>对象关联到某个<code>Service</code>来进行请求的转发，其关联的<code>Service</code>类型进一步决定了请求转发形式。<code>Aggregator</code>包括一个<code>GenericAPIServer</code>和维护自身状态的<code>Controller</code>。其中 <code>GenericAPIServer</code>主要处理<code>apiregistration.k8s.io</code>组下的<code>APIService</code>资源请求。</p><p><code>Aggregator</code>除了处理资源请求外还包含几个controller：</p><ol><li>apiserviceRegistrationController：负责<code>APIServices</code>中资源的注册与删除；</li><li>availableConditionController：维护<code>APIServices</code>的可用状态，包括其引用<code>Service</code>是否可用等；</li><li>autoRegistrationController：用于保持API中存在的一组特定的<code>APIServices</code>；</li><li>crdRegistrationController：负责将<code>CRD GroupVersions</code>自动注册到<code>APIServices</code>中；</li><li>openAPIAggregationController：将<code>APIServices</code>资源的变化同步至提供的<code>OpenAPI</code>文档；<br>kubernetes中的一些附加组件，比如metrics-server就是通过Aggregator的方式进行扩展的，实际环境中可以通过使用apiserver-builder工具轻松以Aggregator的扩展方式创建自定义资源。</li></ol><p>初始化AggregatorServer的主要逻辑为：</p><ol><li>调用<code>aggregatorConfig.Complete().NewWithDelegate</code>创建<code>aggregatorServer</code></li><li>初始化<code>crdRegistrationController</code>和<code>autoRegistrationController</code>，<code>crdRegistrationController</code>负责注册CRD，<code>autoRegistrationController</code>负责将 CRD 对应的 APIServices自动注册到apiserver中，CRD 创建后可通过<code>$ kubectl get apiservices</code>查看是否注册到 apiservices中</li><li>将<code>autoRegistrationController</code>和<code>crdRegistrationController</code>加入到PostStartHook中</li></ol><p>首先，初始化配置<code>createAggregatorConfig</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">createAggregatorConfig</span><span class="token punctuation">(</span>    kubeAPIServerConfig genericapiserver<span class="token punctuation">.</span>Config<span class="token punctuation">,</span>    commandOptions <span class="token operator">*</span>options<span class="token punctuation">.</span>ServerRunOptions<span class="token punctuation">,</span>    externalInformers kubeexternalinformers<span class="token punctuation">.</span>SharedInformerFactory<span class="token punctuation">,</span>    serviceResolver aggregatorapiserver<span class="token punctuation">.</span>ServiceResolver<span class="token punctuation">,</span>    proxyTransport <span class="token operator">*</span>http<span class="token punctuation">.</span>Transport<span class="token punctuation">,</span>    pluginInitializers <span class="token punctuation">[</span><span class="token punctuation">]</span>admission<span class="token punctuation">.</span>PluginInitializer<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>aggregatorapiserver<span class="token punctuation">.</span>Config<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// make a shallow copy to let us twiddle a few things</span>    <span class="token comment" spellcheck="true">// most of the config actually remains the same.  We only need to mess with a couple items related to the particulars of the aggregator</span>    genericConfig <span class="token operator">:=</span> kubeAPIServerConfig    genericConfig<span class="token punctuation">.</span>PostStartHooks <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>genericapiserver<span class="token punctuation">.</span>PostStartHookConfigEntry<span class="token punctuation">{</span><span class="token punctuation">}</span>    genericConfig<span class="token punctuation">.</span>RESTOptionsGetter <span class="token operator">=</span> <span class="token boolean">nil</span>    <span class="token comment" spellcheck="true">// override genericConfig.AdmissionControl with kube-aggregator's scheme,</span>    <span class="token comment" spellcheck="true">// because aggregator apiserver should use its own scheme to convert its own resources.</span>    <span class="token comment" spellcheck="true">// 取消admission的配置，aggregator自行处理请求，不需要admissions</span>    err <span class="token operator">:=</span> commandOptions<span class="token punctuation">.</span>Admission<span class="token punctuation">.</span><span class="token function">ApplyTo</span><span class="token punctuation">(</span>        <span class="token operator">&amp;</span>genericConfig<span class="token punctuation">,</span>        externalInformers<span class="token punctuation">,</span>        genericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">,</span>        feature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">,</span>        pluginInitializers<span class="token operator">...</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// copy the etcd options so we don't mutate originals.</span>    etcdOptions <span class="token operator">:=</span> <span class="token operator">*</span>commandOptions<span class="token punctuation">.</span>Etcd    etcdOptions<span class="token punctuation">.</span>StorageConfig<span class="token punctuation">.</span>Paging <span class="token operator">=</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>APIListChunking<span class="token punctuation">)</span>    etcdOptions<span class="token punctuation">.</span>StorageConfig<span class="token punctuation">.</span>Codec <span class="token operator">=</span> aggregatorscheme<span class="token punctuation">.</span>Codecs<span class="token punctuation">.</span><span class="token function">LegacyCodec</span><span class="token punctuation">(</span>v1beta1<span class="token punctuation">.</span>SchemeGroupVersion<span class="token punctuation">,</span> v1<span class="token punctuation">.</span>SchemeGroupVersion<span class="token punctuation">)</span>    etcdOptions<span class="token punctuation">.</span>StorageConfig<span class="token punctuation">.</span>EncodeVersioner <span class="token operator">=</span> runtime<span class="token punctuation">.</span><span class="token function">NewMultiGroupVersioner</span><span class="token punctuation">(</span>v1beta1<span class="token punctuation">.</span>SchemeGroupVersion<span class="token punctuation">,</span> schema<span class="token punctuation">.</span>GroupKind<span class="token punctuation">{</span>Group<span class="token punctuation">:</span> v1beta1<span class="token punctuation">.</span>GroupName<span class="token punctuation">}</span><span class="token punctuation">)</span>    genericConfig<span class="token punctuation">.</span>RESTOptionsGetter <span class="token operator">=</span> <span class="token operator">&amp;</span>genericoptions<span class="token punctuation">.</span>SimpleRestOptionsFactory<span class="token punctuation">{</span>Options<span class="token punctuation">:</span> etcdOptions<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// override MergedResourceConfig with aggregator defaults and registry</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> commandOptions<span class="token punctuation">.</span>APIEnablement<span class="token punctuation">.</span><span class="token function">ApplyTo</span><span class="token punctuation">(</span>        <span class="token operator">&amp;</span>genericConfig<span class="token punctuation">,</span>        aggregatorapiserver<span class="token punctuation">.</span><span class="token function">DefaultAPIResourceConfigSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        aggregatorscheme<span class="token punctuation">.</span>Scheme<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置proxy证书，用于apiserver与扩展服务的通信，使用requestheader证书签发</span>    <span class="token keyword">var</span> certBytes<span class="token punctuation">,</span> keyBytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>commandOptions<span class="token punctuation">.</span>ProxyClientCertFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>commandOptions<span class="token punctuation">.</span>ProxyClientKeyFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        certBytes<span class="token punctuation">,</span> err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>commandOptions<span class="token punctuation">.</span>ProxyClientCertFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        keyBytes<span class="token punctuation">,</span> err <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>commandOptions<span class="token punctuation">.</span>ProxyClientKeyFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    aggregatorConfig <span class="token operator">:=</span> <span class="token operator">&amp;</span>aggregatorapiserver<span class="token punctuation">.</span>Config<span class="token punctuation">{</span>        GenericConfig<span class="token punctuation">:</span> <span class="token operator">&amp;</span>genericapiserver<span class="token punctuation">.</span>RecommendedConfig<span class="token punctuation">{</span>            Config<span class="token punctuation">:</span>                genericConfig<span class="token punctuation">,</span>            SharedInformerFactory<span class="token punctuation">:</span> externalInformers<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        ExtraConfig<span class="token punctuation">:</span> aggregatorapiserver<span class="token punctuation">.</span>ExtraConfig<span class="token punctuation">{</span>            ProxyClientCert<span class="token punctuation">:</span> certBytes<span class="token punctuation">,</span>            ProxyClientKey<span class="token punctuation">:</span>  keyBytes<span class="token punctuation">,</span>            ServiceResolver<span class="token punctuation">:</span> serviceResolver<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 代理请求的具体实现</span>            ProxyTransport<span class="token punctuation">:</span>  proxyTransport<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// we need to clear the poststarthooks so we don't add them multiple times to all the servers (that fails)</span>    <span class="token comment" spellcheck="true">// 加入PostStartHook</span>    aggregatorConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>PostStartHooks <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>genericapiserver<span class="token punctuation">.</span>PostStartHookConfigEntry<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> aggregatorConfig<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>createAggregatorServer</code>初始化<code>Aggregator</code></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">createAggregatorServer</span><span class="token punctuation">(</span>aggregatorConfig <span class="token operator">*</span>aggregatorapiserver<span class="token punctuation">.</span>Config<span class="token punctuation">,</span> delegateAPIServer genericapiserver<span class="token punctuation">.</span>DelegationTarget<span class="token punctuation">,</span> apiExtensionInformers apiextensionsinformers<span class="token punctuation">.</span>SharedInformerFactory<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>aggregatorapiserver<span class="token punctuation">.</span>APIAggregator<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化配置，与前面流程相同</span>    aggregatorServer<span class="token punctuation">,</span> err <span class="token operator">:=</span> aggregatorConfig<span class="token punctuation">.</span><span class="token function">Complete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NewWithDelegate</span><span class="token punctuation">(</span>delegateAPIServer<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建auto-registration controller</span>    apiRegistrationClient<span class="token punctuation">,</span> err <span class="token operator">:=</span> apiregistrationclient<span class="token punctuation">.</span><span class="token function">NewForConfig</span><span class="token punctuation">(</span>aggregatorConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>LoopbackClientConfig<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    autoRegistrationController <span class="token operator">:=</span> autoregister<span class="token punctuation">.</span><span class="token function">NewAutoRegisterController</span><span class="token punctuation">(</span>aggregatorServer<span class="token punctuation">.</span>APIRegistrationInformers<span class="token punctuation">.</span><span class="token function">Apiregistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">APIServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> apiRegistrationClient<span class="token punctuation">)</span>    apiServices <span class="token operator">:=</span> <span class="token function">apiServicesToRegister</span><span class="token punctuation">(</span>delegateAPIServer<span class="token punctuation">,</span> autoRegistrationController<span class="token punctuation">)</span>    crdRegistrationController <span class="token operator">:=</span> crdregistration<span class="token punctuation">.</span><span class="token function">NewCRDRegistrationController</span><span class="token punctuation">(</span>        apiExtensionInformers<span class="token punctuation">.</span><span class="token function">Apiextensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">CustomResourceDefinitions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        autoRegistrationController<span class="token punctuation">)</span>    err <span class="token operator">=</span> aggregatorServer<span class="token punctuation">.</span>GenericAPIServer<span class="token punctuation">.</span><span class="token function">AddPostStartHook</span><span class="token punctuation">(</span><span class="token string">"kube-apiserver-autoregistration"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>context genericapiserver<span class="token punctuation">.</span>PostStartHookContext<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 启动controller</span>        <span class="token keyword">go</span> crdRegistrationController<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>StopCh<span class="token punctuation">)</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// let the CRD controller process the initial set of CRDs before starting the autoregistration controller.</span>            <span class="token comment" spellcheck="true">// this prevents the autoregistration controller's initial sync from deleting APIServices for CRDs that still exist.</span>            <span class="token comment" spellcheck="true">// we only need to do this if CRDs are enabled on this server.  We can't use discovery because we are the source for discovery.</span>            <span class="token keyword">if</span> aggregatorConfig<span class="token punctuation">.</span>GenericConfig<span class="token punctuation">.</span>MergedResourceConfig<span class="token punctuation">.</span><span class="token function">AnyVersionForGroupEnabled</span><span class="token punctuation">(</span><span class="token string">"apiextensions.k8s.io"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                crdRegistrationController<span class="token punctuation">.</span><span class="token function">WaitForInitialSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            autoRegistrationController<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>StopCh<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    err <span class="token operator">=</span> aggregatorServer<span class="token punctuation">.</span>GenericAPIServer<span class="token punctuation">.</span><span class="token function">AddBootSequenceHealthChecks</span><span class="token punctuation">(</span>        <span class="token function">makeAPIServiceAvailableHealthCheck</span><span class="token punctuation">(</span>            <span class="token string">"autoregister-completion"</span><span class="token punctuation">,</span>            apiServices<span class="token punctuation">,</span>            aggregatorServer<span class="token punctuation">.</span>APIRegistrationInformers<span class="token punctuation">.</span><span class="token function">Apiregistration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">V1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">APIServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> aggregatorServer<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，启动步骤以前分析完了，三个组件的流量大体时一样的，通过<code>Complete().New()</code>初始化配置，创建所需的controller, 调用<code>InstallAPIGroup</code>注册<code>apigroup</code>。</p><h2 id="请求分析"><a href="#请求分析" class="headerlink" title="请求分析"></a>请求分析</h2><p>上面我们分析了apiserver的调用链，大体如下<br><code>DefaultHandlerChain-&gt;{handler/crdhandler/proxy}-&gt;admission-&gt;validation-&gt;etcd</code></p><ol><li>请求进入时，会经过<code>defaultchain</code>做一些认证鉴权工作</li><li>然后通过<code>route</code>执行对应的handler，如果为aggration api, 将直接转发请求到对应service</li><li>handler处理完，经过admission与validation，做一些修改和检查，用户在这部分可以自定义webhook</li><li>最后存入etcd</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文大体对apiserver的启动流程，以及初始化过程做了分析，由于apiserver实现复杂，中间一些细节没涉及到，还需要对着代码研究研究。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://juejin.im/post/5c934e5a5188252d7c216981" target="_blank" rel="noopener">https://juejin.im/post/5c934e5a5188252d7c216981</a><br>[2] <a href="https://blog.tianfeiyu.com/2020/02/24/kube_apiserver/" target="_blank" rel="noopener">https://blog.tianfeiyu.com/2020/02/24/kube_apiserver/</a></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> apiserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kube-apiserver鉴权源码分析</title>
      <link href="/kube-apiserver-authorization-code/"/>
      <url>/kube-apiserver-authorization-code/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>kube-apiserver中与权限相关的主要有三种机制，即认证、鉴权和准入控制。上节讲到<a href="./kube-apiserver-authentication-code.md">认证流程</a>。</p><p>认证与授权很容易混淆：</p><ul><li>认证(Authentication), 负责检查你是谁，识别user</li><li>授权(Authorization), 你能做什么，是否允许User对资源的操作</li><li>审计(Audit), 负责记录操作信息，方便后续审查</li></ul><p>本文主要分析apiserver的rbac授权流程。</p><h2 id="认证流程分析"><a href="#认证流程分析" class="headerlink" title="认证流程分析"></a>认证流程分析</h2><p>权限相关代码从<code>k8s.io/apiserver/pkg/server/config.go</code>中<code>DefaultBuildHandlerChain</code>函数开始执行</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DefaultBuildHandlerChain</span><span class="token punctuation">(</span>apiHandler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> c <span class="token operator">*</span>Config<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    handler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthorization</span><span class="token punctuation">(</span>apiHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithMaxInFlightLimit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxMutatingRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithImpersonation</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAudit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    failedHandler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">Unauthorized</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Serializer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>SupportsBasicAuth<span class="token punctuation">)</span>    failedHandler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithFailedAuthenticationAudit</span><span class="token punctuation">(</span>failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthentication</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Authenticator<span class="token punctuation">,</span> failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithCORS</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>CorsAllowedOriginList<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithTimeoutForNonLongRunningRequests</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestTimeout<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithWaitGroup</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>HandlerChainWaitGroup<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithRequestInfo</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestInfoResolver<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithPanicRecovery</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>    <span class="token keyword">return</span> handler<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DefaultBuildHandlerChain</code>中包含了多种filter（如认证，链接数检验，RBAC权限检验等），授权步骤在<code>WithAuthorization</code>中，如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// WithAuthorizationCheck passes all authorized requests on to handler, and returns a forbidden error otherwise.</span><span class="token keyword">func</span> <span class="token function">WithAuthorization</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> a authorizer<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> s runtime<span class="token punctuation">.</span>NegotiatedSerializer<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 检查是否需要权限校验</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Authorization is disabled"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> handler    <span class="token punctuation">}</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ctx <span class="token operator">:=</span> req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 用作审计</span>        ae <span class="token operator">:=</span> request<span class="token punctuation">.</span><span class="token function">AuditEventFrom</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 获取Attribute, 通过reqeust获取到请求的user, resource, verb, 是否为namespace级别的等</span>        attributes<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetAuthorizerAttributes</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            responsewriters<span class="token punctuation">.</span><span class="token function">InternalError</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 执行认证流程</span>        authorized<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> err <span class="token operator">:=</span> a<span class="token punctuation">.</span><span class="token function">Authorize</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// an authorizer like RBAC could encounter evaluation errors and still allow the request, so authorizer decision is checked before error here.</span>        <span class="token keyword">if</span> authorized <span class="token operator">==</span> authorizer<span class="token punctuation">.</span>DecisionAllow <span class="token punctuation">{</span>            audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> decisionAnnotationKey<span class="token punctuation">,</span> decisionAllow<span class="token punctuation">)</span>            audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> reasonAnnotationKey<span class="token punctuation">,</span> reason<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 校验成功，记录信息，转到下一个handler</span>            handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> reasonAnnotationKey<span class="token punctuation">,</span> reasonError<span class="token punctuation">)</span>            responsewriters<span class="token punctuation">.</span><span class="token function">InternalError</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 校验失败返回403，注意认证失败返回的是401</span>        klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"Forbidden: %#v, Reason: %q"</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>RequestURI<span class="token punctuation">,</span> reason<span class="token punctuation">)</span>        audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> decisionAnnotationKey<span class="token punctuation">,</span> decisionForbid<span class="token punctuation">)</span>        audit<span class="token punctuation">.</span><span class="token function">LogAnnotation</span><span class="token punctuation">(</span>ae<span class="token punctuation">,</span> reasonAnnotationKey<span class="token punctuation">,</span> reason<span class="token punctuation">)</span>        responsewriters<span class="token punctuation">.</span><span class="token function">Forbidden</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> w<span class="token punctuation">,</span> req<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> s<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>授权流程比较清晰，从request获取请求信息，进行鉴权，成功进入后续handler，失败返回403。</p><p><code>Authorize</code>接口有多种实现，通过在apiserver配置<code>--authorization-mode</code>选择鉴权模式，包括：</p><ul><li>ABAC</li><li>RBAC</li><li>Node, 用于kubelet鉴权exec/logs等</li><li>AlwaysAllow</li><li>AlwaysDeny</li><li>Webhook， 用于扩展权限，用户可实现Webhook与其他权限系统集成</li></ul><p>如果选择<code>AlwaysAllow</code>,即不做鉴权, 开启后强制不允许匿名用户</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// ApplyAuthorization will conditionally modify the authentication options based on the authorization options</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>BuiltInAuthenticationOptions<span class="token punctuation">)</span> <span class="token function">ApplyAuthorization</span><span class="token punctuation">(</span>authorization <span class="token operator">*</span>BuiltInAuthorizationOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> o <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> authorization <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">||</span> o<span class="token punctuation">.</span>Anonymous <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// authorization ModeAlwaysAllow cannot be combined with AnonymousAuth.</span>    <span class="token comment" spellcheck="true">// in such a case the AnonymousAuth is stomped to false and you get a message</span>    <span class="token keyword">if</span> o<span class="token punctuation">.</span>Anonymous<span class="token punctuation">.</span>Allow <span class="token operator">&amp;&amp;</span> sets<span class="token punctuation">.</span><span class="token function">NewString</span><span class="token punctuation">(</span>authorization<span class="token punctuation">.</span>Modes<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Has</span><span class="token punctuation">(</span>authzmodes<span class="token punctuation">.</span>ModeAlwaysAllow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"AnonymousAuth is not allowed with the AlwaysAllow authorizer. Resetting AnonymousAuth to false. You should use a different authorizer"</span><span class="token punctuation">)</span>        o<span class="token punctuation">.</span>Anonymous<span class="token punctuation">.</span>Allow <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rbac鉴权"><a href="#rbac鉴权" class="headerlink" title="rbac鉴权"></a>rbac鉴权</h2><p>rbac是常用的鉴权方式，实现<code>Authorize</code>接口, 代码在<a href="https://github.com/kubernetes/kubernetes/blob/92eb072989eba22236d034b56cc2bf159dfb4915/plugin/pkg/auth/authorizer/rbac/rbac.go#L75" target="_blank" rel="noopener">rbac.go</a></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>RBACAuthorizer<span class="token punctuation">)</span> <span class="token function">Authorize</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> requestAttributes authorizer<span class="token punctuation">.</span>Attributes<span class="token punctuation">)</span> <span class="token punctuation">(</span>authorizer<span class="token punctuation">.</span>Decision<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ruleCheckingVisitor <span class="token operator">:=</span> <span class="token operator">&amp;</span>authorizingVisitor<span class="token punctuation">{</span>requestAttributes<span class="token punctuation">:</span> requestAttributes<span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用VisitRulesFor来检查是否用权限</span>    r<span class="token punctuation">.</span>authorizationRuleResolver<span class="token punctuation">.</span><span class="token function">VisitRulesFor</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ruleCheckingVisitor<span class="token punctuation">.</span>visit<span class="token punctuation">)</span>    <span class="token keyword">if</span> ruleCheckingVisitor<span class="token punctuation">.</span>allowed <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 成功直接返回</span>        <span class="token keyword">return</span> authorizer<span class="token punctuation">.</span>DecisionAllow<span class="token punctuation">,</span> ruleCheckingVisitor<span class="token punctuation">.</span>reason<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 失败，打印日志返回失败原因</span>    <span class="token comment" spellcheck="true">// Build a detailed log of the denial.</span>    <span class="token comment" spellcheck="true">// Make the whole block conditional so we don't do a lot of string-building we won't use.</span>    <span class="token keyword">if</span> klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> operation <span class="token builtin">string</span>        <span class="token keyword">if</span> requestAttributes<span class="token punctuation">.</span><span class="token function">IsResourceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            b <span class="token operator">:=</span> <span class="token operator">&amp;</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">{</span><span class="token punctuation">}</span>            b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">`"`</span><span class="token punctuation">)</span>            b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetVerb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">`" resource "`</span><span class="token punctuation">)</span>            b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetAPIGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">`.`</span><span class="token punctuation">)</span>                b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetAPIGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetSubresource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">`/`</span><span class="token punctuation">)</span>                b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetSubresource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">`"`</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>                b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">` named "`</span><span class="token punctuation">)</span>                b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>requestAttributes<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                b<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">`"`</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            operation <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            operation <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%q nonResourceURL %q"</span><span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetVerb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> scope <span class="token builtin">string</span>        <span class="token keyword">if</span> ns <span class="token operator">:=</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">len</span><span class="token punctuation">(</span>ns<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            scope <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"in namespace %q"</span><span class="token punctuation">,</span> ns<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            scope <span class="token operator">=</span> <span class="token string">"cluster-wide"</span>        <span class="token punctuation">}</span>        klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"RBAC DENY: user %q groups %q cannot %s %s"</span><span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestAttributes<span class="token punctuation">.</span><span class="token function">GetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetGroups</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> operation<span class="token punctuation">,</span> scope<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    reason <span class="token operator">:=</span> <span class="token string">""</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ruleCheckingVisitor<span class="token punctuation">.</span>errors<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"RBAC: %v"</span><span class="token punctuation">,</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>ruleCheckingVisitor<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> authorizer<span class="token punctuation">.</span>DecisionNoOpinion<span class="token punctuation">,</span> reason<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Authorize</code>调用了<code>VisitRulesFor</code>来处理具体鉴权操作, 代码在<a href="https://github.com/kubernetes/kubernetes/blob/81e9f21f832f88422f1ccf5b8aa90de7cf822132/pkg/registry/rbac/validation/rule.go#L178" target="_blank" rel="noopener">rule.go</a></p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>r <span class="token operator">*</span>DefaultRuleResolver<span class="token punctuation">)</span> <span class="token function">VisitRulesFor</span><span class="token punctuation">(</span>user user<span class="token punctuation">.</span>Info<span class="token punctuation">,</span> namespace <span class="token builtin">string</span><span class="token punctuation">,</span> visitor <span class="token keyword">func</span><span class="token punctuation">(</span>source fmt<span class="token punctuation">.</span>Stringer<span class="token punctuation">,</span> rule <span class="token operator">*</span>rbacv1<span class="token punctuation">.</span>PolicyRule<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取所有clusterrolebinding</span>    <span class="token keyword">if</span> clusterRoleBindings<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>clusterRoleBindingLister<span class="token punctuation">.</span><span class="token function">ListClusterRoleBindings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">visitor</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        sourceDescriber <span class="token operator">:=</span> <span class="token operator">&amp;</span>clusterRoleBindingDescriber<span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历clusterrolebing</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> clusterRoleBinding <span class="token operator">:=</span> <span class="token keyword">range</span> clusterRoleBindings <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 检查是否有对应的user</span>            subjectIndex<span class="token punctuation">,</span> applies <span class="token operator">:=</span> <span class="token function">appliesTo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> clusterRoleBinding<span class="token punctuation">.</span>Subjects<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">!</span>applies <span class="token punctuation">{</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 如果user存在于subject, 获取对应的rules即clusterrole</span>            rules<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">GetRoleReferenceRules</span><span class="token punctuation">(</span>clusterRoleBinding<span class="token punctuation">.</span>RoleRef<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">visitor</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>                <span class="token keyword">continue</span>            <span class="token punctuation">}</span>            sourceDescriber<span class="token punctuation">.</span>binding <span class="token operator">=</span> clusterRoleBinding            sourceDescriber<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token operator">&amp;</span>clusterRoleBinding<span class="token punctuation">.</span>Subjects<span class="token punctuation">[</span>subjectIndex<span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> rules <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用visitor判断是否需要进入下一步鉴权</span>                <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">visitor</span><span class="token punctuation">(</span>sourceDescriber<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// clusterrole遍历完还没有鉴权成功，接着遍历所在namespace的role，流程同上</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> roleBindings<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span>roleBindingLister<span class="token punctuation">.</span><span class="token function">ListRoleBindings</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">visitor</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            sourceDescriber <span class="token operator">:=</span> <span class="token operator">&amp;</span>roleBindingDescriber<span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> roleBinding <span class="token operator">:=</span> <span class="token keyword">range</span> roleBindings <span class="token punctuation">{</span>                subjectIndex<span class="token punctuation">,</span> applies <span class="token operator">:=</span> <span class="token function">appliesTo</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> roleBinding<span class="token punctuation">.</span>Subjects<span class="token punctuation">,</span> namespace<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token operator">!</span>applies <span class="token punctuation">{</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                rules<span class="token punctuation">,</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">GetRoleReferenceRules</span><span class="token punctuation">(</span>roleBinding<span class="token punctuation">.</span>RoleRef<span class="token punctuation">,</span> namespace<span class="token punctuation">)</span>                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">visitor</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span>                sourceDescriber<span class="token punctuation">.</span>binding <span class="token operator">=</span> roleBinding                sourceDescriber<span class="token punctuation">.</span>subject <span class="token operator">=</span> <span class="token operator">&amp;</span>roleBinding<span class="token punctuation">.</span>Subjects<span class="token punctuation">[</span>subjectIndex<span class="token punctuation">]</span>                <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token keyword">range</span> rules <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">visitor</span><span class="token punctuation">(</span>sourceDescriber<span class="token punctuation">,</span> <span class="token operator">&amp;</span>rules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>visit</code>函数, 用来判断是否认证成功，成功返回<code>false</code>, 不需要进行下一步鉴权</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>authorizingVisitor<span class="token punctuation">)</span> <span class="token function">visit</span><span class="token punctuation">(</span>source fmt<span class="token punctuation">.</span>Stringer<span class="token punctuation">,</span> rule <span class="token operator">*</span>rbacv1<span class="token punctuation">.</span>PolicyRule<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> rule <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token function">RuleAllows</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>requestAttributes<span class="token punctuation">,</span> rule<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// allowed用来表示是否认证成功</span>        v<span class="token punctuation">.</span>allowed <span class="token operator">=</span> <span class="token boolean">true</span>        v<span class="token punctuation">.</span>reason <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"RBAC: allowed by %s"</span><span class="token punctuation">,</span> source<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span>errors <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>errors<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>rbac的鉴权流程如下:</p><ol><li>通过<code>Request</code>获取<code>Attribute</code>包括用户，资源和对应的操作</li><li><code>Authorize</code>调用<code>VisitRulesFor</code>进行具体的鉴权</li><li>获取所有的ClusterRoleBindings，并对其进行遍历操作</li><li>根据请求User信息，判断该是否被绑定在该ClusterRoleBinding中</li><li>若在将通过函数<code>GetRoleReferenceRules()</code>获取绑定的Role所控制的访问的资源</li><li>将Role所控制的访问的资源，与从API请求中提取出的资源进行比对，若比对成功，即为API请求的调用者有权访问相关资源</li><li>遍历ClusterRoleBinding中，都没有获得鉴权成功的操作，将会判断提取出的信息中是否包括了namespace的信息，若包括了，将会获取该namespace下的所有RoleBindings，类似ClusterRoleBindings</li><li>若在遍历了所有CluterRoleBindings，及该namespace下的所有RoleBingdings之后，仍没有对资源比对成功，则可判断该API请求的调用者没有权限访问相关资源, 鉴权失败</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文结合RBAC分析了Kubernetes的鉴权流程，整体这部分比较代码清晰。RBAC是Kubernetes比较推荐的鉴权方式，了解完整个流程后，居然所有请求都会先遍历一遍ClusterRoleBindings，这样实现起来比较简单，但随着规模和用户的扩大，这部分是否会有性能问题，需不需要实现能够快速鉴权的方式。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> rbac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多端口服务的Ingress IP-hash问题</title>
      <link href="/ingress-ip-hash/"/>
      <url>/ingress-ip-hash/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>业务反馈使用Ingress的ip-hash, 同一个服务开启了http和websocket分别是两个端口, 但是配置ip-hash后, 同一个client的请求http和websocket不在同一个后端.</p><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><p>根据业务Ingress配置,配置如下实例:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/cors-allow-origin</span><span class="token punctuation">:</span> <span class="token string">'*'</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/enable-cors</span><span class="token punctuation">:</span> <span class="token string">"true"</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/proxy-body-size</span><span class="token punctuation">:</span> 200m    <span class="token key atrule">nginx.ingress.kubernetes.io/proxy-read-timeout</span><span class="token punctuation">:</span> <span class="token string">"300"</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/upstream-hash-by</span><span class="token punctuation">:</span> $binary_remote_addr  <span class="token key atrule">name</span><span class="token punctuation">:</span> hellogo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> hellogo.d.xiaomi.net    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> hellogo <span class="token comment" spellcheck="true">#http1, 8080</span>          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8080</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /8080      <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> hellogo <span class="token comment" spellcheck="true">#http2, 9090</span>          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">9090</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /9090      <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> hellogo <span class="token comment" spellcheck="true">#websocket, 8081</span>          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8081</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /ws<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建多个副本</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get po -l app<span class="token operator">=</span>hellogoNAME                       READY   STATUS    RESTARTS   AGEhellogo-699f997454-b5vs4   1/1     Running   0          66mhellogo-699f997454-hm924   1/1     Running   0          66mhellogo-699f997454-mfbqv   1/1     Running   0          66mhellogo-699f997454-qdrwn   1/1     Running   0          66mhellogo-699f997454-srh9b   1/1     Running   0          66mhellogo-699f997454-wlwfh   1/1     Running   0          66m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试http 8080端口, 请求到pod hellogo-699f997454-qdrwn</p><pre class="line-numbers language-bash"><code class="language-bash">$ curl http://hellogo.d.xiaomi.net/8080hello 8080<span class="token operator">!</span>host hellogo.d.xiaomi.netremoteaddr 10.46.23.1:15340realip 10.232.41.102<span class="token function">hostname</span> hellogo-699f997454-qdrwn $ curl http://hellogo.d.xiaomi.net/8080hello 8080<span class="token operator">!</span>host hellogo.d.xiaomi.netremoteaddr 10.46.23.1:15866realip 10.232.41.102<span class="token function">hostname</span> hellogo-699f997454-qdrwn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试http 8080端口, 请求到pod hellogo-699f997454-b5vs4</p><pre class="line-numbers language-bash"><code class="language-bash">$ curl http://hellogo.d.xiaomi.net/9090hello 9090<span class="token operator">!</span>host hellogo.d.xiaomi.netremoteaddr 10.38.200.195:23706realip 10.232.41.102<span class="token function">hostname</span> hellogo-699f997454-b5vs4$ curl http://hellogo.d.xiaomi.net/9090hello 9090<span class="token operator">!</span>host hellogo.d.xiaomi.netremoteaddr 10.38.200.195:23706realip 10.232.41.102<span class="token function">hostname</span> hellogo-699f997454-b5vs4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜想是由于获取的nginx server列表顺序不一致导致的, 但是看源码ip list是直接从endpoint获取的, 进入nginx-ingress查看</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl <span class="token function">exec</span> -it -n kube-system nginx-ingress-controller-m496n sh<span class="token comment" spellcheck="true"># dbg工具查看nginx后端列表</span>/etc/nginx $ /dbg backends list <span class="token operator">|</span> <span class="token function">grep</span> hellogodefault-hellogo-8080default-hellogo-8081default-hellogo-9090<span class="token comment" spellcheck="true"># 8080端口的列表</span>/etc/nginx $ /dbg backends get default-hellogo-8080<span class="token punctuation">{</span>  <span class="token string">"endpoints"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.12.107"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"8080"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.12.108"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"8080"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.12.109"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"8080"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.23.23"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"8080"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.23.25"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"8080"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.23.29"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"8080"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>,  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"default-hellogo-8080"</span>,  <span class="token string">"noServer"</span><span class="token keyword">:</span> false,  <span class="token string">"port"</span><span class="token keyword">:</span> 8080,  <span class="token punctuation">..</span>.<span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 9090端口的列表</span>/etc/nginx $ /dbg backends get default-hellogo-9090<span class="token punctuation">{</span>  <span class="token string">"endpoints"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.12.107"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"9090"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.12.108"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"9090"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.12.109"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"9090"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.23.23"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"9090"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.23.25"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"9090"</span>    <span class="token punctuation">}</span>,    <span class="token punctuation">{</span>      <span class="token string">"address"</span><span class="token keyword">:</span> <span class="token string">"10.46.23.29"</span>,      <span class="token string">"port"</span><span class="token keyword">:</span> <span class="token string">"9090"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span>,  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"default-hellogo-9090"</span>,  <span class="token string">"noServer"</span><span class="token keyword">:</span> false,  <span class="token string">"port"</span><span class="token keyword">:</span> 9090,  <span class="token punctuation">..</span>.<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比发现两个端口的列表是一样的,只能看看代码.</p><p>ip-hash代码在<a href="https://github.com/kubernetes/ingress-nginx/blob/master/rootfs/etc/nginx/lua/balancer/chash.lua" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx/blob/master/rootfs/etc/nginx/lua/balancer/chash.lua</a></p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">function</span> _M<span class="token punctuation">.</span><span class="token function">new</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> backend<span class="token punctuation">)</span>  <span class="token keyword">local</span> nodes <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">get_nodes</span><span class="token punctuation">(</span>backend<span class="token punctuation">.</span>endpoints<span class="token punctuation">)</span>  <span class="token keyword">local</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    instance <span class="token operator">=</span> self<span class="token punctuation">.</span>factory<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">--获取后端pod ip列表</span>    hash_by <span class="token operator">=</span> backend<span class="token punctuation">[</span><span class="token string">"upstreamHashByConfig"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"upstream-hash-by"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    traffic_shaping_policy <span class="token operator">=</span> backend<span class="token punctuation">.</span>trafficShapingPolicy<span class="token punctuation">,</span>    alternative_backends <span class="token operator">=</span> backend<span class="token punctuation">.</span>alternativeBackends<span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token function">setmetatable</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> self<span class="token punctuation">)</span>  self<span class="token punctuation">.</span>__index <span class="token operator">=</span> self  <span class="token keyword">return</span> o<span class="token keyword">end</span><span class="token keyword">function</span> _M<span class="token punctuation">.</span><span class="token function">balance</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>  <span class="token keyword">local</span> key <span class="token operator">=</span> util<span class="token punctuation">.</span><span class="token function">lua_ngx_var</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>hash_by<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--获取需要hash的变量</span>  <span class="token keyword">return</span> self<span class="token punctuation">.</span>instance<span class="token punctuation">:</span><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">--计算hash值</span><span class="token keyword">end</span><span class="token keyword">return</span> _M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键是在<code>get_nodes</code>函数,位于<a href="https://github.com/kubernetes/ingress-nginx/blob/master/rootfs/etc/nginx/lua/util.lua" target="_blank" rel="noopener">https://github.com/kubernetes/ingress-nginx/blob/master/rootfs/etc/nginx/lua/util.lua</a></p><pre class="line-numbers language-lua"><code class="language-lua"><span class="token keyword">function</span> _M<span class="token punctuation">.</span><span class="token function">get_nodes</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">)</span>  <span class="token keyword">local</span> nodes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">local</span> weight <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">--所有后端weight相同都为1</span>  <span class="token keyword">for</span> _<span class="token punctuation">,</span> endpoint <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">)</span> <span class="token keyword">do</span>    <span class="token keyword">local</span> endpoint_string <span class="token operator">=</span> endpoint<span class="token punctuation">.</span>address <span class="token operator">..</span> <span class="token string">":"</span> <span class="token operator">..</span> endpoint<span class="token punctuation">.</span>port <span class="token comment" spellcheck="true">--endpoint为ip+port</span>    nodes<span class="token punctuation">[</span>endpoint_string<span class="token punctuation">]</span> <span class="token operator">=</span> weight  <span class="token keyword">end</span>  <span class="token keyword">return</span> nodes<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过代码可以看到在<code>ingress-nginx</code>中,实际的后端(upstream)是包含端口的,通过hash计算得到的值也不一样。</p><h2 id="解决建议"><a href="#解决建议" class="headerlink" title="解决建议"></a>解决建议</h2><p>首先确认系统的架构是不是合理，不同的端口提供不同的服务，一般是相互独立的。<br>如果确实有类似需求：</p><ul><li>通过同一个端口提供服务，使用path来区分不同功能</li><li>修改代码，也比较简单</li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何做一个优雅的Pod</title>
      <link href="/pod-graceful-lifecycle/"/>
      <url>/pod-graceful-lifecycle/</url>
      
        <content type="html"><![CDATA[<p>没有人不想优雅的活着，在这喧闹的生活中过得优雅从容并不容易。但在k8s的世界中，如何做个优雅的Pod还是有套路可循的。</p><h2 id="Pod的生命周期"><a href="#Pod的生命周期" class="headerlink" title="Pod的生命周期"></a>Pod的生命周期</h2><p>在优雅之前，我们先谈谈Pod的一生，大体分为以下几个阶段</p><ol><li>创建，通过kubectl或者api创建pod, apiserver收到请求后存储到etcd</li><li>调度，scheduler检测到pod创建后，通过预选优选为pod选取合适的人家(node)</li><li>启动，kubelet检测到有pod调度到当前节点，开始启动pod</li><li>终止，不同的pod有不同的谢幕方式，有的正常运行结束没有restart就completed，有的被kill就入土为安了，有的被驱逐换种方式重新开始</li></ol><p>今天我们主要讨论3-4阶段，前面部分更多是deployment/daemonset这些pod的父母所决定的。</p><h2 id="优雅的启动"><a href="#优雅的启动" class="headerlink" title="优雅的启动"></a>优雅的启动</h2><h3 id="init-container"><a href="#init-container" class="headerlink" title="init container"></a>init container</h3><p>通常pod有一些初始化操作，创建文件夹，初始化磁盘，检查某些依赖服务是不是正常，这些操作放在代码中会污染代码，写在启动命令中不方便管理，出问题也不方便排查，更优雅的方式是使用k8s的[init container][1]。</p><p><strong>理解 Init 容器</strong><br>Pod 可以包含多个容器，应用运行在这些容器里面，同时 Pod 也可以有一个或多个先于应用容器启动的 Init 容器。</p><p>Init 容器与普通的容器非常像，除了如下两点：</p><ul><li>它们总是运行到完成。</li><li>每个都必须在下一个启动之前成功完成。<br>如果 Pod 的 Init 容器失败，Kubernetes 会不断地重启该 Pod，直到 Init 容器成功为止。然而，如果 Pod 对应的 restartPolicy 值为 Never，它不会重新启动。</li></ul><p>如果为一个 Pod 指定了多个 Init 容器，这些容器会按顺序逐个运行。每个 Init 容器必须运行成功，下一个才能够运行。当所有的 Init 容器运行完成时，Kubernetes 才会为 Pod 初始化应用容器并像平常一样运行。</p><p><strong>Init 容器能做什么？</strong><br>因为 Init 容器具有与应用容器分离的单独镜像，其启动相关代码具有如下优势：</p><ul><li>Init 容器可以包含一些安装过程中应用容器中不存在的实用工具或个性化代码。例如，没有必要仅为了在安装过程中使用类似 sed、 awk、 python 或 dig 这样的工具而去FROM 一个镜像来生成一个新的镜像。</li><li>Init 容器可以安全地运行这些工具，避免这些工具导致应用镜像的安全性降低。<br>应用镜像的创建者和部署者可以各自独立工作，而没有必要联合构建一个单独的应用镜像。<br>Init 容器能以不同于Pod内应用容器的文件系统视图运行。因此，Init容器可具有访问 Secrets 的权限，而应用容器不能够访问。</li><li>由于 Init 容器必须在应用容器启动之前运行完成，因此 Init 容器提供了一种机制来阻塞或延迟应用容器的启动，直到满足了一组先决条件。一旦前置条件满足，Pod内的所有的应用容器会并行启动。</li></ul><p><strong>示例</strong><br>下面的例子定义了一个具有 2 个 Init 容器的简单 Pod。 第一个等待 myservice 启动，第二个等待 mydb 启动。 一旦这两个 Init容器 都启动完成，Pod 将启动spec区域中的应用容器。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>pod  <span class="token key atrule">labels</span><span class="token punctuation">:</span>    <span class="token key atrule">app</span><span class="token punctuation">:</span> myapp<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> myapp<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.28</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'echo The app is running! &amp;&amp; sleep 3600'</span><span class="token punctuation">]</span>  <span class="token key atrule">initContainers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>myservice    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.28</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">"until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"</span><span class="token punctuation">]</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> init<span class="token punctuation">-</span>mydb    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span><span class="token number">1.28</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">"until nslookup mydb.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for mydb; sleep 2; done"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="readinessProbe"><a href="#readinessProbe" class="headerlink" title="readinessProbe"></a>readinessProbe</h3><p>pod启动后，如果直接加入endpoint，有可能服务还没初始化完成，端口没有就绪，这时候接收流量肯定无法正常处理。如果能判断pod是否ready就好了，当当当，readiness来了，可以通过http，tcp以及执行命令的方式来检查服务情况，检查成功后再将pod状态设置为ready,ready后才会加入到endpoint中。</p><p>下为一个readiness探测，5秒执行一次命令，执行成功则pod变为ready</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">readinessProbe</span><span class="token punctuation">:</span>  <span class="token key atrule">exec</span><span class="token punctuation">:</span>    <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> cat    <span class="token punctuation">-</span> /tmp/healthy  <span class="token key atrule">initialDelaySeconds</span><span class="token punctuation">:</span> <span class="token number">5</span>  <span class="token key atrule">periodSeconds</span><span class="token punctuation">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong></p><ul><li>http, tcp探针是kubelet执行的，所以无法探测容器中localhost的端口，也无法解析service</li><li>exec则在容器内执行的</li></ul></blockquote><h3 id="ReadinessGates"><a href="#ReadinessGates" class="headerlink" title="ReadinessGates"></a>ReadinessGates</h3><p>ReadinessProbe机制可能无法满足某些复杂应用对容器内服务可用状态的判断，所以kubernetes从1.11版本开始引入了<code>Pod Ready++</code>特性对Readiness探测机制进行扩展，在1.14版本时达到GA稳定版本，称其为<code>Pod Readiness Gates</code>。</p><p>通过Pod Readiness Gates机制，用户可以将自定义的ReadinessProbe探测方式设置在Pod上，辅助kubernetes设置Pod何时达到服务可用状态Ready，为了使自定义的ReadinessProbe生效，用户需要提供一个外部的控制器Controller来设置相应的Condition状态。Pod的Readiness Gates在pod定义中的ReadinessGates字段进行设置，</p><p>如下示例设置了一个类型为<code>www.example.com/feature-1</code>的新Readiness Gates：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">Kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">readinessGates</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">conditionType</span><span class="token punctuation">:</span> <span class="token string">"www.example.com/feature-1"</span><span class="token key atrule">status</span><span class="token punctuation">:</span>  <span class="token key atrule">conditions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> Ready  <span class="token comment" spellcheck="true"># kubernetes系统内置的名为Ready的Condition</span>      <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">"True"</span>      <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>      <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token datetime number">2018-01-01T00:00:00Z</span>    <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"www.example.com/feature-1"</span>   <span class="token comment" spellcheck="true"># 用户定义的Condition</span>      <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">"False"</span>      <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token null important">null</span>      <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token datetime number">2018-01-01T00:00:00Z</span>  <span class="token key atrule">containerStatuses</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">containerID</span><span class="token punctuation">:</span> docker<span class="token punctuation">:</span>//abcd<span class="token punctuation">...</span>      <span class="token key atrule">ready</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新增的自定义Condition的状态status将由用户自定义的外部控制器设置，默认值为False，kubernetes将在判断全部readinessGates条件都为True时，才设置pod为服务可用状态（Ready或True）。</p><h3 id="poststart"><a href="#poststart" class="headerlink" title="poststart"></a>poststart</h3><p>另外也可以通过<code>poststart</code>设置hook操作，做一些额外工作。k8s在容器创建后立即发送 postStart 事件。然而，postStart 处理函数的调用不保证早于容器的入口点（entrypoint） 的执行。postStart 处理函数与容器的代码是异步执行的，但 Kubernetes 的容器管理逻辑会一直阻塞等待 postStart 处理函数执行完毕。只有 postStart 处理函数执行完毕，容器的状态才会变成<code>RUNNING</code>。</p><h2 id="优雅的运行"><a href="#优雅的运行" class="headerlink" title="优雅的运行"></a>优雅的运行</h2><h3 id="livenessProbe"><a href="#livenessProbe" class="headerlink" title="livenessProbe"></a>livenessProbe</h3><p>同readinessProbe探针，livenessProbe是用来检查pod运行状态是否正常，如果探测失败，pod被kill掉，重启启动pod。</p><h3 id="restartpolicy"><a href="#restartpolicy" class="headerlink" title="restartpolicy"></a>restartpolicy</h3><p>如果pod运行时意外退出(程序故障)，kubelet会根据restart policy来判断是否重启pod，可能的值为 Always、OnFailure 和 Never。默认为 Always，如果容器退出会再再启动，pod启动次数加1。</p><h2 id="优雅的结束"><a href="#优雅的结束" class="headerlink" title="优雅的结束"></a>优雅的结束</h2><p>首先谈下pod的删除流程：</p><ol><li>用户发送命令删除 Pod，使用的是默认的宽限期（grace period 30秒）</li><li>apiserver中的 Pod 会随着宽限期规定的时间进行更新，过了这个时间 Pod 就会被认为已”dead”</li><li>当使用客户端命令查询 Pod 状态时，Pod 显示为 “Terminating”</li><li>（和第 3 步同步进行）当 Kubelet 看到 Pod 由于步骤 2 中设置的时间而被标记为 terminating 状态时，它就开始执行关闭 Pod 流程<ul><li>如果 Pod 定义了 preStop 钩子，就在 Pod 内部调用它。如果宽限期结束了，但是 preStop 钩子还在运行，那么就用小的（2 秒）扩展宽限期调用步骤 2。</li><li>给 Pod 内的进程发送 <code>TERM</code> 信号(即<code>kill</code>, <code>kill -15</code>)。请注意，并不是所有 Pod 中的容器都会同时收到 TERM 信号，如果它们关闭的顺序很重要，则每个容器可能都需要一个 preStop 钩子。</li></ul></li><li>（和第 3 步同步进行）从服务的<code>endpoint</code>列表中删除 Pod，Pod 也不再被视为副本控制器的运行状态的 Pod 集的一部分。因为负载均衡器（如服务代理）会将其从轮换中删除，所以缓慢关闭的 Pod 无法继续为流量提供服务。</li><li>当宽限期到期时，仍在 Pod 中运行的所有进程都会被<code>SIGKILL</code>(即<code>kill -9</code>)信号杀死。</li></ol><h3 id="捕捉SIGTERM"><a href="#捕捉SIGTERM" class="headerlink" title="捕捉SIGTERM"></a>捕捉SIGTERM</h3><p>如果pod没有捕捉<code>SIGTERM</code>信号就直接退出，有些请求还没处理完，这势必影响服务质量，所以需要优雅退出，很多库都提供了类似的功能，当接受到退出信号时，清理空闲链接，等待当前请求处理完后再退出。如果善后工作较长，比较适当增加<code>terminationGracePeriodSeconds</code>的时间。</p><h3 id="prestop"><a href="#prestop" class="headerlink" title="prestop"></a>prestop</h3><p>另外也可以通过<code>prestop</code>设置hook操作，做一些额外的清理工作，</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle<span class="token punctuation">-</span>demo<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> lifecycle<span class="token punctuation">-</span>demo<span class="token punctuation">-</span>container    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx    <span class="token key atrule">lifecycle</span><span class="token punctuation">:</span>      <span class="token key atrule">preStop</span><span class="token punctuation">:</span>        <span class="token key atrule">exec</span><span class="token punctuation">:</span>          <span class="token key atrule">command</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span><span class="token string">"nginx -s quit; while killall -0 nginx; do sleep 1; done"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令 preStop 负责优雅地终止 nginx 服务。当因为失效而导致容器终止时，这一处理方式很有用。</p><blockquote><p><strong>注</strong><br>  Kubernetes 只有在 Pod 结束（Terminated） 的时候才会发送 preStop 事件，这意味着在 Pod 完成（Completed） 时 preStop 的事件处理逻辑不会被触发。</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优雅就不要怕麻烦，来我们总结下优雅的秘诀：</p><ol><li>需要初始化的操作使用initcontainer来做</li><li>就绪检查，探活检查少不了,必要时也可以配置ReadinessGates</li><li>优雅退出要处理<code>SIGTERM</code></li><li>需要时也可以设置下poststart, prestop</li><li>其他的，设置limit/reqeust也是必须的</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>[1] <a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/concepts/workloads/pods/init-containers/</a><br>[2] <a href="https://kubernetes.io/zh/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/</a></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx ingress controller 最后的倔强: admission webhook</title>
      <link href="/ingress-nginx-controller-admission-webhook/"/>
      <url>/ingress-nginx-controller-admission-webhook/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>k8s中大多使用nginx-ingress-controller来实现ingress, 但是脆弱的nginx-controller通过ingress解析出nginx配置, 对于某些annotation会reload nignx配置失败, 然后controller就卡死了, 不断重启, 除非删除对应的ingress.</p><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>创建有问题的<code>ingress</code></p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream</span><span class="token punctuation">:</span> <span class="token string">"false"</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/auth-tls-verify-client</span><span class="token punctuation">:</span> optional    <span class="token key atrule">nginx.ingress.kubernetes.io/auth-tls-verify-depth</span><span class="token punctuation">:</span> <span class="token string">"1"</span>    <span class="token key atrule">nginx.ingress.kubernetes.io/configuration-snippet</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">      proxy_set_header Host $targethost;      proxy_buffering     off;      proxy_pass          http://$targetbackend;      proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;      proxy_redirect      off;      proxy_set_header    X-SSL-Client-Verify $ssl_client_verify;      proxy_set_header    X-SSL-Client-DN $ssl_client_s_dn;      proxy_set_header    X-Real-IP       $remote_addr;      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;</span>  <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2020-03-23T04:57:22Z"</span>  <span class="token key atrule">generation</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>ingress  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"57681168"</span>  <span class="token key atrule">selfLink</span><span class="token punctuation">:</span> /apis/extensions/v1beta1/namespaces/kube<span class="token punctuation">-</span>system/ingresses/example<span class="token punctuation">-</span>ingress  <span class="token key atrule">uid</span><span class="token punctuation">:</span> c7f66385<span class="token punctuation">-</span>6cc2<span class="token punctuation">-</span>11ea<span class="token punctuation">-</span>b6a8<span class="token punctuation">-</span>246e96d4b538<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">rules</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> example.com    <span class="token key atrule">http</span><span class="token punctuation">:</span>      <span class="token key atrule">paths</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span>          <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>svc          <span class="token key atrule">servicePort</span><span class="token punctuation">:</span> <span class="token number">8008</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /  <span class="token key atrule">tls</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">hosts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> example.com    <span class="token key atrule">secretName</span><span class="token punctuation">:</span> example<span class="token punctuation">-</span>tls<span class="token key atrule">status</span><span class="token punctuation">:</span>  <span class="token key atrule">loadBalancer</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>nginx-ingress-controller</code>状态全部为<code>CrashLoopBackOff</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kubectl get po -n kube-system -owide |grep ingress</span>nginx-ingress-controller-ftfbg                        1/2     CrashLoopBackOff   6          8m27snginx-ingress-controller-hp4pf                        1/2     CrashLoopBackOff   11         24m  nginx-ingress-controller-qlb4l                        1/2     CrashLoopBackOff   11         24m   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>nginx-ingress-controller</code>日志, 显示reload失败<code>&quot;proxy_pass&quot; directive is duplicate in /tmp/nginx-cfg911768424:822</code></p><pre class="line-numbers language-bash"><code class="language-bash">-------------------------------------------------------------------------------W0403 10:26:14.716246       1 queue.go:130<span class="token punctuation">]</span> requeuing kube-system/nginx-ingress-controller-4txfk, err -------------------------------------------------------------------------------Error: <span class="token keyword">exit</span> status 12020/04/03 10:26:14 <span class="token punctuation">[</span>notice<span class="token punctuation">]</span> 137<span class="token comment" spellcheck="true">#137: ModSecurity-nginx v1.0.0</span>2020/04/03 10:26:14 <span class="token punctuation">[</span>warn<span class="token punctuation">]</span> 137<span class="token comment" spellcheck="true">#137: duplicate value "error" in /tmp/nginx-cfg911768424:815</span>nginx: <span class="token punctuation">[</span>warn<span class="token punctuation">]</span> duplicate value <span class="token string">"error"</span> <span class="token keyword">in</span> /tmp/nginx-cfg911768424:8152020/04/03 10:26:14 <span class="token punctuation">[</span>warn<span class="token punctuation">]</span> 137<span class="token comment" spellcheck="true">#137: duplicate value "timeout" in /tmp/nginx-cfg911768424:815</span>nginx: <span class="token punctuation">[</span>warn<span class="token punctuation">]</span> duplicate value <span class="token string">"timeout"</span> <span class="token keyword">in</span> /tmp/nginx-cfg911768424:8152020/04/03 10:26:14 <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> 137<span class="token comment" spellcheck="true">#137: "proxy_pass" directive is duplicate in /tmp/nginx-cfg911768424:822</span>nginx: <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> <span class="token string">"proxy_pass"</span> directive is duplicate <span class="token keyword">in</span> /tmp/nginx-cfg911768424:822nginx: configuration <span class="token function">file</span> /tmp/nginx-cfg911768424 <span class="token function">test</span> failed-------------------------------------------------------------------------------W0403 10:26:16.998897       1 nginx_status.go:207<span class="token punctuation">]</span> unexpected error obtaining nginx status info: unexpected error scraping nginx status page: unexpected error scraping nginx <span class="token keyword">:</span> Get http://0.0.0.0:18080/nginx_status: dial tcp 0.0.0.0:18080: connect: connection refusedI0403 10:26:17.526801       1 main.go:167<span class="token punctuation">]</span> Received SIGTERM, shutting downI0403 10:26:17.526827       1 nginx.go:364<span class="token punctuation">]</span> Shutting down controller queuesI0403 10:26:17.526845       1 status.go:200<span class="token punctuation">]</span> updating status of Ingress rules <span class="token punctuation">(</span>remove<span class="token punctuation">)</span>I0403 10:26:17.537511       1 status.go:219<span class="token punctuation">]</span> removing address from ingress status <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>I0403 10:26:17.537593       1 nginx.go:372<span class="token punctuation">]</span> Stopping NGINX process2020/04/03 10:26:17 <span class="token punctuation">[</span>notice<span class="token punctuation">]</span> 141<span class="token comment" spellcheck="true">#141: signal process started</span>I0403 10:26:20.547669       1 nginx.go:385<span class="token punctuation">]</span> NGINX process has stoppedI0403 10:26:20.547692       1 main.go:175<span class="token punctuation">]</span> Handled quit, awaiting Pod deletionI0403 10:26:30.547824       1 main.go:178<span class="token punctuation">]</span> Exiting with 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>创建一个有问题的ingress, 会影响所有新创建的ingress规则, 又一个集群级别的Bug诞生了.那么有没有办法, 提前检验ingress配置, 有问题就不去reload. 那验证步骤肯定要在请求到达nginx-controller之前来做, 是不是想到了<a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/" target="_blank" rel="noopener">k8s-admission-webhook</a>, 可以在apiserver持久化对象前拦截请求, 去实现自定义的验证规则. 好在新版本的nginx-ingress-controller(v0.25.0+)已经实现了相关的功能, 只需开启对应配置就行.</p><h3 id="ApiServer配置"><a href="#ApiServer配置" class="headerlink" title="ApiServer配置"></a>ApiServer配置</h3><p>Apiserver开启webhook相关配置, 必须包含<code>MutatingAdmissionWebhook</code>与<code>ValidatingAdmissionWebhook</code></p><pre><code>--admission-control=MutatingAdmissionWebhook,ValidatingAdmissionWebhook</code></pre><h3 id="创建webhook相关配置"><a href="#创建webhook相关配置" class="headerlink" title="创建webhook相关配置"></a>创建webhook相关配置</h3><p>启用ValidatingAdmissionWebhook必须使用https, 需要配置对应证书</p><ul><li>手动生成:<pre class="line-numbers language-bash"><code class="language-bash">openssl req -x509 -newkey rsa:2048 -keyout certificate.pem -out key.pem -days 365 -nodes -subj <span class="token string">"/CN=ingress-validation-webhook.ingress-nginx.svc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>CertificateSigningRequest<br>通过k8s <code>CertificateSigningRequest</code>来创建(controller-manager需要开启<code>--cluster-signing-cert-file</code>与<code>--cluster-signing-key-file</code>)<br>可通过如下脚本创建, namespace与service替换成自己的</p><pre class="line-numbers language-bash"><code class="language-bash">SERVICE_NAME<span class="token operator">=</span>ingress-nginxNAMESPACE<span class="token operator">=</span>ingress-nginxTEMP_DIRECTORY<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>mktemp -d<span class="token variable">)</span></span><span class="token keyword">echo</span> <span class="token string">"creating certs in directory <span class="token variable">${TEMP_DIRECTORY}</span>"</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">>></span> <span class="token variable">${TEMP_DIRECTORY}</span>/csr.conf<span class="token punctuation">[</span>req<span class="token punctuation">]</span>req_extensions <span class="token operator">=</span> v3_reqdistinguished_name <span class="token operator">=</span> req_distinguished_name<span class="token punctuation">[</span>req_distinguished_name<span class="token punctuation">]</span><span class="token punctuation">[</span> v3_req <span class="token punctuation">]</span>basicConstraints <span class="token operator">=</span> CA:FALSEkeyUsage <span class="token operator">=</span> nonRepudiation, digitalSignature, keyEnciphermentextendedKeyUsage <span class="token operator">=</span> serverAuthsubjectAltName <span class="token operator">=</span> @alt_names<span class="token punctuation">[</span>alt_names<span class="token punctuation">]</span>DNS.1 <span class="token operator">=</span> <span class="token variable">${SERVICE_NAME}</span>DNS.2 <span class="token operator">=</span> <span class="token variable">${SERVICE_NAME}</span><span class="token keyword">.</span><span class="token variable">${NAMESPACE}</span>DNS.3 <span class="token operator">=</span> <span class="token variable">${SERVICE_NAME}</span><span class="token keyword">.</span><span class="token variable">${NAMESPACE}</span>.svcEOFopenssl genrsa -out <span class="token variable">${TEMP_DIRECTORY}</span>/server-key.pem 2048openssl req -new -key <span class="token variable">${TEMP_DIRECTORY}</span>/server-key.pem \    -subj <span class="token string">"/CN=<span class="token variable">${SERVICE_NAME}</span>.<span class="token variable">${NAMESPACE}</span>.svc"</span> \    -out <span class="token variable">${TEMP_DIRECTORY}</span>/server.csr \    -config <span class="token variable">${TEMP_DIRECTORY}</span>/csr.conf<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span>EOF <span class="token operator">|</span> kubectl create -f -apiVersion: certificates.k8s.io/v1beta1kind: CertificateSigningRequestmetadata:  name: <span class="token variable">${SERVICE_NAME}</span><span class="token keyword">.</span><span class="token variable">${NAMESPACE}</span>.svcspec:  request: <span class="token punctuation">$(</span>cat <span class="token variable">${TEMP_DIRECTORY}</span>/server.csr <span class="token operator">|</span> base64 <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">'\n'</span><span class="token punctuation">)</span>  usages:  - digital signature  - key encipherment  - server authEOFkubectl certificate approve <span class="token variable">${SERVICE_NAME}</span><span class="token keyword">.</span><span class="token variable">${NAMESPACE}</span>.svc<span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> 10<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    SERVER_CERT<span class="token operator">=</span><span class="token punctuation">$(</span>kubectl get csr <span class="token variable">${SERVICE_NAME}</span><span class="token keyword">.</span><span class="token variable">${NAMESPACE}</span>.svc -o jsonpath<span class="token operator">=</span><span class="token string">'{.status.certificate}'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${SERVER_CERT}</span> <span class="token operator">!=</span> <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">break</span>    <span class="token keyword">fi</span>    <span class="token function">sleep</span> 1<span class="token keyword">done</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">${SERVER_CERT}</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"ERROR: After approving csr <span class="token variable">${SERVICE_NAME}</span>.<span class="token variable">${NAMESPACE}</span>.svc, the signed certificate did not appear on the resource. Giving up after 10 attempts."</span> <span class="token operator">></span><span class="token operator">&amp;</span>2    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">echo</span> <span class="token variable">${SERVER_CERT}</span> <span class="token operator">|</span> openssl base64 -d -A -out <span class="token variable">${TEMP_DIRECTORY}</span>/server-cert.pemkubectl create secret generic ingress-nginx.svc \    --from-file<span class="token operator">=</span>key.pem<span class="token operator">=</span><span class="token variable">${TEMP_DIRECTORY}</span>/server-key.pem \    --from-file<span class="token operator">=</span>cert.pem<span class="token operator">=</span><span class="token variable">${TEMP_DIRECTORY}</span>/server-cert.pem \    -n <span class="token variable">${NAMESPACE}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="配置ingress-controller"><a href="#配置ingress-controller" class="headerlink" title="配置ingress controller"></a>配置ingress controller</h3><p>ingress controller需要启用如下参数, 挂载需要的tls证书</p><table><thead><tr><th>flag</th><th>description</th><th>example usage</th></tr></thead><tbody><tr><td><code>--validating-webhook</code></td><td>admission webhook的地址</td><td><code>:8080</code></td></tr><tr><td><code>--validating-webhook-certificate</code></td><td>webhook证书</td><td><code>/usr/local/certificates/validating-webhook.pem</code></td></tr><tr><td><code>--validating-webhook-key</code></td><td>webhook私钥</td><td><code>/usr/local/certificates/validating-webhook-key.pem</code></td></tr></tbody></table><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>更新后, 创建有问题的ingress则会拦截, 符合预期</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kubectl apply -f ing.yaml</span>Error from server: error when creating <span class="token string">"ing.yaml"</span><span class="token keyword">:</span> admission webhook <span class="token string">"validate.nginx.ingress.kubernetes.io"</span> denied the request: -------------------------------------------------------------------------------Error: <span class="token keyword">exit</span> status 12020/04/02 10:26:04 <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> 331<span class="token comment" spellcheck="true">#331: directive "proxy_pass" is not terminated by ";" in /tmp/nginx-cfg461116913:2165</span>nginx: <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> directive <span class="token string">"proxy_pass"</span> is not terminated by <span class="token string">";"</span> <span class="token keyword">in</span> /tmp/nginx-cfg461116913:2165nginx: configuration <span class="token function">file</span> /tmp/nginx-cfg461116913 <span class="token function">test</span> failed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/" target="_blank" rel="noopener">https://kubernetes.io/zh/docs/reference/access-authn-authz/extensible-admission-controllers/</a></li><li><a href="https://kubernetes.github.io/ingress-nginx/deploy/validating-webhook/" target="_blank" rel="noopener">https://kubernetes.github.io/ingress-nginx/deploy/validating-webhook/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> ingress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pod sandbox 创建失败</title>
      <link href="/pod-sandbox-recreated/"/>
      <url>/pod-sandbox-recreated/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天在k8s更新服务时,发现pod启动失败,报错<code>failed to start sandbox container</code>,如下所示:</p><pre class="line-numbers language-bash"><code class="language-bash">Events:  Type     Reason                  Age                     From                                           Message  ----     ------                  ----                    ----                                           -------  Normal   Scheduled               28m                     default-scheduler                              Successfully assigned kube-system/k8s-proxy-7wkt4 to tj1-staging-com-ocean007-201812.kscn  Warning  FailedCreatePodSandBox  28m <span class="token punctuation">(</span>x13 over 28m<span class="token punctuation">)</span>      kubelet, tj1-staging-com-ocean007-201812.kscn  Failed create pod sandbox: rpc error: code <span class="token operator">=</span> Unknown desc <span class="token operator">=</span> failed to start sandbox container <span class="token keyword">for</span> pod <span class="token string">"k8s-proxy-7wkt4"</span><span class="token keyword">:</span> Error response from daemon: OCI runtime create failed: container_linux.go:345: starting container process caused <span class="token string">"process_linux.go:297: getting the final child's pid from pipe caused \"EOF\""</span><span class="token keyword">:</span> unknown  Normal   SandboxChanged          3m19s <span class="token punctuation">(</span>x1364 over 28m<span class="token punctuation">)</span>  kubelet, tj1-staging-com-ocean007-201812.kscn  Pod sandbox changed, it will be killed and re-created.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>sandbox 创建失败只是表象,是宿主机其他异常导致的,一般是(cpu,diskio,mem)导致的.</p><p>首先,上节点看kubelet,docker有无异常,日志没有明显错误,通过<code>top</code>看到docker cpu占用非常高</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@tj1-staging-com-ocean007-201812 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># top</span><span class="token function">top</span> - 17:55:00 up 265 days,  3:41,  1 user,  load average: 10.71, 11.34, 10.76Tasks: 816 total,   5 running, 811 sleeping,   0 stopped,   0 zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: 24.0 us, 34.5 sy,  0.0 ni, 41.4 id,  0.0 wa,  0.0 hi,  0.1 si,  0.0 stKiB Mem <span class="token keyword">:</span> 65746380 total, 20407940 free, 11007040 used, 34331400 buff/cacheKiB Swap:        0 total,        0 free,        0 used. 49134416 avail Mem     PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                       115483 root      20   0 3965212 273188  34564 S 489.7  0.4 382260:40 dockerd                                                                                                                                      1367523 root      20   0   18376   2972   2716 R  66.9  0.0  20163:45 <span class="token function">bash</span>                                                                                                                                         1367487 root      20   0   11856   5616   4512 S  54.0  0.0  16748:26 containerd-shim                                                                                                                              3200169 root      20   0    1300      4      0 R  53.3  0.0  14913:49 sh                                                                                                                                           2429952 root      20   0    1300      4      0 S  49.3  0.0   9620:56 sh                                                                                                                                           3200130 root      20   0    9392   4756   3884 S  47.7  0.0  13417:30 containerd-shim                                                                                                                              3718475 root      20   0    1300      4      0 R  47.4  0.0   8600:20 sh                                                                                                                                           3718440 root      20   0   10736   5516   4512 S  42.1  0.0   7575:31 containerd-shim                                                                                                                              2429917 root      20   0   11856   5556   4512 S  40.1  0.0   8313:22 containerd-shim                                                                                                                              3205493 root      20   0 3775924 230996  66704 S  18.9  0.4   2559:07 kubelet                                                                                                                                            1 root      20   0  195240 157000   3932 S   7.9  0.2   1417:46 systemd                                                                                                                                          804 dbus      20   0   30308   6460   2464 S   1.7  0.0 462:18.84 dbus-daemon                                                                                                                                  1011737 root      20   0  277656 122788  18428 S   1.3  0.2 768:03.00 cadvisor                                                                                                                                      115508 root      20   0 7139200  32896  24288 S   1.0  0.1 662:25.27 containerd                                                                                                                                       806 root      20   0   24572   3060   2480 S   0.7  0.0 171:22.52 systemd-logind                                                                                                                                511080 root       0 -20 2751348  52552  15744 S   0.7  0.1 178:27.51 sagent                                                                                                                                       1102507 root      20   0   11792   7292   4512 S   0.7  0.0  23:36.37 containerd-shim                                                                                                                              1272223 root      20   0  164800   5296   3824 R   0.7  0.0   0:00.38 <span class="token function">top</span>                                                                                                                                          2866292 root      20   0 5045000 1.983g   3080 S   0.7  3.2 230:09.47 redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时, cpu system异常高.</p><pre class="line-numbers language-bash"><code class="language-bash">%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>: 24.0 us, 34.5 sy,  0.0 ni, 41.4 id,  0.0 wa,  0.0 hi,  0.1 si,  0.0 st<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照以前的经验,一般是由某些容器引起的,通过<code>top</code>看到个别<code>sh</code>进程占用cpu较高.</p><p>通过<code>ps</code>看到进程居然是个死循环</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@tj1-staging-com-ocean007-201812 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef |grep 1367523</span>root     1287628 1247781  0 17:55 pts/1    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto 1367523root     1367523 1367504 72 Feb28 ?        14-00:04:17 /bin/bash -c <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token keyword">echo</span> hello<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过<code>/proc/pid/cgroup</code>找到对应容器</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cat /proc/1367523/cgroup</span>11:freezer:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd10:devices:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd9:hugetlb:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd8:blkio:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd7:memory:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd6:perf_event:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd5:cpuset:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd4:pids:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd3:net_cls,net_prio:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd2:cpu,cpuacct:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd1:name<span class="token operator">=</span>systemd:/kubepods/besteffort/pod55d3adf2-67f7-11ea-93f2-246e968203b8/29842d5544b701dbb5ff647dba19bb4ebec821edc6ee1ffbd7aeee58fa5038fd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到对应容器</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> 29842d554<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清理完相关pod后,系统恢复正常</p><pre><code>top - 18:25:57 up 265 days,  4:12,  1 user,  load average: 1.05, 1.24, 4.02Tasks: 769 total,   1 running, 768 sleeping,   0 stopped,   0 zombie%Cpu(s):  1.7 us,  0.9 sy,  0.0 ni, 97.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem : 65746380 total, 22106960 free, 10759860 used, 32879560 buff/cacheKiB Swap:        0 total,        0 free,        0 used. 49401576 avail Mem     PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                      3205493 root      20   0 3775924 229844  66704 S   9.9  0.3   2563:18 kubelet                                                                                                                                       115483 root      20   0 3965468 249124  34564 S   7.9  0.4 382323:36 dockerd                                                                                                                                            1 root      20   0  195240 157000   3932 S   6.3  0.2   1419:48 systemd                                                                                                                                          804 dbus      20   0   30308   6460   2464 S   2.0  0.0 462:51.51 dbus-daemon                                                                                                                                  3085322 root      20   0 12.045g 1.578g  19028 S   1.3  2.5 767:51.19 java                                                                                                                                          115508 root      20   0 7139200  32264  24288 S   1.0  0.0 662:42.18 containerd                                                                                                                                    511080 root       0 -20 2751348  42116  15744 S   1.0  0.1 178:44.79 sagent                                                                                                                                       1011737 root      20   0  277656 111836  18428 S   1.0  0.2 768:49.01 cadvisor                                                                                                                                     1523167 root      20   0  164800   5436   4012 R   0.7  0.0   0:00.04 top                                                                                                                                          3199459 root      20   0 1554708  43668   9496 S   0.7  0.1  28:50.60 falcon-agent                                                                                                                                       7 root      20   0       0      0      0 S   0.3  0.0 619:07.64 rcu_sched                                                                                                                                        806 root      20   0   24572   3060   2480 S   0.3  0.0 171:33.69 systemd-logind                                                                                                                                 11921 root      20   0   94820  20480   5840 S   0.3  0.0   1402:42 consul                                                                                                                                        575838 root      20   0  411464  17092   7364 S   0.3  0.0  15:16.25 python                                                                                                                                        856593 root      20   0 1562392  37912   9612 S   0.3  0.1  21:34.23 falcon-agent                                                                                                                                  931957 33        20   0   90728   3392   1976 S   0.3  0.0   0:51.23 nginx                                                                                                                                        1212186 root      20   0       0      0      0 S   0.3  0.0   0:01.12 kworker/14:1                                                                                                                                 1726228 root      20   0    9392   4496   3808 S   0.3  0.0   0:00.67 containerd-shim                                                                                                                              1887128 root      20   0  273160   7932   3128 S   0.3  0.0  46:05.23 redis-server                                                                                                                                 2788111 root      20   0  273160   6300   3080 S   0.3  0.0  25:18.55 redis-server                                                                                                                                 3199297 root      20   0 1563160  44812   9624 S   0.3  0.1  31:13.73 falcon-agent     </code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>sandox创建失败的原因是各种各样的, 如[memory设置错误触发的异常][1],[dockerd异常][2].</p><p>针对此处问题是由于某些测试pod通过<code>while true; do echo hello; done</code>启动,死循环一直<code>echo hello</code>产生大量<code>read()</code>系统调用,所在cpu飙升.多个类似pod导致系统非常繁忙,无法正常处理其他请求.</p><p>此类问题不容易在pod创建时直接检测到,只能通过添加物理节点相关报警(dockerd cpu使用率, node cpu.sys使用率)及时发现问题.</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>[1] <a href="https://github.com/kubernetes/kubernetes/issues/56996" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/56996</a><br>[2] <a href="https://plugaru.org/2018/05/21/pod-sandbox-changed-it-will-be-killed-and-re-created/" target="_blank" rel="noopener">https://plugaru.org/2018/05/21/pod-sandbox-changed-it-will-be-killed-and-re-created/</a></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-matery主题美化以及zeit部署</title>
      <link href="/hexo-matery-beauty/"/>
      <url>/hexo-matery-beauty/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文主要介绍<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Metery主题</a>的安装使用，<a href="https://github.com/qingwave/hexo-theme-matery" target="_blank" rel="noopener">主题优化</a>内容包括</p><ul><li>添加404，诗词样式</li><li>配置提出，在hexo项目<code>_data/matery.yml</code>中配置主题样式，可覆盖<code>themes/matery/_config</code>配置</li><li>调整配色，去掉彩虹配置</li></ul><h2 id="部署到Zeit-io"><a href="#部署到Zeit-io" class="headerlink" title="部署到Zeit.io"></a>部署到Zeit.io</h2><p>Github Page在国内访问较慢，可以将服务部署到静态站<a href="https://zeit.io" target="_blank" rel="noopener">zeit.io</a>, 每月20G免费流量，并且能同步github项目。</p><ul><li>Github 账户登陆zeit.io，授予 zeit repo 的 read 权限</li><li>导入项目，zeit.io导入项目名称不能包含<code>.</code>，可将项目名称<code>username.github.io</code>修改为<code>username</code>导入，后面再改回<br>部署成功</li></ul><p>过一会自动部署成功，如<a href="https://qing.now.sh" target="_blank" rel="noopener">qinng.now.sh</a>可访问项目，项目的任何更新会触发重新部署。</p><p>也可通过zeit.io提供的DNS解析服务配置自己的域名，然后在百度站长里配置信息。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/" target="_blank" rel="noopener">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk</a>、<a href="https://imsun.github.io/gitment/" target="_blank" rel="noopener">Gitment</a>、<a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 和 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>、<a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能。</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/qingwave/hexo-theme-matery/zip/qinng" target="_blank" rel="noopener">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/qingwave/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更推荐使用<code>git submodule</code>方式，可获取主题更新</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> submodule add https://github.com/qingwave/hexo-theme-matery.git themes/matery<span class="token function">git</span> submodule update --init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://qinng.now.sh/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"有风自南"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"也无风雨也无晴"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://qingwave.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找   </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式  </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Musics        <span class="token key atrule">url</span><span class="token punctuation">:</span> /musics        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prism_plugin</span><span class="token punctuation">:</span>  <span class="token key atrule">mode</span><span class="token punctuation">:</span> <span class="token string">'preprocess'</span>    <span class="token comment" spellcheck="true"># realtime/preprocess</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> <span class="token string">'tomorrow'</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false    </span><span class="token comment" spellcheck="true"># default false</span>  <span class="token key atrule">custom_css</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink" target="_blank" rel="noopener">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置文章字数统计为 true.</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 设置站点文章总字数统计为 true.</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读时长.</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 阅读次数.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  <span class="token key atrule">customEmojis</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.socialLink.github)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.socialLink.github %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span> <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span> <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fab fa-github<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"五月雨变奏电音"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"AnimeVibe"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music1.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover1.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Take me hand"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"DAISHI DANCE,Cecile Corbel"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/medias/music/music2.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"/medias/music/cover2.png"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Shape of You"</span><span class="token punctuation">,</span>    <span class="token property">"artist"</span><span class="token operator">:</span> <span class="token string">"J.Fla"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music3.mp3"</span><span class="token punctuation">,</span>    <span class="token property">"cover"</span><span class="token operator">:</span> <span class="token string">"http://xxx.com/music-cover3.png"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 是否在首页显示音乐.</span><span class="token key atrule">music</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">showTitle</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">title</span><span class="token punctuation">:</span> 听听音乐  <span class="token key atrule">fixed</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否开启吸底模式</span>  <span class="token key atrule">autoplay</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 是否自动播放</span>  <span class="token key atrule">theme</span><span class="token punctuation">:</span> '<span class="token comment" spellcheck="true">#42b983'</span>  <span class="token key atrule">loop</span><span class="token punctuation">:</span> <span class="token string">'all'</span> <span class="token comment" spellcheck="true"># 音频循环播放, 可选值: 'all', 'one', 'none'</span>  <span class="token key atrule">order</span><span class="token punctuation">:</span> <span class="token string">'list'</span> <span class="token comment" spellcheck="true"># 音频循环顺序, 可选值: 'list', 'random'</span>  <span class="token key atrule">preload</span><span class="token punctuation">:</span> <span class="token string">'auto'</span> <span class="token comment" spellcheck="true"># 预加载，可选值: 'none', 'metadata', 'auto'</span>  <span class="token key atrule">volume</span><span class="token punctuation">:</span> <span class="token number">0.7 </span><span class="token comment" spellcheck="true"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span>  <span class="token key atrule">listFolded</span><span class="token punctuation">:</span> <span class="token boolean important">false </span><span class="token comment" spellcheck="true"># 列表默认折叠</span>  <span class="token key atrule">listMaxHeight</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 列表最大高度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> typora<span class="token punctuation">-</span>vue<span class="token punctuation">-</span>theme主题介绍<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-07 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 赵奇<span class="token key atrule">img</span><span class="token punctuation">:</span> /source/images/xxx.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /images/1.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Markdown<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Typora  <span class="token punctuation">-</span> Markdown<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="诗词样式"><a href="#诗词样式" class="headerlink" title="诗词样式"></a>诗词样式</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 糖<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> 记某人的大痘<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2020-02-02 14:36:59</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"poem"</span> <span class="token comment" spellcheck="true">#样式改为poem就行</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token string">"Qinng"</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 诗<span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">-</span> 杂记<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span><span class="token selector"><span class="token class">.bg-color</span> </span><span class="token punctuation">{</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right, <span class="token hexcode">#4cbf30</span> <span class="token number">0%</span>, <span class="token hexcode">#0f9d58</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> rainbow</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> rainbow</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 动态切换背景颜色. */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2+VSCode+Zsh打造Windows下Linux开发环境</title>
      <link href="/wsl2-vscode/"/>
      <url>/wsl2-vscode/</url>
      
        <content type="html"><![CDATA[<p>一直以来使用Ubuntu开发，前两天Ubuntu桌面环境崩了，一些工作软件在Ubuntu下很不好用，恰好WSL2(Windows Linux子系统)发布已经有一段日子，而且支持了Docker，上手看看可用性如何。</p><h2 id="配置WSL2"><a href="#配置WSL2" class="headerlink" title="配置WSL2"></a>配置WSL2</h2><h3 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h3><ul><li>Windows 10 Build 18917或更新版本</li><li>启用虚拟化</li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li>启用“虚拟机平台”可选组件，以管理员身份打开 PowerShell 并运行：<br><code>Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform</code></li><li>启用安装子系统<br><code>Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code><br>启用这些更改后，你需要重新启动计算机。</li><li>应用商店安装ubuntu，如<code>Ubuntu-18.04</code></li><li>使用命令行设置要由 WSL 2 支持的发行版，在 PowerShell 中运行：<br><code>wsl --set-version &lt;Distro&gt; 2</code></li></ul><h3 id="配置Ubuntu"><a href="#配置Ubuntu" class="headerlink" title="配置Ubuntu"></a>配置Ubuntu</h3><p>配置源，配置Sudo免密码，安装必要软件Python、Git、Docker等，终端美化可通过安装Zsh…</p><h2 id="安装VSCode-WSL插件"><a href="#安装VSCode-WSL插件" class="headerlink" title="安装VSCode WSL插件"></a>安装VSCode WSL插件</h2><p>VSCode已经支持了<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl" target="_blank" rel="noopener">WSL插件</a></p><p>最终界面如下：<br><img src="/img/blogImg/wsl-vscode.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以愉快的使用VSCode开发，目前也发现了几点小问题：</p><ul><li>Vscode Terminal改为WSL后，启动会有1-2秒延时</li><li>WSL2中的软件配置开机自启比较麻烦，网上有方案，我是通过快捷命令如启动 Docker <code>alias sds=&quot;sudo service docker start&quot;</code></li><li>WSL2本质是个虚拟机，网络方式和本地有一定差异，对我来说影响不大</li></ul><p>目前在家办公已两周，此方案感觉良好。</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s+gitlab实现cicd</title>
      <link href="/k8s-gitlab-cicd/"/>
      <url>/k8s-gitlab-cicd/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前Gitlab11已经支持了Kubernetes Runner, 任务可以跑在Pod中。本文介绍如何通过CICD接入Kubernetes，开始前需要以下必备条件：</p><ul><li>Kubernetes集群</li><li>配置Kubernetes Runner, 网上有很多教程，若是生产环境或是多租户k8s集群，建议通过yaml手动配置；默认通过helm安装权限比较大，而且配置不灵活</li></ul><h2 id="CI过程"><a href="#CI过程" class="headerlink" title="CI过程"></a>CI过程</h2><p>通常编译镜像有三种方式：</p><ul><li>docker in docker：与物理方式类似，需要权限多，性能较差</li><li>kaniko：镜像编译工具，性能好</li></ul><p>我们使用kaniko编译镜像，push到镜像仓库，过程如下：</p><ol><li>配置变量<br>配置镜像相关变量，仓库的账户密码，推送的镜像名称<code>CI_REGISTRY_IMAGE</code>等<br><img src="/img/blogImg/gitlab-ci.png" alt="gitlab-ci"></li><li>gitlab-ci配置如下<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">build</span><span class="token punctuation">:</span><span class="token key atrule">stage</span><span class="token punctuation">:</span> build<span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> gcr.io/kaniko<span class="token punctuation">-</span>project/executor<span class="token punctuation">:</span>debug <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> echo "<span class="token punctuation">{</span>\"auths\"<span class="token punctuation">:</span><span class="token punctuation">{</span>\"$CI_REGISTRY\"<span class="token punctuation">:</span><span class="token punctuation">{</span>\"username\"<span class="token punctuation">:</span>\"$CI_REGISTRY_USER\"<span class="token punctuation">,</span>\"password\"<span class="token punctuation">:</span>\"$CI_REGISTRY_PASSWORD\"<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>" <span class="token punctuation">></span> /kaniko/.docker/config.json <span class="token punctuation">-</span> /kaniko/executor <span class="token punctuation">-</span><span class="token punctuation">-</span>context $CI_PROJECT_DIR <span class="token punctuation">-</span><span class="token punctuation">-</span>dockerfile $CI_PROJECT_DIR/Dockerfile <span class="token punctuation">-</span><span class="token punctuation">-</span>destination $CI_REGISTRY_IMAGE<span class="token punctuation">:</span>$CI_COMMIT_TAG<span class="token key atrule">after_script</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> echo "build completed"<span class="token key atrule">only</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> tags <span class="token comment" spellcheck="true"># 打tag才会执行，测试可去掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="CD过程"><a href="#CD过程" class="headerlink" title="CD过程"></a>CD过程</h2><p>CD即需要将生成的镜像更新到Kubernetes集群中，有如下几种方式：</p><ul><li>k8s restful api：需要对api较了解，更新过程需要调用<code>PATH</code>方法，不推荐</li><li>kubectl: 常规方式</li><li>helm: 如有可用的helm仓库，也可使用helm进行更新</li></ul><p>我们以kubectl为例，CD配置如下：</p><ol><li>配置变量<br>配置必须的集群地址，token，需要更新服务的namespace, container等</li><li>CD配置<br>配置与物理环境类似，首先配置kubectl token、集群等，最后调用<code>set image</code>更新服务<pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubectl<span class="token punctuation">:</span><span class="token number">1.17</span> <span class="token key atrule">entrypoint</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span><span class="token key atrule">before_script</span><span class="token punctuation">:</span><span class="token key atrule">script</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> IMAGE=$CI_REGISTRY_IMAGE<span class="token punctuation">:</span>$CI_COMMIT_SHORT_SHA <span class="token punctuation">-</span> kubectl config set<span class="token punctuation">-</span>credentials $CD_USER <span class="token punctuation">-</span><span class="token punctuation">-</span>token $CD_APP_AK  <span class="token punctuation">-</span> kubectl config set<span class="token punctuation">-</span>cluster $CD_CLUSTER <span class="token punctuation">-</span><span class="token punctuation">-</span>server https<span class="token punctuation">:</span>//$CD_SERVER <span class="token punctuation">-</span> kubectl config set<span class="token punctuation">-</span>context $CD_USER@$CD_CLUSTER/$CD_NAMESPACE <span class="token punctuation">-</span><span class="token punctuation">-</span>user $CD_USER <span class="token punctuation">-</span><span class="token punctuation">-</span>cluster $CD_CLUSTER <span class="token punctuation">-</span><span class="token punctuation">-</span>namespace $CD_NAMESPACE <span class="token punctuation">-</span> kubectl config use<span class="token punctuation">-</span>context $CD_USER@$CD_CLUSTER/$CD_NAMESPACE <span class="token punctuation">-</span> kubectl set image <span class="token punctuation">-</span>n $CD_NAMESPACE $CD_APP_TYPE/$CD_APP_NAME $CD_CONTAINER=$IMAGE<span class="token key atrule">only</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>运行结果<pre class="line-numbers language-bash"><code class="language-bash">$ kubectl <span class="token keyword">set</span> image -n <span class="token variable">$CD_NAMESPACE</span> <span class="token variable">$CD_APP_TYPE</span>/<span class="token variable">$CD_APP_NAME</span> <span class="token variable">$CD_CONTAINER</span><span class="token operator">=</span><span class="token variable">$IMAGE</span>deployment.extensions/helloworld image updatedJob succeeded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>本文所列举的CICD过程较简单，可以使用CICD完成服务的多集群部署，更新结果检查等功能。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.gitlab.com/ee/ci/docker/using_kaniko.html" target="_blank" rel="noopener">https://docs.gitlab.com/ee/ci/docker/using_kaniko.html</a></li><li><a href="https://docs.gitlab.com/runner/executors/kubernetes.html" target="_blank" rel="noopener">https://docs.gitlab.com/runner/executors/kubernetes.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> gitlab </tag>
            
            <tag> cicd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>糖</title>
      <link href="/candy/"/>
      <url>/candy/</url>
      
        <content type="html"><![CDATA[<p>一轮明月沉到了脸底<br>迷恋这红尘 不愿睡去<br>又变成红娘的大痣<br>在招摇过市</p><p>有了糖 她变得小心翼翼<br>吃饭睡觉也含着久久不肯放<br>是通灵宝玉 守护着片刻荣光<br>亦或是君子之遗 化作脸颊的相思</p><p>没人知道它的滋味<br>除了耳边的风<br>远方的惦记<br>以及轻轻拂过的吻</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kube-apiserver认证源码分析</title>
      <link href="/kube-apiserver-authentication-code/"/>
      <url>/kube-apiserver-authentication-code/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>kube-apiserver中与权限相关的主要有三种机制，即认证、鉴权和准入控制。本文主要分析apiserver的认证流程。</p><h2 id="认证流程分析"><a href="#认证流程分析" class="headerlink" title="认证流程分析"></a>认证流程分析</h2><p>权限相关代码从<code>k8s.io/apiserver/pkg/server/config.go</code>中<code>DefaultBuildHandlerChain</code>函数开始执行</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">DefaultBuildHandlerChain</span><span class="token punctuation">(</span>apiHandler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> c <span class="token operator">*</span>Config<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    handler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthorization</span><span class="token punctuation">(</span>apiHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithMaxInFlightLimit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>MaxMutatingRequestsInFlight<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithImpersonation</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authorization<span class="token punctuation">.</span>Authorizer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAudit</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">)</span>    failedHandler <span class="token operator">:=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">Unauthorized</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Serializer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>SupportsBasicAuth<span class="token punctuation">)</span>    failedHandler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithFailedAuthenticationAudit</span><span class="token punctuation">(</span>failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditBackend<span class="token punctuation">,</span> c<span class="token punctuation">.</span>AuditPolicyChecker<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithAuthentication</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>Authenticator<span class="token punctuation">,</span> failedHandler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Authentication<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithCORS</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>CorsAllowedOriginList<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithTimeoutForNonLongRunningRequests</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestTimeout<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithWaitGroup</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>LongRunningFunc<span class="token punctuation">,</span> c<span class="token punctuation">.</span>HandlerChainWaitGroup<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericapifilters<span class="token punctuation">.</span><span class="token function">WithRequestInfo</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> c<span class="token punctuation">.</span>RequestInfoResolver<span class="token punctuation">)</span>    handler <span class="token operator">=</span> genericfilters<span class="token punctuation">.</span><span class="token function">WithPanicRecovery</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span>    <span class="token keyword">return</span> handler<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DefaultBuildHandlerChain</code>中包含了多种filter（如认证，链接数检验，RBAC权限检验等），认证步骤在<code>WithAuthorization</code>中，如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// WithAuthentication creates an http handler that tries to authenticate the given request as a user, and then</span><span class="token comment" spellcheck="true">// stores any such user found onto the provided context for the request. If authentication fails or returns an error</span><span class="token comment" spellcheck="true">// the failed handler is used. On success, "Authorization" header is removed from the request and handler</span><span class="token comment" spellcheck="true">// is invoked to serve the request.</span><span class="token keyword">func</span> <span class="token function">WithAuthentication</span><span class="token punctuation">(</span>handler http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> auth authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> failed http<span class="token punctuation">.</span>Handler<span class="token punctuation">,</span> apiAuds authenticator<span class="token punctuation">.</span>Audiences<span class="token punctuation">)</span> http<span class="token punctuation">.</span>Handler <span class="token punctuation">{</span>    <span class="token keyword">if</span> auth <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">Warningf</span><span class="token punctuation">(</span><span class="token string">"Authentication is disabled"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> handler    <span class="token punctuation">}</span>    <span class="token keyword">return</span> http<span class="token punctuation">.</span><span class="token function">HandlerFunc</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        authenticationStart <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>apiAuds<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            req <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span><span class="token function">WithAudiences</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> apiAuds<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 认证请求</span>        resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> auth<span class="token punctuation">.</span><span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to authenticate the request due to an error: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>                authenticatedAttemptsCounter<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>errorLabel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                authenticationLatency<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>errorLabel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>authenticationStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>                authenticatedAttemptsCounter<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>failureLabel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                authenticationLatency<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>failureLabel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>authenticationStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            failed<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>apiAuds<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Audiences<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span><span class="token function">Audiences</span><span class="token punctuation">(</span>apiAuds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Intersect</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Audiences<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Unable to match the audience: %v , accepted: %v"</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Audiences<span class="token punctuation">,</span> apiAuds<span class="token punctuation">)</span>            failed<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// authorization header is not required anymore in case of a successful authentication.</span>        <span class="token comment" spellcheck="true">// 认证完则删除header认证信息，exec/log请求将不会携带Authorization，只使用token认证将无法通过</span>        req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Del</span><span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span>        req <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>genericapirequest<span class="token punctuation">.</span><span class="token function">WithUser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resp<span class="token punctuation">.</span>User<span class="token punctuation">)</span><span class="token punctuation">)</span>        authenticatedUserCounter<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span><span class="token function">compressUsername</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">GetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        authenticatedAttemptsCounter<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>successLabel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        authenticationLatency<span class="token punctuation">.</span><span class="token function">WithLabelValues</span><span class="token punctuation">(</span>successLabel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Observe</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>authenticationStart<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        handler<span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> req<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>WithAuthentication</code>调用<code>AuthenticateRequest</code>进行认证：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// AuthenticateRequest authenticates the request using a chain of authenticator.Request objects.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>authHandler <span class="token operator">*</span>unionAuthRequestHandler<span class="token punctuation">)</span> <span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>authenticator<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> errlist <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// 按照Handlers顺序进行认证</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> currAuthRequestHandler <span class="token operator">:=</span> <span class="token keyword">range</span> authHandler<span class="token punctuation">.</span>Handlers <span class="token punctuation">{</span>        resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err <span class="token operator">:=</span> currAuthRequestHandler<span class="token punctuation">.</span><span class="token function">AuthenticateRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> authHandler<span class="token punctuation">.</span>FailOnError <span class="token punctuation">{</span>                <span class="token keyword">return</span> resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err            <span class="token punctuation">}</span>            errlist <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>errlist<span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 只要有一个认证成功，则返回  </span>        <span class="token keyword">if</span> ok <span class="token punctuation">{</span>            <span class="token keyword">return</span> resp<span class="token punctuation">,</span> ok<span class="token punctuation">,</span> err        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> utilerrors<span class="token punctuation">.</span><span class="token function">NewAggregate</span><span class="token punctuation">(</span>errlist<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据认证逻辑，会按照<code>authHandler.Handlers</code>顺序进行检验，只要有一个认证成功则返回。<code>Handlers</code>的定义在</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// New returns a request authenticator that validates credentials using a chain of authenticator.Request objects.</span><span class="token comment" spellcheck="true">// The entire chain is tried until one succeeds. If all fail, an aggregate error is returned.</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>authRequestHandlers <span class="token operator">...</span>authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> authenticator<span class="token punctuation">.</span>Request <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>authRequestHandlers<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> authRequestHandlers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>unionAuthRequestHandler<span class="token punctuation">{</span>Handlers<span class="token punctuation">:</span> authRequestHandlers<span class="token punctuation">,</span> FailOnError<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最初的定义在<code>k8s.io/kubernetes/pkg/kubeapiserver/authenticator/config.go</code>中：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// New returns an authenticator.Request or an error that supports the standard</span><span class="token comment" spellcheck="true">// Kubernetes authentication mechanisms.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>config Config<span class="token punctuation">)</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> <span class="token operator">*</span>spec<span class="token punctuation">.</span>SecurityDefinitions<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> authenticators <span class="token punctuation">[</span><span class="token punctuation">]</span>authenticator<span class="token punctuation">.</span>Request    <span class="token keyword">var</span> tokenAuthenticators <span class="token punctuation">[</span><span class="token punctuation">]</span>authenticator<span class="token punctuation">.</span>Token    securityDefinitions <span class="token operator">:=</span> spec<span class="token punctuation">.</span>SecurityDefinitions<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// front-proxy, BasicAuth methods, local first, then remote</span>    <span class="token comment" spellcheck="true">// Add the front proxy authenticator if requested</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>RequestHeaderConfig <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        requestHeaderAuthenticator <span class="token operator">:=</span> headerrequest<span class="token punctuation">.</span><span class="token function">NewDynamicVerifyOptionsSecure</span><span class="token punctuation">(</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>CAContentProvider<span class="token punctuation">.</span>VerifyOptions<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>AllowedClientNames<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>UsernameHeaders<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>GroupHeaders<span class="token punctuation">,</span>            config<span class="token punctuation">.</span>RequestHeaderConfig<span class="token punctuation">.</span>ExtraHeaderPrefixes<span class="token punctuation">,</span>        <span class="token punctuation">)</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> requestHeaderAuthenticator<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// basic auth</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>BasicAuthFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        basicAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newAuthenticatorFromBasicAuthFile</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>BasicAuthFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticRequest</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> basicAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>        securityDefinitions<span class="token punctuation">[</span><span class="token string">"HTTPBasic"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">.</span>SecurityScheme<span class="token punctuation">{</span>            SecuritySchemeProps<span class="token punctuation">:</span> spec<span class="token punctuation">.</span>SecuritySchemeProps<span class="token punctuation">{</span>                Type<span class="token punctuation">:</span>        <span class="token string">"basic"</span><span class="token punctuation">,</span>                Description<span class="token punctuation">:</span> <span class="token string">"HTTP Basic authentication"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// X509 methods</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>ClientCAContentProvider <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        certAuth <span class="token operator">:=</span> x509<span class="token punctuation">.</span><span class="token function">NewDynamic</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ClientCAContentProvider<span class="token punctuation">.</span>VerifyOptions<span class="token punctuation">,</span> x509<span class="token punctuation">.</span>CommonNameUserConversion<span class="token punctuation">)</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> certAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Bearer token methods, local first, then remote</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>TokenAuthFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        tokenAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newAuthenticatorFromTokenFile</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>TokenAuthFile<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticToken</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> tokenAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ServiceAccountKeyFiles<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        serviceAccountAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newLegacyServiceAccountAuthenticator</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ServiceAccountKeyFiles<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountLookup<span class="token punctuation">,</span> config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountTokenGetter<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> serviceAccountAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> utilfeature<span class="token punctuation">.</span>DefaultFeatureGate<span class="token punctuation">.</span><span class="token function">Enabled</span><span class="token punctuation">(</span>features<span class="token punctuation">.</span>TokenRequest<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span>ServiceAccountIssuer <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>        serviceAccountAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newServiceAccountAuthenticator</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>ServiceAccountIssuer<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountKeyFiles<span class="token punctuation">,</span> config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> config<span class="token punctuation">.</span>ServiceAccountTokenGetter<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> serviceAccountAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>BootstrapToken <span class="token punctuation">{</span>        <span class="token keyword">if</span> config<span class="token punctuation">.</span>BootstrapTokenAuthenticator <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: This can sometimes be nil because of</span>            tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> authenticator<span class="token punctuation">.</span><span class="token function">WrapAudienceAgnosticToken</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span> config<span class="token punctuation">.</span>BootstrapTokenAuthenticator<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// NOTE(ericchiang): Keep the OpenID Connect after Service Accounts.</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">// Because both plugins verify JWTs whichever comes first in the union experiences</span>    <span class="token comment" spellcheck="true">// cache misses for all requests using the other. While the service account plugin</span>    <span class="token comment" spellcheck="true">// simply returns an error, the OpenID Connect plugin may query the provider to</span>    <span class="token comment" spellcheck="true">// update the keys, causing performance hits.</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>OIDCIssuerURL<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>OIDCClientID<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        oidcAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newAuthenticatorFromOIDCIssuerURL</span><span class="token punctuation">(</span>oidc<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>            IssuerURL<span class="token punctuation">:</span>            config<span class="token punctuation">.</span>OIDCIssuerURL<span class="token punctuation">,</span>            ClientID<span class="token punctuation">:</span>             config<span class="token punctuation">.</span>OIDCClientID<span class="token punctuation">,</span>            APIAudiences<span class="token punctuation">:</span>         config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">,</span>            CAFile<span class="token punctuation">:</span>               config<span class="token punctuation">.</span>OIDCCAFile<span class="token punctuation">,</span>            UsernameClaim<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>OIDCUsernameClaim<span class="token punctuation">,</span>            UsernamePrefix<span class="token punctuation">:</span>       config<span class="token punctuation">.</span>OIDCUsernamePrefix<span class="token punctuation">,</span>            GroupsClaim<span class="token punctuation">:</span>          config<span class="token punctuation">.</span>OIDCGroupsClaim<span class="token punctuation">,</span>            GroupsPrefix<span class="token punctuation">:</span>         config<span class="token punctuation">.</span>OIDCGroupsPrefix<span class="token punctuation">,</span>            SupportedSigningAlgs<span class="token punctuation">:</span> config<span class="token punctuation">.</span>OIDCSigningAlgs<span class="token punctuation">,</span>            RequiredClaims<span class="token punctuation">:</span>       config<span class="token punctuation">.</span>OIDCRequiredClaims<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> oidcAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>WebhookTokenAuthnConfigFile<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        webhookTokenAuth<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newWebhookTokenAuthenticator</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>WebhookTokenAuthnConfigFile<span class="token punctuation">,</span> config<span class="token punctuation">.</span>WebhookTokenAuthnVersion<span class="token punctuation">,</span> config<span class="token punctuation">.</span>WebhookTokenAuthnCacheTTL<span class="token punctuation">,</span> config<span class="token punctuation">.</span>APIAudiences<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        tokenAuthenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">,</span> webhookTokenAuth<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Union the token authenticators</span>        tokenAuth <span class="token operator">:=</span> tokenunion<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>tokenAuthenticators<span class="token operator">...</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// Optionally cache authentication results</span>        <span class="token keyword">if</span> config<span class="token punctuation">.</span>TokenSuccessCacheTTL <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> config<span class="token punctuation">.</span>TokenFailureCacheTTL <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>            tokenAuth <span class="token operator">=</span> tokencache<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>tokenAuth<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>TokenSuccessCacheTTL<span class="token punctuation">,</span> config<span class="token punctuation">.</span>TokenFailureCacheTTL<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        authenticators <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">,</span> bearertoken<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>tokenAuth<span class="token punctuation">)</span><span class="token punctuation">,</span> websocket<span class="token punctuation">.</span><span class="token function">NewProtocolAuthenticator</span><span class="token punctuation">(</span>tokenAuth<span class="token punctuation">)</span><span class="token punctuation">)</span>        securityDefinitions<span class="token punctuation">[</span><span class="token string">"BearerToken"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>spec<span class="token punctuation">.</span>SecurityScheme<span class="token punctuation">{</span>            SecuritySchemeProps<span class="token punctuation">:</span> spec<span class="token punctuation">.</span>SecuritySchemeProps<span class="token punctuation">{</span>                Type<span class="token punctuation">:</span>        <span class="token string">"apiKey"</span><span class="token punctuation">,</span>                Name<span class="token punctuation">:</span>        <span class="token string">"authorization"</span><span class="token punctuation">,</span>                In<span class="token punctuation">:</span>          <span class="token string">"header"</span><span class="token punctuation">,</span>                Description<span class="token punctuation">:</span> <span class="token string">"Bearer Token authentication"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>authenticators<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> config<span class="token punctuation">.</span>Anonymous <span class="token punctuation">{</span>            <span class="token keyword">return</span> anonymous<span class="token punctuation">.</span><span class="token function">NewAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>securityDefinitions<span class="token punctuation">,</span> <span class="token boolean">nil</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>securityDefinitions<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    authenticator <span class="token operator">:=</span> union<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>authenticators<span class="token operator">...</span><span class="token punctuation">)</span>    authenticator <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">NewAuthenticatedGroupAdder</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">)</span>    <span class="token keyword">if</span> config<span class="token punctuation">.</span>Anonymous <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If the authenticator chain returns an error, return an error (don't consider a bad bearer token</span>        <span class="token comment" spellcheck="true">// or invalid username/password combination anonymous).</span>        authenticator <span class="token operator">=</span> union<span class="token punctuation">.</span><span class="token function">NewFailOnError</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">,</span> anonymous<span class="token punctuation">.</span><span class="token function">NewAuthenticator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> authenticator<span class="token punctuation">,</span> <span class="token operator">&amp;</span>securityDefinitions<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>认证顺序即代码执行顺序:</p><ol><li>Request header, RequestHeader认证，需配置<code>--requestheader-username-headers</code></li><li>Basic auth, 账号密码认证，通过文件<code>--basic-auth-file=SOMEFILE</code>配置对应用户</li><li>X509, 证书认证</li><li>Static token, 通过文件<code>--token-auth-file=SOMEFILE</code>匹配用户</li><li>ServiceAccout token, 一般用于认证Pod</li><li>Bootstrap token, 用于集群初始化阶段，通过配置<code>--experimental-bootstrap-token-auth</code>启用</li><li>OpenID Connect token, OAuth2认证</li><li>Webhook token, 通过webhook认证token，需配置<code>--authentication-token-webhook-config-file</code></li><li>Cache auth, 通过cache认证</li><li>Anonymous， 以上认证未通过则返回匿名用户</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Apiserver的认证方式有多种，通过源码分析每次请求都会安装固定的认证顺序执行，高qps下认证配置势必会影响Apiserver的响应延迟，需要根据集群的实际情况配置合理的认证方式。</p><p>目前在我们的线上系统，主要通过RequestHeader(认证普通用户)，基本认证(个别系统组件)，X509（认证kubelet），ServieceAccout（认证Pod）进行认证，仅供参考。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s基于资源锁的选主分析</title>
      <link href="/k8s-leaderelection-code/"/>
      <url>/k8s-leaderelection-code/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>k8s中为了实现高可用，需要部署多个副本，例如多个apiserver、scheduler、controller-manager等，其中apiserver是无状态的每个组件都可以工作，而scheduler与controller-manager是有状态的，同一时刻只能存在一个活跃的，需要进行选主。</p><p>k8s使用了资源锁（endpoints/configmap/lease）的方式来实现选主，多个副本去创建资源，创建成功则获得锁成为leader，leader在租约内去刷新锁，其他副本则通过比对锁的更新时间判断是否成为新的leader。</p><p>k8s采用了资源版本号的乐观锁方式来实现选主，对比etcd选主，效率更高，并发性更好。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>k8s选主实现在client-go中，包<code>k8s.io/client-go/tools/leaderelection</code></p><h3 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h3><p>锁结构定义如下：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// k8s.io/client-go/tools/leaderelection/resourcelock/interface.go</span><span class="token keyword">type</span> LeaderElectionRecord <span class="token keyword">struct</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// leader 标识，通常为 hostname</span>  HolderIdentity       <span class="token builtin">string</span>           <span class="token string">`json:"holderIdentity"`</span>  <span class="token comment" spellcheck="true">// 同启动参数 --leader-elect-lease-duration</span>  LeaseDurationSeconds <span class="token builtin">int</span>              <span class="token string">`json:"leaseDurationSeconds"`</span>  <span class="token comment" spellcheck="true">// Leader 第一次成功获得租约时的时间戳</span>  AcquireTime          unversioned<span class="token punctuation">.</span>Time <span class="token string">`json:"acquireTime"`</span>  <span class="token comment" spellcheck="true">// leader 定时 renew 的时间戳</span>  RenewTime            unversioned<span class="token punctuation">.</span>Time <span class="token string">`json:"renewTime"`</span>  LeaderTransitions    <span class="token builtin">int</span>              <span class="token string">`json:"leaderTransitions"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>k8s中的选举锁需实现<code>resourcelock.Interface</code>接口，基本上实现CRU，将leader信息存在在annotation中</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// k8s.io/client-go/tools/leaderelection/resourcelock/interface.go</span><span class="token keyword">type</span> Interface <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Get returns the LeaderElectionRecord</span>    <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>LeaderElectionRecord<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Create attempts to create a LeaderElectionRecord</span>    <span class="token function">Create</span><span class="token punctuation">(</span>ler LeaderElectionRecord<span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// Update will update and existing LeaderElectionRecord</span>    <span class="token function">Update</span><span class="token punctuation">(</span>ler LeaderElectionRecord<span class="token punctuation">)</span> <span class="token builtin">error</span>    <span class="token comment" spellcheck="true">// RecordEvent 记录锁切换事件</span>    <span class="token function">RecordEvent</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// Identity will return the locks Identity</span>    <span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// Describe is used to convert details on current resource lock</span>    <span class="token comment" spellcheck="true">// into a string</span>    <span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建资源锁"><a href="#创建资源锁" class="headerlink" title="创建资源锁"></a>创建资源锁</h3><p>锁类型包括：configmaps， endpoints, lease, 以及 multiLock</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// k8s.io/client-go/tools/leaderelection/resourcelock/interface.go</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>lockType <span class="token builtin">string</span><span class="token punctuation">,</span> ns <span class="token builtin">string</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> coreClient corev1<span class="token punctuation">.</span>CoreV1Interface<span class="token punctuation">,</span> coordinationClient coordinationv1<span class="token punctuation">.</span>CoordinationV1Interface<span class="token punctuation">,</span> rlc ResourceLockConfig<span class="token punctuation">)</span> <span class="token punctuation">(</span>Interface<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    endpointsLock <span class="token operator">:=</span> <span class="token operator">&amp;</span>EndpointsLock<span class="token punctuation">{</span>        EndpointsMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">{</span>            Namespace<span class="token punctuation">:</span> ns<span class="token punctuation">,</span>            Name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Client<span class="token punctuation">:</span>     coreClient<span class="token punctuation">,</span>        LockConfig<span class="token punctuation">:</span> rlc<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    configmapLock <span class="token operator">:=</span> <span class="token operator">&amp;</span>ConfigMapLock<span class="token punctuation">{</span>        ConfigMapMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">{</span>            Namespace<span class="token punctuation">:</span> ns<span class="token punctuation">,</span>            Name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Client<span class="token punctuation">:</span>     coreClient<span class="token punctuation">,</span>        LockConfig<span class="token punctuation">:</span> rlc<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    leaseLock <span class="token operator">:=</span> <span class="token operator">&amp;</span>LeaseLock<span class="token punctuation">{</span>        LeaseMeta<span class="token punctuation">:</span> metav1<span class="token punctuation">.</span>ObjectMeta<span class="token punctuation">{</span>            Namespace<span class="token punctuation">:</span> ns<span class="token punctuation">,</span>            Name<span class="token punctuation">:</span>      name<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        Client<span class="token punctuation">:</span>     coordinationClient<span class="token punctuation">,</span>        LockConfig<span class="token punctuation">:</span> rlc<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> lockType <span class="token punctuation">{</span>    <span class="token keyword">case</span> EndpointsResourceLock<span class="token punctuation">:</span>        <span class="token keyword">return</span> endpointsLock<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">case</span> ConfigMapsResourceLock<span class="token punctuation">:</span>        <span class="token keyword">return</span> configmapLock<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">case</span> LeasesResourceLock<span class="token punctuation">:</span>        <span class="token keyword">return</span> leaseLock<span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">case</span> EndpointsLeasesResourceLock<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>MultiLock<span class="token punctuation">{</span>            Primary<span class="token punctuation">:</span>   endpointsLock<span class="token punctuation">,</span>            Secondary<span class="token punctuation">:</span> leaseLock<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">case</span> ConfigMapsLeasesResourceLock<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span>MultiLock<span class="token punctuation">{</span>            Primary<span class="token punctuation">:</span>   configmapLock<span class="token punctuation">,</span>            Secondary<span class="token punctuation">:</span> leaseLock<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Invalid lock-type %s"</span><span class="token punctuation">,</span> lockType<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用者首先通过<code>new()</code>函数创建资源锁，需要提供锁类型、namespace、name、唯一标示等。</p><h3 id="进行选举"><a href="#进行选举" class="headerlink" title="进行选举"></a>进行选举</h3><p>创建选举配置，通常如下：</p><pre class="line-numbers language-go"><code class="language-go">      <span class="token comment" spellcheck="true">// start the leader election code loop</span>      leaderelection<span class="token punctuation">.</span><span class="token function">RunOrDie</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> leaderelection<span class="token punctuation">.</span>LeaderElectionConfig<span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 资源锁类型</span>          Lock<span class="token punctuation">:</span> lock<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 租约时长，非主候选者用来判断资源锁是否过期</span>          LeaseDuration<span class="token punctuation">:</span>   <span class="token number">60</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// leader刷新资源锁超时时间   </span>          RenewDeadline<span class="token punctuation">:</span>   <span class="token number">15</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 调用资源锁间隔</span>          RetryPeriod<span class="token punctuation">:</span>     <span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 回调函数，根据选举不同事件触发</span>          Callbacks<span class="token punctuation">:</span> leaderelection<span class="token punctuation">.</span>LeaderCallbacks<span class="token punctuation">{</span>              OnStartedLeading<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              OnStoppedLeading<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"leader lost: %s"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>                  os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 必须要退出，重启开始选主，否则将不会参与到选主中</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              OnNewLeader<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>identity <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> identity <span class="token operator">==</span> id <span class="token punctuation">{</span>                      <span class="token keyword">return</span>                  <span class="token punctuation">}</span>                  klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"new leader elected: %s"</span><span class="token punctuation">,</span> identity<span class="token punctuation">)</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建选举对象后，执行<code>Run</code>函数开始选主</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// k8s.io/client-go/tools/leaderelection/leaderelection.go</span><span class="token comment" spellcheck="true">// Run starts the leader election loop</span><span class="token keyword">func</span> <span class="token punctuation">(</span>le <span class="token operator">*</span>LeaderElector<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        runtime<span class="token punctuation">.</span><span class="token function">HandleCrash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 锁丢失时执行OnStoppedLeading回调函数</span>        le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Callbacks<span class="token punctuation">.</span><span class="token function">OnStoppedLeading</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 尝试获得锁</span>    <span class="token keyword">if</span> <span class="token operator">!</span>le<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// ctx signalled done</span>    <span class="token punctuation">}</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 获得锁后执行OnStartedLeading回调函数</span>    <span class="token keyword">go</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Callbacks<span class="token punctuation">.</span><span class="token function">OnStartedLeading</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 定期刷新锁</span>    le<span class="token punctuation">.</span><span class="token function">renew</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>acruire方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// k8s.io/client-go/tools/leaderelection/leaderelection.go</span><span class="token comment" spellcheck="true">// acquire loops calling tryAcquireOrRenew and returns true immediately when tryAcquireOrRenew succeeds.</span><span class="token comment" spellcheck="true">// Returns false if ctx signals done.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>le <span class="token operator">*</span>LeaderElector<span class="token punctuation">)</span> <span class="token function">acquire</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    succeeded <span class="token operator">:=</span> <span class="token boolean">false</span>    desc <span class="token operator">:=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"attempting to acquire leader lease  %v..."</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用 JitterUntil 函数，以 RetryPeriod 为间隔去刷新资源锁，直到获取锁</span>    wait<span class="token punctuation">.</span><span class="token function">JitterUntil</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// tryAcquireOrRenew 方法去调度资源更新接口，判断是否刷新成功</span>        succeeded <span class="token operator">=</span> le<span class="token punctuation">.</span><span class="token function">tryAcquireOrRenew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        le<span class="token punctuation">.</span><span class="token function">maybeReportTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">!</span>succeeded <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"failed to acquire lease %v"</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">RecordEvent</span><span class="token punctuation">(</span><span class="token string">"became leader"</span><span class="token punctuation">)</span>        le<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span><span class="token function">leaderOn</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>        klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"successfully acquired lease %v"</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RetryPeriod<span class="token punctuation">,</span> JitterFactor<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> succeeded<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>renew方法，只有在获取锁之后才会调用，它会通过持续更新资源锁的数据，来确保继续持有已获得的锁，保持自己的leader 状态。</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// renew loops calling tryAcquireOrRenew and returns immediately when tryAcquireOrRenew fails or ctx signals done.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>le <span class="token operator">*</span>LeaderElector<span class="token punctuation">)</span> <span class="token function">renew</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    wait<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        timeoutCtx<span class="token punctuation">,</span> timeoutCancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RenewDeadline<span class="token punctuation">)</span>        <span class="token keyword">defer</span> <span class="token function">timeoutCancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// </span>        err <span class="token operator">:=</span> wait<span class="token punctuation">.</span><span class="token function">PollImmediateUntil</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RetryPeriod<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span>                done <span class="token operator">&lt;-</span> le<span class="token punctuation">.</span><span class="token function">tryAcquireOrRenew</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 超时返回error, 否则返回更新结果</span>            <span class="token keyword">select</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token operator">&lt;-</span>timeoutCtx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"failed to tryAcquireOrRenew %s"</span><span class="token punctuation">,</span> timeoutCtx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">case</span> result <span class="token operator">:=</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">:</span>                <span class="token keyword">return</span> result<span class="token punctuation">,</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> timeoutCtx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        le<span class="token punctuation">.</span><span class="token function">maybeReportTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        desc <span class="token operator">:=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"successfully renewed lease %v"</span><span class="token punctuation">,</span> desc<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>        le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">RecordEvent</span><span class="token punctuation">(</span><span class="token string">"stopped leading"</span><span class="token punctuation">)</span>        le<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span><span class="token function">leaderOff</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>        klog<span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"failed to renew lease %v: %v"</span><span class="token punctuation">,</span> desc<span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>RetryPeriod<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// if we hold the lease, give it up</span>    <span class="token keyword">if</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>ReleaseOnCancel <span class="token punctuation">{</span>        le<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了wait包，<code>wait.Until</code>会不断的调用<code>wait.PollImmediateUntil</code>方法，前者是进行无限循环操作，直到 <code>stop chan</code>被关闭，<code>wait.PollImmediateUntil</code>则不断的对某一条件进行检查，以<code>RetryPeriod</code>为间隔，直到该条件返回true、error或者超时。这一条件是一个需要满足 func() (bool, error) 签名的方法，比如这个例子只是调用了 <code>le.tryAcquireOrRenew()</code>。</p><p>最后看下<code>tryAcquireOrRenew</code>方法：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// tryAcquireOrRenew tries to acquire a leader lease if it is not already acquired,</span><span class="token comment" spellcheck="true">// else it tries to renew the lease if it has already been acquired. Returns true</span><span class="token comment" spellcheck="true">// on success else returns false.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>le <span class="token operator">*</span>LeaderElector<span class="token punctuation">)</span> <span class="token function">tryAcquireOrRenew</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    now <span class="token operator">:=</span> metav1<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 这个 leaderElectionRecord 就是保存在 endpoint/configmap 的 annotation 中的值。</span>    <span class="token comment" spellcheck="true">// 每个节点都将 HolderIdentity 设置为自己，以及关于获取和更新锁的时间。后面会对时间进行修正，才会更新到 API server</span>    leaderElectionRecord <span class="token operator">:=</span> rl<span class="token punctuation">.</span>LeaderElectionRecord<span class="token punctuation">{</span>        HolderIdentity<span class="token punctuation">:</span>       le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        LeaseDurationSeconds<span class="token punctuation">:</span> <span class="token function">int</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LeaseDuration <span class="token operator">/</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">,</span>        RenewTime<span class="token punctuation">:</span>            now<span class="token punctuation">,</span>        AcquireTime<span class="token punctuation">:</span>          now<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 1. 获取或者创建 ElectionRecord</span>    oldLeaderElectionRecord<span class="token punctuation">,</span> oldLeaderElectionRawRecord<span class="token punctuation">,</span> err <span class="token operator">:=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录不存在的话，则创建一条新的记录</span>        <span class="token keyword">if</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">IsNotFound</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error retrieving resource lock %v: %v"</span><span class="token punctuation">,</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Describe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> err <span class="token operator">=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>leaderElectionRecord<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error initially creating leader election record: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 创建记录成功，同时表示获得了锁，返回true</span>        le<span class="token punctuation">.</span>observedRecord <span class="token operator">=</span> leaderElectionRecord        le<span class="token punctuation">.</span>observedTime <span class="token operator">=</span> le<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2. 正常获取了锁资源的记录，检查锁持有者和更新时间。</span>    <span class="token keyword">if</span> <span class="token operator">!</span>bytes<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>observedRawRecord<span class="token punctuation">,</span> oldLeaderElectionRawRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 记录之前的锁持有者</span>        le<span class="token punctuation">.</span>observedRecord <span class="token operator">=</span> <span class="token operator">*</span>oldLeaderElectionRecord        le<span class="token punctuation">.</span>observedRawRecord <span class="token operator">=</span> oldLeaderElectionRawRecord        le<span class="token punctuation">.</span>observedTime <span class="token operator">=</span> le<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 在满足以下所有的条件下，认为锁由他人持有，并且还没有过期，返回 false</span>    <span class="token comment" spellcheck="true">// a. 当前锁持有者的并非自己</span>    <span class="token comment" spellcheck="true">// b. 上一次观察时间 + 观测检查间隔大于现在时间，即距离上次观测的间隔，小于 `LeaseDuration` 的设置值。</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>oldLeaderElectionRecord<span class="token punctuation">.</span>HolderIdentity<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        le<span class="token punctuation">.</span>observedTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>LeaseDuration<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span>Time<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span>le<span class="token punctuation">.</span><span class="token function">IsLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">V</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Infof</span><span class="token punctuation">(</span><span class="token string">"lock is held by %v and has not yet expired"</span><span class="token punctuation">,</span> oldLeaderElectionRecord<span class="token punctuation">.</span>HolderIdentity<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 更新资源的资源锁</span>    <span class="token keyword">if</span> le<span class="token punctuation">.</span><span class="token function">IsLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        leaderElectionRecord<span class="token punctuation">.</span>AcquireTime <span class="token operator">=</span> oldLeaderElectionRecord<span class="token punctuation">.</span>AcquireTime        leaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions <span class="token operator">=</span> oldLeaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        leaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions <span class="token operator">=</span> oldLeaderElectionRecord<span class="token punctuation">.</span>LeaderTransitions <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用资源锁更新接口</span>    <span class="token keyword">if</span> err <span class="token operator">=</span> le<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Lock<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span>leaderElectionRecord<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        klog<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Failed to update lock: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    le<span class="token punctuation">.</span>observedRecord <span class="token operator">=</span> leaderElectionRecord    le<span class="token punctuation">.</span>observedTime <span class="token operator">=</span> le<span class="token punctuation">.</span>clock<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当应用在k8s上部署时，使用k8s的资源锁，可方便的实现高可用，但需要注意以下几点：</p><ul><li>推荐使用<code>configmap</code>作为资源锁，原因是某些组件如<code>kube-proxy</code>会去监听<code>endpoints</code>来更新节点iptables规则，当有大量资源锁时，势必会对性能有影响。</li><li>当选举结束时调用<code>OnStoppedLeading</code>需要<strong>退出程序</strong>(例如<code>os.Exit(0)</code>)，若不退出程序，所有副本选举结束不会去竞争资源锁，就没有leader，造成服务不可用而这时程序并没有异常。需要执行退出逻辑，让Daemon程序k8s/systemd等重启服务来重新参与选主。</li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cgroup引起的应用延迟</title>
      <link href="/lxcfs-high-system-cpu/"/>
      <url>/lxcfs-high-system-cpu/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>用户发现线上某容器请求hbase延迟较大，其他容器无类似现象，发现问题容器宿主机系统cpu占用较大（30%左右，正常在5%以下）。通过top查看lxcfs占用cpu较多（200%以上）。</p><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><p>查看宿主机(内核 4.9.2)<code>top</code>,<code>1</code>显示每个cpu使用信息。查看最高的cpu占用是lxcfs造成的。</p><p><code>strace</code>查看lxcfs调用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看调用情况，read占用99%</span>$ <span class="token function">strace</span> -p 18521 -c% <span class="token function">time</span>     seconds  usecs/call     calls    errors syscall------ ----------- ----------- --------- --------- ---------------- 99.82   78.360112       39797      1969           <span class="token function">read</span>  0.11    0.088295         122       722           munmap  0.01    0.011649         416        28           wait4  0.01    0.010611          14       736           <span class="token function">open</span>  0.01    0.005685          75        76        18 futex  0.01    0.005288           7       792           close  0.01    0.005115          14       366           writev  0.01    0.004750           7       722           mmap  0.00    0.003552           5       722           fstat  0.00    0.002989         107        28           epoll_wait  0.00    0.002102          17       126           <span class="token function">stat</span>  0.00    0.000202          14        14           socketpair  0.00    0.000157          11        14           <span class="token function">write</span>  0.00    0.000122           4        28           epoll_create  0.00    0.000111           8        14           recvmsg  0.00    0.000104           4        28           epoll_ctl  0.00    0.000091           3        28           clone  0.00    0.000071           5        14           setsockopt  0.00    0.000059           4        14           setns  0.00    0.000012           1        14           recvfrom  0.00    0.000011           1        14           sendmsg  0.00    0.000003           0        14           set_robust_list  0.00    0.000000           0        14           getpid------ ----------- ----------- --------- --------- ----------------<span class="token comment" spellcheck="true"># 查看详细情况，大量读取cgroup下memory的调用</span>$ <span class="token function">strace</span> -p 18521 -f -T -tt -o lx.log<span class="token function">cat</span> lx.log79153 14:20:31.122630 open<span class="token punctuation">(</span><span class="token string">"/run/lxcfs/controllers/memory//kubepods/burstable/pod7077217d-de6f-11e9-9352-246e96d53468/bcac6516ca5b2a60880fcbc752bf6878ddc77905db71269d852d17f5dc90b148/memory.memsw.limit_in_bytes"</span>, O_RDONLY<span class="token punctuation">)</span> <span class="token operator">=</span> 5 <span class="token operator">&lt;</span>0.000017<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经发现某个pod调用的次数明显高于其他pod，排查到其容器内每隔2s执行<code>ps -auf</code>，会调用/proc/pid/stat其中就有memory相关的。<br>开开心心联系业务将其驱逐，宿主机没有明显变化。。。，再次查看<code>top</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">top</span> - 13:43:56 up 120 days, 19:21,  1 user,  load average: 6.59, 3.26, 2.34Tasks: 630 total,   1 running, 629 sleeping,   0 stopped,   0 zombie%Cpu<span class="token punctuation">(</span>s<span class="token punctuation">)</span>:  0.8 us,  7.1 sy,  0.0 ni, 92.1 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 stKiB Mem <span class="token keyword">:</span> 13170992+total, 93100928 free,  7571536 used, 31037456 buff/cacheKiB Swap:        0 total,        0 free,        0 used. 11042460+avail Mem    PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND                                                                                                                                        20686 root      20   0  141152  49032  17960 S  51.3  0.0   5890:25 cadvisor                                                                                                                                      115798 root      20   0       0      0      0 D  19.5  0.0   0:09.62 kworker/14:0                                                                                                                                   95501 root      20   0       0      0      0 D  17.2  0.0   0:10.11 kworker/0:1                                                                                                                                    38620 root      20   0       0      0      0 D  13.9  0.0   0:07.92 kworker/2:1                                                                                                                                   111178 root      20   0       0      0      0 D  13.9  0.0   0:10.67 kworker/6:0                                                                                                                                    58741 root      20   0       0      0      0 D  12.3  0.0   0:10.50 kworker/15:1                                                                                                                                  104600 root      20   0       0      0      0 D  12.3  0.0   0:05.55 kworker/8:2                                                                                                                                    15166 root      20   0       0      0      0 D  10.9  0.0   0:04.44 kworker/16:1                                                                                                                                   89483 root      20   0       0      0      0 D  10.9  0.0   0:04.73 kworker/11:0                                                                                                                                   30487 root      20   0 3905496 152268  36216 S   9.3  0.1   3060:33 dockerd                                                                                                                                        41220 work      20   0  687540 300368  16012 S   4.0  0.2 235:53.07 lottery-service                                                                                                                               125923 root      20   0 4892136 181572  58924 S   3.6  0.1  21469:57 kubelet                                                                                                                                        <span class="token punctuation">..</span>. <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现cadvisor占用较高的cpu，联系以前遇到的问题，cadvisor也是采集memory时变慢,测试居然需要2秒多！</p><pre><code>$ time cat /sys/fs/cgroup/memory/memory.statcache 25691987968rss 3426922496rss_huge 2759852032...real    0m2.485suser    0m0.000ssys    0m2.484s</code></pre><p>主要原因是产生了某些僵尸cgroup(比如反复启动，进程不存在了，但cgroup还没来得及回收，cgroup会反复计算这些cgroup的内存会占用)，导致cpu使用增加<a href="https://github.com/google/cadvisor/issues/1774#issuecomment-406314361" target="_blank" rel="noopener">相关issue</a> 以及<a href="https://lkml.org/lkml/2018/7/3/101" target="_blank" rel="noopener">thread</a></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>根本原因还需要进一步分析，临时解决办法，通过手动释放内存</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 2 <span class="token operator">></span> /proc/sys/vm/drop_caches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没效果可尝试</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> 3 <span class="token operator">></span> /proc/sys/vm/drop_caches<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>释放后，果然系统cpu逐渐恢复正常了，从falcon查看cpu确实下降了<br><img src="/img/blogImg/lxcfs-cpu.png" alt="lxcf-cpu"></p><h2 id="跟进"><a href="#跟进" class="headerlink" title="跟进"></a>跟进</h2><p>经排查，我们使用的内核较旧为（4.9.2）;僵尸cgroup过多, 导致遍历cgroup读取per_cpu变量时可能引起锁的争用。</p><p>僵尸cgroup：没有进程运行，并已经被删除的cgroup，但是所占用的内存并没有被完全回收(inode，dentry等缓存资源)，在读取memory.stat仍会计算这部分cgroup的缓存空间。</p><p>目前该问题在新版的内核（如5.4）中得到修复，新内核引用新的数据结构解决该问题：每次分配内存时，会即时更新cgroup的内存使用情况存储到专用的统计变量，因此读取某个cgroup的mem stat不会涉及到per_cpu变量，可以立即返回。</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s中fd与thread限制(二)</title>
      <link href="/k8s-limit-fd-and-thread2/"/>
      <url>/k8s-limit-fd-and-thread2/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在上线fd隔离后，多个用户反馈部署有问题，日志显示 <code>su could not open session</code>，dolphin（主进程） 启动用户程序时如果用户部署账号为work，会通过su切换到work下启动用户程序，报错正是这时产生。</p><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><p>通过复现问题，确实存在su切换失败，通过<code>strace su work</code>显示：</p><pre class="line-numbers language-sh"><code class="language-sh">sh-4.1# strace -o strace.log su workcould not open sessionsh-4.1# vim strace.logexecve("/bin/su", ["su", "work"], [/* 18 vars */]) = 0brk(0)/su...stat("/etc/pam.d", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0open("/etc/pam.d/su", O_RDONLY)         = 3...open("/etc/pam.d/system-auth", O_RDONLY) = 4...getrlimit(RLIMIT_CPU, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0 # 通过getrlimit获取当前ulimit设置getrlimit(RLIMIT_FSIZE, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_DATA, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_STACK, {rlim_cur=8192*1024, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_CORE, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_RSS, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_NPROC, {rlim_cur=2048*1024, rlim_max=2048*1024}) = 0getrlimit(RLIMIT_NOFILE, {rlim_cur=10*1024, rlim_max=20*1024}) = 0getrlimit(RLIMIT_MEMLOCK, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_AS, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_LOCKS, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0getrlimit(RLIMIT_SIGPENDING, {rlim_cur=256736, rlim_max=256736}) = 0getrlimit(RLIMIT_MSGQUEUE, {rlim_cur=800*1024, rlim_max=800*1024}) = 0getrlimit(RLIMIT_NICE, {rlim_cur=0, rlim_max=0}) = 0getrlimit(RLIMIT_RTPRIO, {rlim_cur=0, rlim_max=0}) = 0getpriority(PRIO_PROCESS, 0)            = 20open("/etc/security/limits.conf", O_RDONLY) = 3 # 读取limits.conf配置fstat(3, {st_mode=S_IFREG|0644, st_size=1973, ...}) = 0mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f2b03deb000read(3, "# /etc/security/limits.conf\n#\n#E"..., 4096) = 1973read(3, "", 4096)                       = 0close(3)                                = 0munmap(0x7f2b03deb000, 4096)            = 0open("/etc/security/limits.d", O_RDONLY|O_NONBLOCK|O_DIRECTORY|O_CLOEXEC) = 3fcntl(3, F_GETFD)                       = 0x1 (flags FD_CLOEXEC)getdents(3, /* 2 entries */, 32768)     = 48open("/usr/lib64/gconv/gconv-modules.cache", O_RDONLY) = 4fstat(4, {st_mode=S_IFREG|0644, st_size=26060, ...}) = 0mmap(NULL, 26060, PROT_READ, MAP_SHARED, 4, 0) = 0x7f2b03de5000close(4)                                = 0futex(0x7f2b037b6f60, FUTEX_WAKE_PRIVATE, 2147483647) = 0 getdents(3, /* 0 entries */, 32768)     = 0close(3)                                = 0setrlimit(RLIMIT_CORE, {rlim_cur=RLIM_INFINITY, rlim_max=RLIM_INFINITY}) = 0  setrlimit(RLIMIT_NOFILE, {rlim_cur=150240, rlim_max=300240}) = -1 EPERM (Operation not permitted) # 设置nofile失败，返回权限不足，经查证setrlimit需要CAP_SYS_RESOURCE...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整理下执行su的流程</p><ol><li><p>进行pam认证，su配置文件在/etc/pam.d/su，更多pam信息可参考pam.d</p></li><li><p>根据文件内容逐行认证，下面是线上centos6基础镜像的配置</p><pre class="line-numbers language-sh"><code class="language-sh">#%PAM-1.0auth sufficient pam_rootok.so# Uncomment the following line to implicitly trust users in the "wheel" group.#auth sufficient pam_wheel.so trust use_uid# Uncomment the following line to require a user to be in the "wheel" group.#auth required pam_wheel.so use_uidauth include system-authaccount sufficient pam_succeed_if.so uid = 0 use_uid quietaccount include system-authpassword include system-authsession include system-auth #认证失败出现在这步session optional pam_xauth.so<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>system-auth 真实内容存放在 system-auth-ac，内容为<br><code>`</code>sh</p><h1 id="User-changes-will-be-destroyed-the-next-time-authconfig-is-run"><a href="#User-changes-will-be-destroyed-the-next-time-authconfig-is-run" class="headerlink" title="User changes will be destroyed the next time authconfig is run."></a>User changes will be destroyed the next time authconfig is run.</h1><p>auth required pam_env.so<br>auth sufficient pam_fprintd.so<br>auth sufficient pam_unix.so nullok try_first_pass<br>auth requisite pam_succeed_if.so uid &gt;= 500 quiet<br>auth required pam_deny.so</p></li></ol><p>account required pam_unix.so<br>account sufficient pam_localuser.so<br>account sufficient pam_succeed_if.so uid &lt; 500 quiet<br>account required pam_permit.so</p><p>password requisite pam_cracklib.so try_first_pass retry=3 type=<br>password sufficient pam_unix.so md5 shadow nullok try_first_pass use_authtok<br>password required pam_deny.so</p><p>session optional pam_keyinit.so revoke<br>session required pam_limits.so # limit 认证<br>session [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid<br>session required pam_unix.so<br><code>`</code></p><ol start="4"><li><p>system-auth调用pam_limit.so认证，并且类型为required，及若认证失败则继续执行最后返回失败信息</p></li><li><p>pam_limit会调用getrlimit获取当前ulimit信息，通过读取/etc/security/limits.conf，调用setrlimit设置ulimit，并且setrlimit有一定限制</p></li></ol><ul><li>任何进程可以将软限制改为小于或等于硬限制</li><li>任何进程都可以将硬限制降低，但普通用户降低了就无法提高，该值必须等于或大于软限制</li><li>只有超级用户（拥有CAP_SYS_RESOURCE权限）可以提高硬限制</li></ul><p>由于显示docker设置nofile最大hard限制为20480， 而/etc/security/limits.cof文件中为300240，在docker中root用户缺少<code>CAP_SYS_RESOURCE</code>，所以出现上述问题。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>由于limits.conf，以及pam.so等配置文件是镜像中的配置，解决冲突必须修改对应配置,有两种方式</p><ul><li>通过dolphin将对应limits.conf以及limits.d目录下有关nofile的配置删除</li><li>基础镜像修改limits.conf配置</li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s中fd与thread限制(一)</title>
      <link href="/k8s-limit-fd-and-thread1/"/>
      <url>/k8s-limit-fd-and-thread1/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>linux中为了防止进程恶意使用资源，系统使用ulimit来限制进程的资源使用情况（包括文件描述符，线程数，内存大小等）。同样地在容器化场景中，需要限制其系统资源的使用量。</p><h2 id="限制方法"><a href="#限制方法" class="headerlink" title="限制方法"></a>限制方法</h2><ul><li><strong>ulimit</strong>: docker 默认支持ulimit设置，可以在dockerd中配置 default-ulimits 可为宿主机所有容器配置默认的ulimit，docker启动时可添加 –ulimit 为每个容器配置ulimit会覆盖默认的设置；目前k8s暂不支持ulimit</li><li><strong>cgroup</strong>: docker 默认支持cgroup中内存、cpu、pid等的限制，对于线程限制可通过 –pids-limit 可限制每个容器的pid总数，dockerd暂无默认的pid limit设置；k8s 限制线程数，可通过在kubelet中开启SupportPodPidsLimit特性，设置pod级别pid limit</li><li><strong>/etc/securiy/limits.conf,systcl.confg</strong>: 通过ulimit命令设置只对当前登录用户有效，永久设置可通过limits.conf配置文件实现，以及系统级别限制可通过systcl.confg配置文件</li></ul><h2 id="实验对比"><a href="#实验对比" class="headerlink" title="实验对比"></a>实验对比</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><strong>本地环境</strong>：<br>os: Ubuntu 16.04.6 LTS 4.4.0-154-generic<br>docker: 18.09.7<br>base-image: alpine:v3.9</p><p><strong>k8s环境</strong>：<br>kubelet: v1.10.11.1<br>docker: 18.09.6</p><h3 id="ulimit"><a href="#ulimit" class="headerlink" title="ulimit"></a>ulimit</h3><p>用户级别资源限制，分为soft限制与hard限制</p><ul><li>soft ： 用户可修改，但不能超过硬限制</li><li>hard：只有root用户可修改</li></ul><p><strong>修改方式</strong>： ulimit命令，临时修改；/etc/security/limits.conf，永久修改</p><p><strong>工作原理</strong>： 根据 PAM （ Pluggable Authentication Modules 简称 PAM）机制，应用程序启动时，按 /etc/pam.d 配置加载 pam_xxxx.so 模块。 /etc/pam.d 下包含了 login 、sshd 、su 、sudo 等程序的 PAM 配置文件， 因此用户重新登录时，将调用 pam_limits.so 加载 limits.conf 配置文件</p><h4 id="文件描述符限制"><a href="#文件描述符限制" class="headerlink" title="文件描述符限制"></a>文件描述符限制</h4><pre><code>RLIMIT_NOFILE              This specifies a value one greater than the maximum file              descriptor number that can be opened by this process.              Attempts (open(2), pipe(2), dup(2), etc.)  to exceed this              limit yield the error EMFILE.  (Historically, this limit was              named RLIMIT_OFILE on BSD.)              Since Linux 4.5, this limit also defines the maximum number of              file descriptors that an unprivileged process (one without the              CAP_SYS_RESOURCE capability) may have &quot;in flight&quot; to other              processes, by being passed across UNIX domain sockets.  This              limit applies to the sendmsg(2) system call.  For further              details, see unix(7).</code></pre><p>根据定义，nofile 限制进程所能最多打开的文件数量，作用范围进程。</p><ol><li>设置 ulimit nofile限制soft 100/hard 200，默认启动为root用户<pre><code>$ docker run -d --ulimit nofile=100:200  cr.d.xiaomi.net/containercloud/alpine:webtool top</code></pre></li><li>进入容器查看， fd soft限制为100个<pre><code>/ # ulimit -a-f: file size (blocks)             unlimited-t: cpu time (seconds)             unlimited-d: data seg size (kb)             unlimited-s: stack size (kb)                8192-c: core file size (blocks)        unlimited-m: resident set size (kb)         unlimited-l: locked memory (kb)             64-p: processes                      unlimited-n: file descriptors               100-v: address space (kb)             unlimited-w: locks                          unlimited-e: scheduling priority            0-r: real-time priority             0</code></pre></li><li><p>使用ab测试，并发90个http请求，创建90个socket，正常运行</p><pre class="line-numbers language-bash"><code class="language-bash">/ <span class="token comment" spellcheck="true"># ab -n 1000000 -c 90 http://61.135.169.125:80/ &amp;</span>/ <span class="token comment" spellcheck="true"># lsof | wc -l </span>108/ <span class="token comment" spellcheck="true"># lsof | grep -c ab</span>94<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>并发100个http请求，受到ulimit限制</p><pre class="line-numbers language-bash"><code class="language-bash"> / <span class="token comment" spellcheck="true">#  ab -n 1000000 -c 100 http://61.135.169.125:80/</span> This is ApacheBench, Version 2.3 <span class="token operator">&lt;</span><span class="token variable">$Revision</span><span class="token keyword">:</span> 1843412 $<span class="token operator">></span> Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/ Licensed to The Apache Software Foundation, http://www.apache.org/ Benchmarking 61.135.169.125 <span class="token punctuation">(</span>be patient<span class="token punctuation">)</span> socket: No <span class="token function">file</span> descriptors available <span class="token punctuation">(</span>24<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="线程限制"><a href="#线程限制" class="headerlink" title="线程限制"></a>线程限制</h4><pre><code>RLIMIT_NPROC              This is a limit on the number of extant process (or, more pre‐              cisely on Linux, threads) for the real user ID of the calling              process.  So long as the current number of processes belonging              to this process&#39;s real user ID is greater than or equal to              this limit, fork(2) fails with the error EAGAIN.              The RLIMIT_NPROC limit is not enforced for processes that have              either the CAP_SYS_ADMIN or the CAP_SYS_RESOURCE capability.</code></pre><p>由定义可知，nproc进程限制的范围是对于每个uid，并且对于root用户无效。</p><h5 id="容器uid"><a href="#容器uid" class="headerlink" title="容器uid"></a>容器uid</h5><p>同一主机上运行的所有容器共享同一个内核(主机的内核)，docker通过namspace对pid/utc/network等进行了隔离，虽然docker中已经实现了user namespace，但由于各种原因，默认没有开启，见<a href="https://docs.docker.com/engine/security/userns-remap/" target="_blank" rel="noopener">docker user namespace</a></p><pre><code>$ docker run -d  cr.d.xiaomi.net/containercloud/alpine:webtool top</code></pre><p>宿主机中查看top进程，显示root用户</p><pre><code>$ ps -ef |grep toproot      4096  4080  0 15:01 ?        00:00:01 top</code></pre><p>容器中查看id，uid为0对应宿主机的root用户,虽然同为root用户，但Linux Capabilities不同，实际权限与宿主机root要少很多</p><p>在容器中切换用户到operator(uid为11)，执行sleep命令，主机中查看对应进程用户为app，对应uid同样为11</p><pre><code>/ # iduid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)/ # su operator/ $ iduid=11(operator) gid=0(root) groups=0(root)/ $ sleep 100$ ps -ef |grep &#39;sleep 100&#39;app      19302 19297  0 16:39 pts/0    00:00:00 sleep 100$ cat /etc/passwd | grep appapp:x:11:0::/home/app:</code></pre><h5 id="验证不同用户下ulimit的限制"><a href="#验证不同用户下ulimit的限制" class="headerlink" title="验证不同用户下ulimit的限制"></a>验证不同用户下ulimit的限制</h5><p>设置 ulimit nproc限制soft 10/hard 20，默认启动为root用户</p><pre><code>$ docker run -d --ulimit nproc=10:20  cr.d.xiaomi.net/containercloud/alpine:webtool top</code></pre><p>进入容器查看， fd soft限制为100个</p><pre><code>/ # ulimit -a-f: file size (blocks)             unlimited-t: cpu time (seconds)             unlimited-d: data seg size (kb)             unlimited-s: stack size (kb)                8192-c: core file size (blocks)        unlimited-m: resident set size (kb)         unlimited-l: locked memory (kb)             64-p: processes                      10-n: file descriptors               1048576-v: address space (kb)             unlimited-w: locks                          unlimited-e: scheduling priority            0-r: real-time priority             0</code></pre><p>启动30个进程</p><pre><code>/ # for i in `seq 30`;do sleep 100 &amp;; done/ # ps | wc -l 36</code></pre><p>切换到operator用户</p><pre><code>/ # su operator# 启动多个进程，到第11个进程无法进行fork/ $ for i in `seq 8`; do&gt; sleep 100 &amp;&gt; done/ $ sleep 100 &amp;/ $ sleep 100 &amp;sh: can&#39;t fork: Resource temporarily unavailable</code></pre><p>root下查看</p><pre><code>/ # ps -ef | grep operator   79 operator  0:00 sh   99 operator  0:00 sleep 100  100 operator  0:00 sleep 100  101 operator  0:00 sleep 100  102 operator  0:00 sleep 100  103 operator  0:00 sleep 100  104 operator  0:00 sleep 100  105 operator  0:00 sleep 100  106 operator  0:00 sleep 100  107 operator  0:00 sleep 100  109 root      0:00 grep operator/ # ps -ef | grep operator| wc -l10</code></pre><h5 id="验证ulimit在不同容器相同uid下的限制"><a href="#验证ulimit在不同容器相同uid下的限制" class="headerlink" title="验证ulimit在不同容器相同uid下的限制"></a>验证ulimit在不同容器相同uid下的限制</h5><p>设置 ulimit nproc限制soft 3/hard 3，默认启动为operator用户,起4个容器，第四个启动失败</p><pre><code>$ docker run -d --ulimit nproc=3:3 --name nproc1 -u operator  cr.d.xiaomi.net/containercloud/alpine:webtool topeeb1551bf757ad4f112c61cc48d7cbe959185f65109e4b44f28085f246043e65$ docker run -d --ulimit nproc=3:3 --name nproc2 -u operator  cr.d.xiaomi.net/containercloud/alpine:webtool top42ff29844565a9cb3af2c8dd560308b1f31306041d3dbd929011d65f1848a262$ docker run -d --ulimit nproc=3:3 --name nproc3 -u operator  cr.d.xiaomi.net/containercloud/alpine:webtool topb7c9b469e73f969d922841dd77265467959eda28ed06301af8bf83bcf18e8c23$ docker run -d --ulimit nproc=3:3 --name nproc4 -u operator  cr.d.xiaomi.net/containercloud/alpine:webtool topb49d8bb58757c88f69903059af2ee7e2a6cc2fa5774bc531941194c52edfd763$$ docker ps -a |grep nprocb49d8bb58757        cr.d.xiaomi.net/containercloud/alpine:webtool      &quot;top&quot;                    16 seconds ago      Exited (1) 15 seconds ago                               nproc4b7c9b469e73f        cr.d.xiaomi.net/containercloud/alpine:webtool      &quot;top&quot;                    23 seconds ago      Up 22 seconds                                           nproc342ff29844565        cr.d.xiaomi.net/containercloud/alpine:webtool      &quot;top&quot;                    31 seconds ago      Up 29 seconds                                           nproc2eeb1551bf757        cr.d.xiaomi.net/containercloud/alpine:webtool      &quot;top&quot;                    38 seconds ago      Up 36 seconds                                           nproc1</code></pre><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul><li>ulimit限制fd总数，限制级别进程，可对所有用户生效</li><li>ulimit限制线程总数，限制级别用户（uid)，限制同一个uid下所有线程/进程数，对于root账号无效</li><li>对于目前线上情况，有较小的概率因ulimit限制导致fork失败，如同一个宿主机中有多个work容器且基础镜像相同（即uid相同），若一个容器线程泄露，由于ulimit限制会影响其他容器正常运行</li></ul><h3 id="cgroup"><a href="#cgroup" class="headerlink" title="cgroup"></a>cgroup</h3><p>cgroup中对pid进行了隔离，通过更改docker/kubelet配置，可以限制pid总数，从而达到限制线程总数的目的。线程数限制与系统中多处配置有关，取最小值，参考<a href="https://stackoverflow.com/questions/34452302/how-to-increase-maximum-number-of-jvm-threads-linux-64bit" target="_blank" rel="noopener">stackoverflow上线程数的设置</a></p><ul><li>docker，容器启动时设置 –pids-limit 参数，限制容器级别pid总数</li><li>kubelet，开启SupportPodPidsLimit特性，设置–pod-max-pids参数，限制node每个pod的pid总数</li></ul><p>以kubelet为例，开启SupportPodPidsLimit，<code>--feature-gates=SupportPodPidsLimit=true</code></p><ol><li><p>配置kubelet，每个pod允许最大pid数目为150</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@node01 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef |grep kubelet</span>root     18735     1 14 11:19 ?        00:53:28 ./kubelet --v<span class="token operator">=</span>1 --address<span class="token operator">=</span>0.0.0.0 --feature-gates<span class="token operator">=</span>SupportPodPidsLimit<span class="token operator">=</span>true --pod-max-pids<span class="token operator">=</span>150 --allow-privileged<span class="token operator">=</span>true --pod-infra-container-image<span class="token operator">=</span>cr.d.xiaomi.net/kubernetes/pause-amd64:3.1 --root-dir<span class="token operator">=</span>/home/kubelet --node-status-update-frequency<span class="token operator">=</span>5s --kubeconfig<span class="token operator">=</span>/home/xbox/kubelet/conf/kubelet-kubeconfig --fail-swap-on<span class="token operator">=</span>false --max-pods<span class="token operator">=</span>254 --runtime-cgroups<span class="token operator">=</span>/systemd/system.slice/frigga.service --kubelet-cgroups<span class="token operator">=</span>/systemd/system.slice/frigga.service --make-iptables-util-chains<span class="token operator">=</span>false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在pod中起测试线程，root下起100个线程</p><pre><code>/ # for i in `seq 100`; do&gt; sleep 1000 &amp;&gt; done/ # ps | wc -l106</code></pre></li><li><p>operator 下，创建线程受到限制，系统最多只能创建150个</p><pre><code>/ # su operator/ $ / $ for i in `seq 100`; do&gt; sleep 1000 &amp;&gt; donesh: can&#39;t fork: Resource temporarily unavailable/ $ ps | wc -l150</code></pre></li><li><p>在cgroup中查看，pids达到最大限制</p><pre><code>[root@node01 ~]# cat /sys/fs/cgroup/pids/kubepods/besteffort/pod8b61d4de-a7ad-11e9-b5b9-246e96ad0900/pids.current 150[root@node01 ~]# cat /sys/fs/cgroup/pids/kubepods/besteffort/pod8b61d4de-a7ad-11e9-b5b9-246e96ad0900/pids.max 150</code></pre></li><li><p>总结<br>cgroup对于pid的限制能够达到限制线程数目的，目前docker只支持对每个容器的限制，不支持全局配置；kubelet只支持对于node所有pod的全局配置，不支持具体每个pod的配置</p></li></ol><h3 id="limits-conf-sysctl-conf"><a href="#limits-conf-sysctl-conf" class="headerlink" title="limits.conf/sysctl.conf"></a>limits.conf/sysctl.conf</h3><p>limits.conf是ulimit的具体配置，目录项/etc/security/limit.d/中的配置会覆盖limits.conf。</p><p>sysctl.conf为机器级别的资源限制，root用户可修改，目录项/etc/security/sysctl.d/中的配置会覆盖sysctl.conf，在/etc/sysctl.conf中添加对应配置（fd: fs.file-max = {}; pid: kernel.pid_max = {}）</p><ol><li><p>测试容器中修改sysctl.conf文件</p><pre><code> $ docker run -d --ulimit nofile=100:200 cr.d.xiaomi.net/containercloud/alpine:webtool top cb1250c8fd217258da51c6818fa2ce2e2f6e35bf1d52648f1f432e6ce579cf0d $ docker exec -it cb1250c sh / # ulimit -a -f: file size (blocks)             unlimited -t: cpu time (seconds)             unlimited -d: data seg size (kb)             unlimited -s: stack size (kb)                8192 -c: core file size (blocks)        unlimited -m: resident set size (kb)         unlimited -l: locked memory (kb)             64 -p: processes                      unlimited -n: file descriptors               100 -v: address space (kb)             unlimited -w: locks                          unlimited -e: scheduling priority            0 -r: real-time priority             0 / #  / # echo 10 &gt; /proc/sys/kernel/pid_max sh: can&#39;t create /proc/sys/kernel/pid_max: Read-only file system / # echo 10 &gt; /proc/sys/kernel/pid_max sh: can&#39;t create /proc/sys/kernel/pid_max: Read-only file system / # echo &quot;fs.file-max=5&quot; &gt;&gt; /etc/sysctl.conf / # sysctl -p sysctl: error setting key &#39;fs.file-max&#39;: Read-only file system</code></pre></li><li><p>以priviledged模式测试，谨慎测试</p><pre><code> $ cat /proc/sys/kernel/pid_max 32768 $ docker run -d -- --ulimit nofile=100:200 cr.d.xiaomi.net/containercloud/alpine:webtool top $ docker exec -it pedantic_vaughan sh / # cat /proc/sys/kernel/pid_max 32768 / # echo 50000 &gt; /proc/sys/kernel/pid_max / # cat /proc/sys/kernel/pid_max 50000 / # exit $ cat /proc/sys/kernel/pid_max 50000 # 宿主机的文件也变成50000</code></pre></li><li><p>总结<br>由于docker隔离的不彻底，在docker中修改sysctl会覆盖主机中的配置，不能用来实现容器级别资源限制<br>limits.conf可以在容器中设置，效果同ulimit</p></li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><img src="/img/blogImg/pod-fd-limit.png" alt="pod-fd-limit"></p><p>推荐方案如下：</p><ul><li>fd限制： 修改dockerd配置<code>default-ulimits</code>，限制进程级别fd</li><li>thread限制：修改kubelet配置<code>--feature-gates=SupportPodPidsLimit=true --pod-max-pids={}</code>，cgroup级别限制pid，从而限制线程数</li><li>其他注意事项，调整节点pid.max参数；放开或者调大镜像中ulimit对非root账户nproc限制</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit" target="_blank" rel="noopener">https://docs.docker.com/engine/reference/commandline/run/#set-ulimits-in-container---ulimit</a></li><li><a href="http://man7.org/linux/man-pages/man2/getrlimit.2.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man2/getrlimit.2.html</a></li><li><a href="https://feichashao.com/ulimit_demo/" target="_blank" rel="noopener">https://feichashao.com/ulimit_demo/</a></li><li><a href="https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf" target="_blank" rel="noopener">https://medium.com/@mccode/understanding-how-uid-and-gid-work-in-docker-containers-c37a01d01cf</a></li><li><a href="https://docs.docker.com/engine/security/userns-remap/" target="_blank" rel="noopener">https://docs.docker.com/engine/security/userns-remap/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>容器内存分析</title>
      <link href="/container-memory/"/>
      <url>/container-memory/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在容器化环境中，平台需要提供准确的业务监控指标，已方便业务查看。那么如何准确计算容器或Pod的内存使用率，k8s/docker又是如何计算，本文通过实验与源码阅读相结合来分析容器的内存实际使用量。</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>不管docker还是k8s(通过cadvisor)最终都通过cgroup的memory group来得到内存的原始文件，memory相关的主要文件如下:</p><pre><code>cgroup.event_control       #用于eventfd的接口memory.usage_in_bytes      #显示当前已用的内存memory.limit_in_bytes      #设置/显示当前限制的内存额度memory.failcnt             #显示内存使用量达到限制值的次数memory.max_usage_in_bytes  #历史内存最大使用量memory.soft_limit_in_bytes #设置/显示当前限制的内存软额度memory.stat                #显示当前cgroup的内存使用情况memory.use_hierarchy       #设置/显示是否将子cgroup的内存使用情况统计到当前cgroup里面memory.force_empty         #触发系统立即尽可能的回收当前cgroup中可以回收的内存memory.pressure_level      #设置内存压力的通知事件，配合cgroup.event_control一起使用memory.swappiness          #设置和显示当前的swappinessmemory.move_charge_at_immigrate #设置当进程移动到其他cgroup中时，它所占用的内存是否也随着移动过去memory.oom_control         #设置/显示oom controls相关的配置memory.numa_stat           #显示numa相关的内存</code></pre><p>更多信息可参考<a href="https://qingwave.github.io/2018/11/15/Pod-memory-usage-in-k8s/#Cadvisor%E4%B8%AD%E6%9C%89%E5%85%B3pod%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E7%8E%87%E7%9A%84%E6%8C%87%E6%A0%87" target="_blank" rel="noopener">Pod memory usage in k8s</a></p><h2 id="查看源码"><a href="#查看源码" class="headerlink" title="查看源码"></a>查看源码</h2><h3 id="docker-stat"><a href="#docker-stat" class="headerlink" title="docker stat"></a>docker stat</h3><p>docker stat的源码在<a href="https://github.com/docker/cli/blob/37f9a88c696ae81be14c1697bd083d6421b4933c/cli/command/container/stats_helpers.go#L233" target="_blank" rel="noopener">stats_helpers.go</a>,如下：</p><pre class="line-numbers language-golang"><code class="language-golang">func calculateMemUsageUnixNoCache(mem types.MemoryStats) float64 {    return float64(mem.Usage - mem.Stats["cache"])}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>内存使用量为<code>memory.usage=memory.usage_in_bytes-cache</code></p><h3 id="kubectl-top"><a href="#kubectl-top" class="headerlink" title="kubectl top"></a>kubectl top</h3><p>在k8s中，<code>kubectl top</code>命令通过<code>metric-server/heapster</code>获取cadvisor中<code>working_set</code>的值，来表示Pod实例使用内存大小(不包括pause),metrics-server 中<a href="https://github.com/kubernetes-sigs/metrics-server/blob/d4432d67b2fc435b9c71a89c13659882008a4c54/pkg/sources/summary/summary.go#L206" target="_blank" rel="noopener">pod内存</a>获取如下：</p><pre class="line-numbers language-golang"><code class="language-golang">func decodeMemory(target *resource.Quantity, memStats *stats.MemoryStats) error {    if memStats == nil || memStats.WorkingSetBytes == nil {        return fmt.Errorf("missing memory usage metric")    }    *target = *uint64Quantity(*memStats.WorkingSetBytes, 0)    target.Format = resource.BinarySI    return nil}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>cadvisor中<a href="https://github.com/google/cadvisor/blob/0ff17b8d0df3712923c46ca484701b876d02dfee/container/libcontainer/handler.go#L706" target="_blank" rel="noopener">working_set</a>计算如下：</p><pre class="line-numbers language-golang"><code class="language-golang">func setMemoryStats(s *cgroups.Stats, ret *info.ContainerStats) {    ret.Memory.Usage = s.MemoryStats.Usage.Usage    ret.Memory.MaxUsage = s.MemoryStats.Usage.MaxUsage    ret.Memory.Failcnt = s.MemoryStats.Usage.Failcnt    if s.MemoryStats.UseHierarchy {        ret.Memory.Cache = s.MemoryStats.Stats["total_cache"]        ret.Memory.RSS = s.MemoryStats.Stats["total_rss"]        ret.Memory.Swap = s.MemoryStats.Stats["total_swap"]        ret.Memory.MappedFile = s.MemoryStats.Stats["total_mapped_file"]    } else {        ret.Memory.Cache = s.MemoryStats.Stats["cache"]        ret.Memory.RSS = s.MemoryStats.Stats["rss"]        ret.Memory.Swap = s.MemoryStats.Stats["swap"]        ret.Memory.MappedFile = s.MemoryStats.Stats["mapped_file"]    }    if v, ok := s.MemoryStats.Stats["pgfault"]; ok {        ret.Memory.ContainerData.Pgfault = v        ret.Memory.HierarchicalData.Pgfault = v    }    if v, ok := s.MemoryStats.Stats["pgmajfault"]; ok {        ret.Memory.ContainerData.Pgmajfault = v        ret.Memory.HierarchicalData.Pgmajfault = v    }    workingSet := ret.Memory.Usage    if v, ok := s.MemoryStats.Stats["total_inactive_file"]; ok {        if workingSet < v {            workingSet = 0        } else {            workingSet -= v        }    }    ret.Memory.WorkingSet = workingSet}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>working_set=memory.usage_in_bytes-total_inactive_file (&gt;=0)</code><br>在kubelet中节点内存不足时同样以<code>working_set</code>判断pod是否OOM的标准</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol><li>创建Pod<br>Pod的资源申请如下：<pre class="line-numbers language-yaml"><code class="language-yaml">     <span class="token key atrule">resources</span><span class="token punctuation">:</span>       <span class="token key atrule">limits</span><span class="token punctuation">:</span>         <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"1"</span>         <span class="token key atrule">memory</span><span class="token punctuation">:</span> 1Gi       <span class="token key atrule">requests</span><span class="token punctuation">:</span>         <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token string">"0"</span>         <span class="token key atrule">memory</span><span class="token punctuation">:</span> <span class="token string">"0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>查看cgroup内存情况<br>找到容器某个进程，查看memory cgroup<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cat /proc/16062/cgroup </span><span class="token punctuation">..</span>.8:memory:/kubepods.slice/kubepods-burstable.slice/kubepods-burstable-pod21a55da5_f9f8_11e9_b051_fa163e7e981a.slice/docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>进入容器memory cgroup对应的目录<pre><code>docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope]# lscgroup.clone_children  memory.kmem.failcnt             memory.kmem.tcp.limit_in_bytes      memory.max_usage_in_bytes        memory.move_charge_at_immigrate  memory.stat            taskscgroup.event_control   memory.kmem.limit_in_bytes      memory.kmem.tcp.max_usage_in_bytes  memory.memsw.failcnt             memory.numa_stat                 memory.swappinesscgroup.procs           memory.kmem.max_usage_in_bytes  memory.kmem.tcp.usage_in_bytes      memory.memsw.limit_in_bytes      memory.oom_control               memory.usage_in_bytesmemory.failcnt         memory.kmem.slabinfo            memory.kmem.usage_in_bytes          memory.memsw.max_usage_in_bytes  memory.pressure_level            memory.use_hierarchymemory.force_empty     memory.kmem.tcp.failcnt         memory.limit_in_bytes               memory.memsw.usage_in_bytes      memory.soft_limit_in_bytes       notify_on_release</code></pre>查看主要memory文件<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># cat memory.limit_in_bytes (容器memory limit值，即1Gi)</span>1073741824<span class="token punctuation">[</span>root@node01 docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat memory.kmem.limit_in_bytes (容器内核使用memory limit值)</span>9223372036854771712<span class="token punctuation">[</span>root@node01 docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># </span><span class="token punctuation">[</span>root@node01 docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat memory.soft_limit_in_bytes</span>9223372036854771712<span class="token punctuation">[</span>docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat notify_on_release</span>0<span class="token punctuation">[</span>docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat memory.oom_control </span>oom_kill_disable 0under_oom 0oom_kill 0<span class="token punctuation">[</span>docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat memory.usage_in_bytes </span>2265088<span class="token punctuation">[</span>docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat memory.kmem.usage_in_bytes </span>901120<span class="token punctuation">[</span>docker-57ba1991ab4ba50a9b2eaf5bf90e2c20073198d767653becf77d55ee25e1a6f9.scope<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat memory.stat </span>cache 12288rss 1351680rss_huge 0shmem 4096mapped_file 4096dirty 0writeback 0swap 0pgpgin 4544pgpgout 4211pgfault 1948pgmajfault 0inactive_anon 4096active_anon 1351680inactive_file 8192active_file 0unevictable 0hierarchical_memory_limit 1073741824hierarchical_memsw_limit 1073741824total_cache 12288total_rss 1351680total_rss_huge 0total_shmem 4096total_mapped_file 4096total_dirty 0total_writeback 0total_swap 0total_pgpgin 4544total_pgpgout 4211total_pgfault 1948total_pgmajfault 0total_inactive_anon 4096total_active_anon 1351680total_inactive_file 8192total_active_file 0total_unevictable 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>根据memory可得到如下关系：<br><code>memory.usage_in_bytes = memory.kmem.usage_in_bytes + rss + cache</code><br>即2265088=901120+1351680+12288</li></ol><p>那么容器的真实内存即：<br><code>memory.usage=memory.usage_in_bytes-cache</code><br>即<code>rss+kmem_usage</code></p><p>通过<code>docker stat</code>查看，与公式相符合</p><pre><code>CONTAINER ID        NAME                                                                                     CPU %               MEM USAGE / LIMIT   MEM %               NET I/O             BLOCK I/O           PIDS57ba1991ab4b        k8s...default_21a55da5-f9f8-11e9-b051-fa163e7e981a_0   0.00%               2.148MiB / 1GiB     0.21%               12MB / 68.8MB       0B / 0B             2</code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>实际环境中，docker与k8s两种内存表示方式不同，一般<code>docker stat</code>总体值会小于<code>kubectl top</code></p><ul><li>docker中内存表示为：<br><code>memory.usage = memory.usage_in_bytes - cache</code></li><li>k8s中：<br><code>memory.usage = working_set = memory.usage_in_bytes - total_inactive_file (&gt;=0)</code><br>根据cgroup memory关系有：<br><code>memory.usage_in_bytes = memory.kmem.usage_in_bytes + rss + cache</code></li></ul><p>真实环境中两种表示相差不大，但更推荐使用<code>working_set</code>作为容器内存真实使用量(kubelt判断OOM的依据)，<br>则容器内存使用率可表示为：<br><code>container_memory_working_set_bytes / memory.limit_in_bytes</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt" target="_blank" rel="noopener">https://www.kernel.org/doc/Documentation/cgroup-v1/memory.txt</a></li><li><a href="https://medium.com/@zhimin.wen/memory-limit-of-pod-and-oom-killer-891ee1f1cad8" target="_blank" rel="noopener">https://medium.com/@zhimin.wen/memory-limit-of-pod-and-oom-killer-891ee1f1cad8</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> cgroup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s与docker组件堆栈及Debug</title>
      <link href="/k8s-docker-stack/"/>
      <url>/k8s-docker-stack/</url>
      
        <content type="html"><![CDATA[<p>k8s组件日志级别热更新</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 调整日志级别到3</span>curl -X PUT http://127.0.0.1:8081/debug/flags/v -d <span class="token string">"3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>controller manager</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://localhost:10252/debug/pprof/profile<span class="token function">wget</span> http://localhost:10252/debug/pprof/heapcurl http://127.0.0.1:10252/debug/pprof/goroutine?debug<span class="token operator">=</span>1 <span class="token operator">>></span> debug1curl http://127.0.0.1:10252/debug/pprof/goroutine?debug<span class="token operator">=</span>2 <span class="token operator">>></span> debug2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>scheduler</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">kill</span> -12 <span class="token variable">${SCHED_PID}</span>获取scheduler cache信息，输出到日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>kubelet 堆栈信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">wget</span> http://localhost:10250/debug/pprof/profile<span class="token function">wget</span> http://localhost:10250/debug/pprof/heapcurl http://127.0.0.1:10250/debug/pprof/goroutine?debug<span class="token operator">=</span>1 <span class="token operator">>></span> debug1curl http://127.0.0.1:10250/debug/pprof/goroutine?debug<span class="token operator">=</span>2 <span class="token operator">>></span> debug2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>docker 堆栈信息</p><pre class="line-numbers language-bash"><code class="language-bash">curl --unix-socket /var/run/docker.sock -X GET http://v1.2/debug/pprof/profilecurl --unix-socket /var/run/docker.sock -X GET http://v1.2/debug/pprof/curl --unix-socket /var/run/docker.sock -X GET http://v1.2/debug/pprof/<span class="token function">sudo</span> <span class="token function">kill</span> -SIGUSR1 <span class="token variable"><span class="token variable">$(</span>pidof dockerd<span class="token variable">)</span></span>/var/run/docker/curl --unix-socket /var/run/docker.sock -X GET http://v1.2/debug/pprof/profile <span class="token operator">>></span>docker.profilecurl --unix-socket /var/run/docker.sock -X GET http://v1.2/debug/pprof/goroutine <span class="token operator">>></span> docker.goroutinecurl --unix-socket /var/run/docker.sock -X GET http://v1.2/debug/pprof/goroutine?debug<span class="token operator">=</span>2 <span class="token operator">>></span>docker.gorouting_debug_2curl --unix-socket /var/run/docker.sock -X GET http://v1.2/debug/pprof/heap?debug<span class="token operator">=</span>2 <span class="token operator">>></span>docker.heap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>docker-registry 堆栈信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#先登入机器,然后执行</span><span class="token function">wget</span> localhost:5002/debug/pprof/profile <span class="token comment" spellcheck="true">#这个是cpu占用时间的采样结果，要先等30s</span><span class="token function">wget</span> localhost:5002/debug/pprof/heap <span class="token comment" spellcheck="true">#内存的使用情况</span><span class="token function">wget</span> localhost:5002/debug/pprof/goroutine?debug<span class="token operator">=</span>2 <span class="token comment" spellcheck="true">#调用栈的全部信息</span><span class="token function">wget</span> localhost:5002/debug/pprof/goroutine其他可用的profile:allocs block goroutine cmdline mutex threadcreate trace，替换上面命令pprof/后面的词即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> pprof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openssl常用命令</title>
      <link href="/openssl-cmd/"/>
      <url>/openssl-cmd/</url>
      
        <content type="html"><![CDATA[<h3 id="输出x509证书信息"><a href="#输出x509证书信息" class="headerlink" title="输出x509证书信息"></a>输出x509证书信息</h3><pre class="line-numbers language-bash"><code class="language-bash">openssl x509 -noout -text  -in ca.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下</p><pre class="line-numbers language-bash"><code class="language-bash">Certificate:    Data:        Version: 3 <span class="token punctuation">(</span>0x2<span class="token punctuation">)</span>        Serial Number:            5f:11:aa:b3:70:18:fd:89:b0:25:7a:9e:36:c5:e7:ce:33:5a:cc:b7    Signature Algorithm: sha256WithRSAEncryption        Issuer: C<span class="token operator">=</span>CN, ST<span class="token operator">=</span>BeiJing, L<span class="token operator">=</span>BeiJing, O<span class="token operator">=</span>xx, OU<span class="token operator">=</span>xx, CN<span class="token operator">=</span>xx        Validity            Not Before: Dec 26 06:17:00 2019 GMT            Not After <span class="token keyword">:</span> Dec  2 06:17:00 2119 GMT <span class="token comment" spellcheck="true">#过期时间</span>        Subject: C<span class="token operator">=</span>CN, ST<span class="token operator">=</span>BeiJing, L<span class="token operator">=</span>BeiJing, O<span class="token operator">=</span>xx, OU<span class="token operator">=</span>xx, CN<span class="token operator">=</span>xx        Subject Public Key Info:        <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证公钥私钥是否匹配"><a href="#验证公钥私钥是否匹配" class="headerlink" title="验证公钥私钥是否匹配"></a>验证公钥私钥是否匹配</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">diff</span> -eq <span class="token operator">&lt;</span><span class="token punctuation">(</span>openssl x509 -pubkey -noout -in cert.crt<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>openssl rsa -pubout -in cert.key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常会输出</p><pre class="line-numbers language-bash"><code class="language-bash">writing RSA key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="验证证书CA"><a href="#验证证书CA" class="headerlink" title="验证证书CA"></a>验证证书CA</h3><pre class="line-numbers language-bash"><code class="language-bash">openssl verify -CAfile ca.pem client.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正常输出</p><pre class="line-numbers language-bash"><code class="language-bash">client.pem: OK<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus分区实践</title>
      <link href="/prometheus-federation/"/>
      <url>/prometheus-federation/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>单个Prometheus Server可以轻松的处理数以百万的时间序列。但当机器规模过大时，需要对其进行分区，Prometheus也提供了集群联邦的功能，方便对其扩展。</p><p>我们采用Prometheus来监控k8s集群，节点数400，采集的samples是280w，Prometheus官方的显示每秒可抓取10w samples。当集群规模扩大到上千节点时，单个Prometheus不足以处理大量数据，需要对其进行分区。</p><blockquote><p>可以根据<code>scrape_samples_scraped{job=${JOBNAME}}</code>来统计各个job的samples数目<br>可以根据<code>count({__name__=~&quot;.*:.*&quot;})</code>来统计metrics总数</p></blockquote><h2 id="集群联邦"><a href="#集群联邦" class="headerlink" title="集群联邦"></a>集群联邦</h2><p>在Promehtues的源码中，<code>federate</code>联邦功能在<code>web</code>中，是一个特殊的查询接口，允许一个prometheus抓取另一个prometheus的metrics</p><p>可以通过全局的prometheus抓取其他slave prometheus从而达到分区的目的<br><img src="/img/blogImg/federate1.png" alt="federate"></p><p>使用federate进行分区通过有两种方式</p><h3 id="功能分区"><a href="#功能分区" class="headerlink" title="功能分区"></a>功能分区</h3><p>每个模块为一个分区，如node-exporter为一个分区，kube-state-metrics为一个分区，再使用全局的Prometheus汇总<br><img src="/img/blogImg/federate2.png" alt="federate by job"></p><p>实现简单，但当单个job采集任务过大（如node-exporter）时，单个Prometheus slave也会成为瓶颈</p><h3 id="水平扩展"><a href="#水平扩展" class="headerlink" title="水平扩展"></a>水平扩展</h3><p>针对功能分区的不足，将同一任务的不同实例的监控数据采集任务划分到不同的Prometheus实例。通过relabel设置，我们可以确保当前Prometheus Server只收集当前采集任务的一部分实例的监控指标。<br><img src="/img/blogImg/federate3.png" alt="federate by modulus"></p><p>下为官方提供的配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">external_labels</span><span class="token punctuation">:</span>    <span class="token key atrule">slave</span><span class="token punctuation">:</span> <span class="token number">1  </span><span class="token comment" spellcheck="true"># This is the 2nd slave. This prevents clashes between slaves.</span><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> some_job    <span class="token comment" spellcheck="true"># Add usual service discovery here, such as static_configs</span>    <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__address__<span class="token punctuation">]</span>      <span class="token key atrule">modulus</span><span class="token punctuation">:</span>       <span class="token number">4    </span><span class="token comment" spellcheck="true"># 4 slaves</span>      <span class="token key atrule">target_label</span><span class="token punctuation">:</span>  __tmp_hash      <span class="token key atrule">action</span><span class="token punctuation">:</span>        hashmod    <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__tmp_hash<span class="token punctuation">]</span>      <span class="token key atrule">regex</span><span class="token punctuation">:</span>         ^1$  <span class="token comment" spellcheck="true"># This is the 2nd slave</span>      <span class="token key atrule">action</span><span class="token punctuation">:</span>        keep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且通过当前数据中心的一个中心Prometheus Server将监控数据进行聚合到任务级别。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">scrape_config</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> slaves    <span class="token key atrule">honor_labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> /federate    <span class="token key atrule">params</span><span class="token punctuation">:</span>      match<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">'{__name__=~"^slave:.*"}'</span>   <span class="token comment" spellcheck="true"># Request all slave-level time series</span>    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> slave0<span class="token punctuation">:</span><span class="token number">9090</span>        <span class="token punctuation">-</span> slave1<span class="token punctuation">:</span><span class="token number">9090</span>        <span class="token punctuation">-</span> slave3<span class="token punctuation">:</span><span class="token number">9090</span>        <span class="token punctuation">-</span> slave4<span class="token punctuation">:</span><span class="token number">9090</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>水平扩展，即通过联邦集群的特性在任务的实例级别对Prometheus采集任务进行划分，以支持规模的扩展。</p><h2 id="我们的方案"><a href="#我们的方案" class="headerlink" title="我们的方案"></a>我们的方案</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h3><ul><li>Promehtues以容器化的方式部署在k8s集群中</li><li>收集node-exporter、cadvisor、kubelet、kube-state-metrics、k8s核心组件、自定义metrics</li><li>通过实现opentsdb-adapter，对监控数据做持久化</li><li>通过falcon-adapter,为监控数据提供报警<br><img src="/img/blogImg/Promehtues-arch.png" alt="monitor"></li></ul><h3 id="分区方案"><a href="#分区方案" class="headerlink" title="分区方案"></a>分区方案</h3><ul><li>Prometheus分区包括master Prometheus 与 slave Promehtues</li><li>我们将监控数据分为多个层次: cluster, namespace, deployment/daemonset, pod, node</li><li>由于kubelet, node-exporter, cadvisor等是以node为单位采集的，所以安装node节点来划分不同job</li><li>slave Prometheus 按照node切片采集node，pod级别数据</li><li>kube-state-metrics暂时无法切片，可通过replicaset 设置多个，单独作为一个kube-state Prometheus，供其他slave Prometheus采集</li><li>其他etcd, apiserver等自定义组件可通过master Promehtues直接采集</li></ul><p>整体架构如下<br><img src="/img/blogImg/federate-plan.png" alt="federate-plan"></p><p>master Prometheus配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 60s  <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> 30s  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 60s  <span class="token key atrule">external_labels</span><span class="token punctuation">:</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>CLUSTER<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">production_environment</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>ENV<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span><span class="token punctuation">-</span> cluster.yml<span class="token punctuation">-</span> namespace.yml<span class="token punctuation">-</span> deployment.yml<span class="token punctuation">-</span> daemonset.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> federate<span class="token punctuation">-</span>slave  <span class="token key atrule">honor_labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> <span class="token string">'/federate'</span>  <span class="token key atrule">params</span><span class="token punctuation">:</span>    'match<span class="token punctuation">[</span><span class="token punctuation">]</span>'<span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'{__name__=~"pod:.*|node:.*"}'</span>  <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> pod    <span class="token key atrule">namespaces</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> __meta_kubernetes_pod_label_app    <span class="token key atrule">action</span><span class="token punctuation">:</span> keep    <span class="token key atrule">regex</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>slave.*  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> __meta_kubernetes_pod_container_port_number    <span class="token key atrule">action</span><span class="token punctuation">:</span> keep    <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token number">9090</span><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> federate<span class="token punctuation">-</span>kubestate  <span class="token key atrule">honor_labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> <span class="token string">'/federate'</span>  <span class="token key atrule">params</span><span class="token punctuation">:</span>    'match<span class="token punctuation">[</span><span class="token punctuation">]</span>'<span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'{__name__=~"deployment:.*|daemonset:.*"}'</span>  <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> pod    <span class="token key atrule">namespaces</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> __meta_kubernetes_pod_label_app    <span class="token key atrule">action</span><span class="token punctuation">:</span> keep    <span class="token key atrule">regex</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>kubestate.*  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> __meta_kubernetes_pod_container_port_number    <span class="token key atrule">action</span><span class="token punctuation">:</span> keep    <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token number">9090</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>slave Prometheus配置</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">global</span><span class="token punctuation">:</span>  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 60s  <span class="token key atrule">scrape_timeout</span><span class="token punctuation">:</span> 30s  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 60s  <span class="token key atrule">external_labels</span><span class="token punctuation">:</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>CLUSTER<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">production_environment</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>ENV<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">rule_files</span><span class="token punctuation">:</span><span class="token punctuation">-</span> node.yml<span class="token punctuation">-</span> pod.yml<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> federate<span class="token punctuation">-</span>kubestate  <span class="token key atrule">honor_labels</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> <span class="token string">'/federate'</span>  <span class="token key atrule">params</span><span class="token punctuation">:</span>    'match<span class="token punctuation">[</span><span class="token punctuation">]</span>'<span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">'{__name__=~"pod:.*|node:.*"}'</span>  <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> pod    <span class="token key atrule">namespaces</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> kube<span class="token punctuation">-</span>system  <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> __meta_kubernetes_pod_label_app    <span class="token key atrule">action</span><span class="token punctuation">:</span> keep    <span class="token key atrule">regex</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>kubestate.*  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> __meta_kubernetes_pod_container_port_number    <span class="token key atrule">action</span><span class="token punctuation">:</span> keep    <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token number">9090</span>  <span class="token key atrule">metric_relabel_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>node<span class="token punctuation">]</span>    <span class="token key atrule">modulus</span><span class="token punctuation">:</span>       <span class="token punctuation">{</span><span class="token punctuation">{</span>MODULES<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">target_label</span><span class="token punctuation">:</span>  __tmp_hash    <span class="token key atrule">action</span><span class="token punctuation">:</span>        hashmod  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__tmp_hash<span class="token punctuation">]</span>    <span class="token key atrule">regex</span><span class="token punctuation">:</span>         <span class="token punctuation">{</span><span class="token punctuation">{</span>SLAVEID<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">action</span><span class="token punctuation">:</span>        keep<span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> kubelet  <span class="token key atrule">scheme</span><span class="token punctuation">:</span> https  <span class="token key atrule">kubernetes_sd_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">role</span><span class="token punctuation">:</span> node    <span class="token key atrule">namespaces</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token key atrule">tls_config</span><span class="token punctuation">:</span>    <span class="token key atrule">insecure_skip_verify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">relabel_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token key atrule">regex</span><span class="token punctuation">:</span> __meta_kubernetes_node_label_(.+)    <span class="token key atrule">replacement</span><span class="token punctuation">:</span> <span class="token string">"$1"</span>    <span class="token key atrule">action</span><span class="token punctuation">:</span> labelmap  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__meta_kubernetes_node_label_kubernetes_io_hostname<span class="token punctuation">]</span>    <span class="token key atrule">modulus</span><span class="token punctuation">:</span>       <span class="token punctuation">{</span><span class="token punctuation">{</span>MODULES<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">target_label</span><span class="token punctuation">:</span>  __tmp_hash    <span class="token key atrule">action</span><span class="token punctuation">:</span>        hashmod  <span class="token punctuation">-</span> <span class="token key atrule">source_labels</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>__tmp_hash<span class="token punctuation">]</span>    <span class="token key atrule">regex</span><span class="token punctuation">:</span>         <span class="token punctuation">{</span><span class="token punctuation">{</span>SLAVEID<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token key atrule">action</span><span class="token punctuation">:</span>        keep<span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token punctuation">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h3><ul><li>如何部署，配置复杂，现在采用shell脚本加kustomize,是否有更简单的方法</li><li>分区的动态扩展随着node的规模</li><li>kube-state-metrics是否会成为瓶颈，目前的<a href="https://docs.google.com/document/d/1hm5XrM9dYYY085yOnmMDXu074E4RxjM7R5FS4-WOflo/edit" target="_blank" rel="noopener">kube-state-metrics性能测试</a></li><li>由于分区同一个job的不同instance采集的时间有偏差，对聚合有一定影响</li><li>可靠性保证，如果一个或多个slave的挂了如何处理，使用k8s来保证prometheus的可用性是否可靠</li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回家</title>
      <link href="/festival/"/>
      <url>/festival/</url>
      
        <content type="html"><![CDATA[<h2 id="春节到了"><a href="#春节到了" class="headerlink" title="春节到了"></a>春节到了</h2><p>一年又过去了<br>还没有下雪<br>匆匆忙忙<br>春节又来了<br>回家过年</p><h2 id="来年再见"><a href="#来年再见" class="headerlink" title="来年再见"></a>来年再见</h2><p>希望的<br>或许实现了<br>或许还在希望着<br>只能留到明年了</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s节点资源不足时指定nodeName的replicaset会创建大量pod(显示OutOfcpu/OutOfmem)</title>
      <link href="/pod-outofcpu-error/"/>
      <url>/pod-outofcpu-error/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>k8s: 1.10.2<br>docker: 17.03</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>当指定nodeName并且节点资源不足时，会创建大量pod，并显示outofcpu/outofmem<br>类似下面：<br>prometheus-slave01-68bd9bc854-slw92 0/2 OutOfcpu 0 1m<br>prometheus-slave01-68bd9bc854-svxbq 0/2 OutOfcpu 0 20s<br>prometheus-slave01-68bd9bc854-sw25t 0/2 OutOfcpu 0 1m<br>…</p><h2 id="相关issue"><a href="#相关issue" class="headerlink" title="相关issue"></a>相关issue</h2><p><a href="https://github.com/kubernetes/kubernetes/issues/38806" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/issues/38806</a></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>设置nodeName会跳过调度，没有对容量做检测<br>分配到节点上显示资源不足，状态变为outofcpu/outofmem，k8s判断replicaset没有检测到期望pod的状态，会重新再起一个pod，而原pod不会主动删除，致使创建大量pod</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p>测试yaml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> extensions/v1beta1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>nginx  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>system<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token key atrule">template</span><span class="token punctuation">:</span>    <span class="token key atrule">metadata</span><span class="token punctuation">:</span>      <span class="token key atrule">labels</span><span class="token punctuation">:</span>        <span class="token key atrule">app</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>nginx    <span class="token key atrule">spec</span><span class="token punctuation">:</span>      <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> tj1<span class="token punctuation">-</span>jm<span class="token punctuation">-</span>cc<span class="token punctuation">-</span>stag05.kscn      <span class="token key atrule">containers</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>nginx        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span>        <span class="token key atrule">resources</span><span class="token punctuation">:</span>          <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">200</span>          <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解K8s资源限制[转]</title>
      <link href="/understanding-resource-limits-in-kubernetes/"/>
      <url>/understanding-resource-limits-in-kubernetes/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>当我开始大范围使用Kubernetes的时候，我开始考虑一个我做实验时没有遇到的问题：当集群里的节点没有足够资源的时候，Pod会卡在Pending状态。你是没有办法给节点增加CPU或者内存的，那么你该怎么做才能将这个Pod从这个节点拿走？最简单的办法是添加另一个节点，我承认我总是这么干。最终这个策略无法发挥出Kubernetes最重要的一个能力：即它优化计算资源使用的能力。这些场景里面实际的问题并不是节点太小，而是我们没有仔细为Pod计算过资源限制。</p><p>资源限制是我们可以向Kubernetes提供的诸多配置之一，它意味着两点：工作负载运行需要哪些资源；最多允许消费多少资源。第一点对于调度器而言十分重要，因为它要以此选择合适的节点。第二点对于Kubelet非常重要，每个节点上的守护进程Kubelet负责Pod的运行健康状态。大多数本文的读者可能对资源限制有一定的了解，实际上这里面有很多有趣的细节。在这个系列的两篇文章中我会先仔细分析内存资源限制，然后第二篇文章中分析CPU资源限制。 </p><h2 id="资源限制"><a href="#资源限制" class="headerlink" title="资源限制"></a>资源限制</h2><p>资源限制是通过每个容器containerSpec的resources字段进行设置的，它是v1版本的ResourceRequirements类型的API对象。每个指定了”limits”和”requests”的对象都可以控制对应的资源。目前只有CPU和内存两种资源。第三种资源类型，持久化存储仍然是beta版本，我会在以后的博客里进行分析。大多数情况下，deployment、statefulset、daemonset的定义里都包含了podSpec和多个containerSpec。这里有个完整的v1资源对象的yaml格式配置： </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 50m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 50Mi  <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个对象可以这么理解：这个容器通常情况下，需要5%的CPU时间和50MiB的内存（requests），同时最多允许它使用10%的CPU时间和100MiB的内存（limits）。我会对requests和limits的区别做进一步讲解，但是一般来说，在调度的时候requests比较重要，在运行时limits比较重要。尽管资源限制配置在每个容器上，你可以认为Pod的资源限制就是它里面容器的资源限制之和，我们可以从系统的视角观察到这种关系。 </p><h3 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h3><p>通常情况下分析内存要比分析CPU简单一些，所以我从这里开始着手。我的一个目标是给大家展示内存在系统中是如何实现的，也就是Kubernetes对容器运行时（docker/containerd）所做的工作，容器运行时对Linux内核所做的工作。从分析内存资源限制开始也为后面分析CPU打好了基础。首先，让我们回顾一下前面的例子： </p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 50Mi    <span class="token key atrule">limits</span><span class="token punctuation">:</span>            <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单位后缀Mi表示的是MiB，所以这个资源对象定义了这个容器需要50MiB并且最多能使用100MiB的内存。当然还有其他单位可以进行表示。为了了解如何用这些值是来控制容器进程，我们首先创建一个没有配置内存限制的Pod: </p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl run limit-test --image<span class="token operator">=</span>busybox --command -- /bin/sh -c <span class="token string">"while true; do sleep 2; done"</span>deployment.apps <span class="token string">"limit-test"</span> created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>用Kubectl命令我们可以验证这个Pod是没有资源限制的： </p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get pods limit-test-7cff9996fc-zpjps -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.spec.containers[0].resources}'</span>map<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Kubernetes最酷的一点是你可以跳到系统以外的角度来观察每个构成部分，所以我们登录到运行Pod的节点，看看Docker是如何运行这个容器的：</p><pre class="line-numbers language-bash"><code class="language-bash">$ docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> busy <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">' '</span> -f15c3af3101afb$ docker inspect 5c3af3101afb -f <span class="token string">"{{.HostConfig.Memory}}"</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个容器的<code>.HostConfig.Memory</code>域对应了docker run时的<code>--memory</code>参数，0值表示未设定。Docker会对这个值做什么？为了控制容器进程能够访问的内存数量，Docker配置了一组control group，或者叫cgroup。Cgroup在2008年1月时合并到Linux 2.6.24版本的内核。它是一个很重要的话题。我们说cgroup是容器的一组用来控制内核如何运行进程的相关属性集合。针对内存、CPU和各种设备都有对应的cgroup。Cgroup是具有层级的，这意味着每个cgroup拥有一个它可以继承属性的父亲，往上一直直到系统启动时创建的root cgroup。</p><p>Cgroup可以通过/proc和/sys伪文件系统轻松查看到，所以检查容器如何配置内存的cgroup就很简单了。在容器的Pid namespace里，根进程的pid为1，但是namespace以外它呈现的是系统级pid，我们可以用来查找它的cgroups： </p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ps</span> ax <span class="token operator">|</span> <span class="token function">grep</span> /bin/sh   9513 ?        Ss     0:00 /bin/sh -c <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">sleep</span> 2<span class="token punctuation">;</span> <span class="token keyword">done</span>$ <span class="token function">sudo</span> <span class="token function">cat</span> /proc/9513/cgroup<span class="token punctuation">..</span>.6:memory:/kubepods/burstable/podfbc202d3-da21-11e8-ab5e-42010a80014b/0a1b22ec1361a97c3511db37a4bae932d41b22264e5b97611748f8b662312574<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我列出了内存cgroup，这正是我们所关注的。你在路径里可以看到前面提到的cgroup层级。一些比较重要的点是：首先，这个路径是以kubepods开始的cgroup，所以我们的进程继承了这个group的每个属性，还有burstable的属性（Kubernetes将Pod设置为burstable QoS类别）和一组用于审计的Pod表示。最后一段路径是我们进程实际使用的cgroup。我们可以把它追加到<code>/sys/fs/cgroups/memory</code>后面查看更多信息： </p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ls</span> -l /sys/fs/cgroup/memory/kubepods/burstable/podfbc202d3-da21-11e8-ab5e-42010a80014b/0a1b22ec1361a97c3511db37a4bae932d41b22264e5b97611748f8b662312574<span class="token punctuation">..</span>.-rw-r--r-- 1 root root 0 Oct 27 19:53 memory.limit_in_bytes-rw-r--r-- 1 root root 0 Oct 27 19:53 memory.soft_limit_in_bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再一次，我只列出了我们所关心的记录。我们暂时不关注<code>memory.soft_limit_in_bytes</code>，而将重点转移到<code>memory.limit_in_bytes</code>属性，它设置了内存限制。它等价于Docker命令中的<code>--memory</code>参数，也就是Kubernetes里的内存资源限制。我们看看： </p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cat</span> /sys/fs/cgroup/memory/kubepods/burstable/podfbc202d3-da21-11e8-ab5e-42010a80014b/0a1b22ec1361a97c3511db37a4bae932d41b22264e5b97611748f8b662312574/memory.limit_in_bytes9223372036854771712<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是没有设置资源限制时我的节点上显示的情况。这里有对它的一个简单的解释(<a href="https://unix.stackexchange.com/questions/420906/what-is-the-value-for-the-cgroups-limit-in-bytes-if-the-memory-is-not-restricte)。" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/420906/what-is-the-value-for-the-cgroups-limit-in-bytes-if-the-memory-is-not-restricte)。</a> 所以我们看到如果没有在Kubernetes里设置内存限制的话，会导致Docker设置<code>HostConfig.Memory</code>值为0，并进一步导致容器进程被放置在默认值为”no limit”的<code>memory.limit_in_bytes</code>内存cgroup下。我们现在创建使用100MiB内存限制的Pod： </p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl run limit-test --image<span class="token operator">=</span>busybox --limits <span class="token string">"memory=100Mi"</span> --command -- /bin/sh -c <span class="token string">"while true; do sleep 2; done"</span>deployment.apps <span class="token string">"limit-test"</span> created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们再一次使用kubectl验证我们的资源配置： </p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get pods limit-test-5f5c7dc87d-8qtdx -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.spec.containers[0].resources}'</span>map<span class="token punctuation">[</span>limits:map<span class="token punctuation">[</span>memory:100Mi<span class="token punctuation">]</span> requests:map<span class="token punctuation">[</span>memory:100Mi<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你会注意到除了我们设置的limits外，Pod还增加了requests。当你设置limits而没有设置requests时，Kubernetes默认让requests等于limits。如果你从调度器的角度看这是非常有意义的。我会在下面进一步讨论requests。当这个Pod启动后，我们可以看到Docker如何配置的容器以及这个进程的内存cgroup： </p><pre class="line-numbers language-bash"><code class="language-bash">$ docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> busy <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">' '</span> -f18fec6c7b6119$ docker inspect 8fec6c7b6119 --format <span class="token string">'{{.HostConfig.Memory}}'</span>104857600$ <span class="token function">ps</span> ax <span class="token operator">|</span> <span class="token function">grep</span> /bin/sh   29532 ?      Ss     0:00 /bin/sh -c <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">sleep</span> 2<span class="token punctuation">;</span> <span class="token keyword">done</span>$ <span class="token function">sudo</span> <span class="token function">cat</span> /proc/29532/cgroup<span class="token punctuation">..</span>.6:memory:/kubepods/burstable/pod88f89108-daf7-11e8-b1e1-42010a800070/8fec6c7b61190e74cd9f88286181dd5fa3bbf9cf33c947574eb61462bc254d11$ <span class="token function">sudo</span> <span class="token function">cat</span> /sys/fs/cgroup/memory/kubepods/burstable/pod88f89108-daf7-11e8-b1e1-42010a800070/8fec6c7b61190e74cd9f88286181dd5fa3bbf9cf33c947574eb61462bc254d11/memory.limit_in_bytes104857600<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如你所见，Docker基于我们的containerSpec正确地设置了这个进程的内存cgroup。但是这对于运行时意味着什么？Linux内存管理是一个复杂的话题，Kubernetes工程师需要知道的是：当一个宿主机遇到了内存资源压力时，内核可能会有选择性地杀死进程。如果一个使用了多于限制内存的进程会有更高几率被杀死。因为Kubernetes的任务是尽可能多地向这些节点上安排Pod，这会导致节点内存压力异常。如果你的容器使用了过多内存，那么它很可能会被oom-killed。如果Docker收到了内核的通知，Kubernetes会找到这个容器并依据设置尝试重启这个Pod。</p><p>所以Kubernetes默认创建的内存requests是什么？拥有一个100MiB的内存请求会影响到cgroup？可能它设置了我们之前看到的<code>memory.soft_limit_in_bytes</code>？让我们看看： </p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cat</span> /sys/fs/cgroup/memory/kubepods/burstable/pod88f89108-daf7-11e8-b1e1-42010a800070/8fec6c7b61190e74cd9f88286181dd5fa3bbf9cf33c947574eb61462bc254d11/memory.soft_limit_in_bytes9223372036854771712<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可以看到软限制仍然被设置为默认值“no limit”。即使Docker支持通过参数<code>--memory-reservation</code>进行设置，但Kubernetes并不支持这个参数。这是否意味着为你的容器指定内存requests并不重要？不，不是的。requests要比limits更重要。limits告诉Linux内核什么时候你的进程可以为了清理空间而被杀死。requests帮助Kubernetes调度找到合适的节点运行Pod。如果不设置它们，或者设置得非常低，那么可能会有不好的影响。</p><p>例如，假设你没有配置内存requests来运行Pod，而配置了一个较高的limits。正如我们所知道的Kubernetes默认会把requests的值指向limits，如果没有合适的资源的节点的话，Pod可能会调度失败，即使它实际需要的资源并没有那么多。另一方面，如果你运行了一个配置了较低requests值的Pod，你其实是在鼓励内核oom-kill掉它。为什么？假设你的Pod通常使用100MiB内存，你却只为它配置了50MiB内存requests。如果你有一个拥有75MiB内存空间的节点，那么这个Pod会被调度到这个节点。当Pod内存消耗扩大到100MiB时，会让这个节点压力变大，这个时候内核可能会选择杀掉你的进程。所以我们要正确配置Pod的内存requests和limits。</p><p>希望这篇文章能够帮助说明Kubernetes容器内存限制是如何设置和实现的，以及为什么你需要正确设置这些值。如果你为Kubernetes提供了它所需要的足够信息，它可以智能地调度你的任务并最大化使用你的云计算资源。 </p><h3 id="CPU限制"><a href="#CPU限制" class="headerlink" title="CPU限制"></a>CPU限制</h3><p>CPU 资源限制比内存资源限制更复杂，原因将在下文详述。幸运的是 CPU 资源限制和内存资源限制一样都是由 cgroup 控制的，上文中提到的思路和工具在这里同样适用，我们只需要关注他们的不同点就行了。首先，让我们将 CPU 资源限制添加到之前示例中的 yaml：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">resources</span><span class="token punctuation">:</span>  <span class="token key atrule">requests</span><span class="token punctuation">:</span>    <span class="token key atrule">memory</span><span class="token punctuation">:</span> 50Mi    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 50m  <span class="token key atrule">limits</span><span class="token punctuation">:</span>    <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi    <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单位后缀 m 表示千分之一核，也就是说 1 Core = 1000m。因此该资源对象指定容器进程需要 50/1000 核（5%）才能被调度，并且允许最多使用 100/1000 核（10%）。同样，2000m 表示两个完整的 CPU 核心，你也可以写成 2 或者 2.0。为了了解 Docker 和 cgroup 如何使用这些值来控制容器，我们首先创建一个只配置了 CPU requests 的 Pod：</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl run limit-test --image<span class="token operator">=</span>busybox --requests <span class="token string">"cpu=50m"</span> --command -- /bin/sh -c <span class="token string">"while true; do sleep 2; done"</span>deployment.apps <span class="token string">"limit-test"</span> created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过 kubectl 命令我们可以验证这个 Pod 配置了 50m 的 CPU requests：</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get pods limit-test-5b4c495556-p2xkr -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.spec.containers[0].resources}'</span>map<span class="token punctuation">[</span>requests:map<span class="token punctuation">[</span>cpu:50m<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们还可以看到 Docker 为容器配置了相同的资源限制：</p><pre class="line-numbers language-bash"><code class="language-bash">$ docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> busy <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">' '</span> -f1f2321226620e$ docker inspect f2321226620e --format <span class="token string">'{{.HostConfig.CpuShares}}'</span>51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里显示的为什么是 51，而不是 50？这是因为 Linux cgroup 和 Docker 都将 CPU 核心数分成了 1024 个时间片（shares），而 Kubernetes 将它分成了 1000 个 shares。<br>shares 用来设置 CPU 的相对值，并且是针对所有的 CPU（内核），默认值是 1024，假如系统中有两个 cgroup，分别是 A 和 B，A 的 shares 值是 1024，B 的 shares 值是 512，那么 A 将获得 1024/(1204+512)=66% 的 CPU 资源，而 B 将获得 33% 的 CPU 资源。</p><p>shares 有两个特点：</p><ol><li>如果 A 不忙，没有使用到 66% 的 CPU 时间，那么剩余的 CPU 时间将会被系统分配给 B，即 B 的 CPU 使用率可以超过 33%。</li><li>如果添加了一个新的 cgroup C，且它的 shares 值是 1024，那么 A 的限额变成了 1024/(1204+512+1024)=40%，B 的变成了 20%。</li></ol><p>从上面两个特点可以看出：</p><p>在闲的时候，shares 基本上不起作用，只有在 CPU 忙的时候起作用，这是一个优点。<br>由于 shares 是一个绝对值，需要和其它 cgroup 的值进行比较才能得到自己的相对限额，而在一个部署很多容器的机器上，cgroup 的数量是变化的，所以这个限额也是变化的，自己设置了一个高的值，但别人可能设置了一个更高的值，所以这个功能没法精确的控制 CPU 使用率。</p><p>与配置内存资源限制时 Docker 配置容器进程的内存 cgroup 的方式相同，设置 CPU 资源限制时 Docker 会配置容器进程的 cpu,cpuacct cgroup：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">ps</span> ax <span class="token operator">|</span> <span class="token function">grep</span> /bin/sh   60554 ?      Ss     0:00 /bin/sh -c <span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">sleep</span> 2<span class="token punctuation">;</span> <span class="token keyword">done</span>$ <span class="token function">sudo</span> <span class="token function">cat</span> /proc/60554/cgroup<span class="token punctuation">..</span>.4:cpu,cpuacct:/kubepods/burstable/pode12b33b1-db07-11e8-b1e1-42010a800070/3be263e7a8372b12d2f8f8f9b4251f110b79c2a3bb9e6857b2f1473e640e8e75$ <span class="token function">ls</span> -l /sys/fs/cgroup/cpu,cpuacct/kubepods/burstable/pode12b33b1-db07-11e8-b1e1-42010a800070/3be263e7a8372b12d2f8f8f9b4251f110b79c2a3bb9e6857b2f1473e640e8e75total 0drwxr-xr-x 2 root root 0 Oct 28 23:19 <span class="token keyword">.</span>drwxr-xr-x 4 root root 0 Oct 28 23:19 <span class="token punctuation">..</span><span class="token punctuation">..</span>.-rw-r--r-- 1 root root 0 Oct 28 23:19 cpu.shares<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Docker 容器的 HostConfig.CpuShares 属性映射到 cgroup 的 cpu.shares 属性，可以验证一下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cat</span> /sys/fs/cgroup/cpu,cpuacct/kubepods/burstable/podb5c03ddf-db10-11e8-b1e1-42010a800070/64b5f1b636dafe6635ddd321c5b36854a8add51931c7117025a694281fb11444/cpu.shares51<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可能会很惊讶，设置了 CPU requests 竟然会把值传播到 cgroup，而在上一篇文章中我们设置内存 requests 时并没有将值传播到 cgroup。这是因为内存的 soft limit 内核特性对 Kubernetes 不起作用，而设置了 cpu.shares 却对 Kubernetes 很有用。后面我会详细讨论为什么会这样。现在让我们先看看设置 CPU limits 时会发生什么：</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl run limit-test --image<span class="token operator">=</span>busybox --requests <span class="token string">"cpu=50m"</span> --limits <span class="token string">"cpu=100m"</span> --command -- /bin/sh -c <span class="token string">"while true; dosleep 2; done"</span>deployment.apps <span class="token string">"limit-test"</span> created<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再一次使用 kubectl 验证我们的资源配置：</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl get pods limit-test-5b4fb64549-qpd4n -o<span class="token operator">=</span>jsonpath<span class="token operator">=</span><span class="token string">'{.spec.containers[0].resources}'</span>map<span class="token punctuation">[</span>limits:map<span class="token punctuation">[</span>cpu:100m<span class="token punctuation">]</span> requests:map<span class="token punctuation">[</span>cpu:50m<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看对应的 Docker 容器的配置：</p><pre class="line-numbers language-bash"><code class="language-bash">$ docker <span class="token function">ps</span> <span class="token operator">|</span> <span class="token function">grep</span> busy <span class="token operator">|</span> <span class="token function">cut</span> -d<span class="token string">' '</span> -f1f2321226620e$ docker inspect 472abbce32a5 --format <span class="token string">'{{.HostConfig.CpuShares}} {{.HostConfig.CpuQuota}} {{.HostConfig.CpuPeriod}}'</span>51 10000 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以明显看出，CPU requests 对应于 Docker 容器的 HostConfig.CpuShares 属性。而 CPU limits 就不太明显了，它由两个属性控制：HostConfig.CpuPeriod 和 HostConfig.CpuQuota。Docker 容器中的这两个属性又会映射到进程的 cpu,couacct cgroup 的另外两个属性：cpu.cfs_period_us 和 cpu.cfs_quota_us。我们来看一下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">cat</span> /sys/fs/cgroup/cpu,cpuacct/kubepods/burstable/pod2f1b50b6-db13-11e8-b1e1-42010a800070/f0845c65c3073e0b7b0b95ce0c1eb27f69d12b1fe2382b50096c4b59e78cdf71/cpu.cfs_period_us100000$ <span class="token function">sudo</span> <span class="token function">cat</span> /sys/fs/cgroup/cpu,cpuacct/kubepods/burstable/pod2f1b50b6-db13-11e8-b1e1-42010a800070/f0845c65c3073e0b7b0b95ce0c1eb27f69d12b1fe2382b50096c4b59e78cdf71/cpu.cfs_quota_us10000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如我所说，这些值与容器配置中指定的值相同。但是这两个属性的值是如何从我们在 Pod 中设置的 100m cpu limits 得出的呢，他们是如何实现该 limits 的呢？这是因为 cpu requests 和 cpu limits 是使用两个独立的控制系统来实现的。Requests 使用的是 cpu shares 系统，cpu shares 将每个 CPU 核心划分为 1024 个时间片，并保证每个进程将获得固定比例份额的时间片。如果总共有 1024 个时间片，并且两个进程中的每一个都将 cpu.shares 设置为 512，那么它们将分别获得大约一半的 CPU 可用时间。但 cpu shares 系统无法精确控制 CPU 使用率的上限，如果一个进程没有设置 shares，则另一个进程可用自由使用 CPU 资源。</p><p>大约在 2010 年左右，谷歌团队和其他一部分人注意到了这个问题。为了解决这个问题，后来在 linux 内核中增加了第二个功能更强大的控制系统：CPU 带宽控制组。带宽控制组定义了一个 周期，通常为 1/10 秒（即 100000 微秒）。还定义了一个 配额，表示允许进程在设置的周期长度内所能使用的 CPU 时间数，两个文件配合起来设置CPU的使用上限。两个文件的单位都是微秒（us），cfs_period_us 的取值范围为 1 毫秒（ms）到 1 秒（s），cfs_quota_us 的取值大于 1ms 即可，如果 cfs_quota_us 的值为 -1（默认值），表示不受 CPU 时间的限制。</p><p>下面是几个例子：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 1.限制只能使用1个CPU（每250ms能使用250ms的CPU时间）</span>$ <span class="token keyword">echo</span> 250000 <span class="token operator">></span> cpu.cfs_quota_us /* <span class="token function">quota</span> <span class="token operator">=</span> 250ms */$ <span class="token keyword">echo</span> 250000 <span class="token operator">></span> cpu.cfs_period_us /* period <span class="token operator">=</span> 250ms */<span class="token comment" spellcheck="true"># 2.限制使用2个CPU（内核）（每500ms能使用1000ms的CPU时间，即使用两个内核）</span>$ <span class="token keyword">echo</span> 1000000 <span class="token operator">></span> cpu.cfs_quota_us /* <span class="token function">quota</span> <span class="token operator">=</span> 1000ms */$ <span class="token keyword">echo</span> 500000 <span class="token operator">></span> cpu.cfs_period_us /* period <span class="token operator">=</span> 500ms */<span class="token comment" spellcheck="true"># 3.限制使用1个CPU的20%（每50ms能使用10ms的CPU时间，即使用一个CPU核心的20%）</span>$ <span class="token keyword">echo</span> 10000 <span class="token operator">></span> cpu.cfs_quota_us /* <span class="token function">quota</span> <span class="token operator">=</span> 10ms */$ <span class="token keyword">echo</span> 50000 <span class="token operator">></span> cpu.cfs_period_us /* period <span class="token operator">=</span> 50ms */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在本例中我们将 Pod 的 cpu limits 设置为 100m，这表示 100/1000 个 CPU 核心，即 100000 微秒的 CPU 时间周期中的 10000。所以该 limits 翻译到 cpu,cpuacct cgroup 中被设置为 cpu.cfs_period_us=100000 和 cpu.cfs_quota_us=10000。顺便说一下，其中的 cfs 代表 Completely Fair Scheduler（绝对公平调度），这是 Linux 系统中默认的 CPU 调度算法。还有一个实时调度算法，它也有自己相应的配额值。</p><p>现在让我们来总结一下：</p><ul><li>在 Kubernetes 中设置的 cpu requests 最终会被 cgroup 设置为 cpu.shares 属性的值， cpu limits 会被带宽控制组设置为 cpu.cfs_period_us 和 cpu.cfs_quota_us 属性的值。与内存一样，cpu requests 主要用于在调度时通知调度器节点上至少需要多少个 cpu shares 才可以被调度。</li><li>与 内存 requests 不同，设置了 cpu requests 会在 cgroup 中设置一个属性，以确保内核会将该数量的 shares 分配给进程。</li><li>cpu limits 与 内存 limits 也有所不同。如果容器进程使用的内存资源超过了内存使用限制，那么该进程将会成为 oom-killing 的候选者。但是容器进程基本上永远不能超过设置的 CPU 配额，所以容器永远不会因为尝试使用比分配的更多的 CPU 时间而被驱逐。系统会在调度程序中强制进行 CPU 资源限制，以确保进程不会超过这个限制。</li></ul><p>如果你没有在容器中设置这些属性，或将他们设置为不准确的值，会发生什么呢？与内存一样，如果只设置了 limits 而没有设置 requests，Kubernetes 会将 CPU 的 requests 设置为 与 limits 的值一样。如果你对你的工作负载所需要的 CPU 时间了如指掌，那再好不过了。如果只设置了 CPU requests 却没有设置 CPU limits 会怎么样呢？这种情况下，Kubernetes 会确保该 Pod 被调度到合适的节点，并且该节点的内核会确保节点上的可用 cpu shares 大于 Pod 请求的 cpu shares，但是你的进程不会被阻止使用超过所请求的 CPU 数量。既不设置 requests 也不设置 limits 是最糟糕的情况：调度程序不知道容器需要什么，并且进程对 cpu shares 的使用是无限制的，这可能会对 node 产生一些负面影响。</p><p>最后我还想告诉你们的是：为每个 pod 都手动配置这些参数是挺麻烦的事情，kubernetes 提供了 LimitRange 资源，可以让我们配置某个 namespace 默认的 request 和 limit 值。</p><h2 id="默认限制"><a href="#默认限制" class="headerlink" title="默认限制"></a>默认限制</h2><p>通过上文的讨论大家已经知道了忽略资源限制会对 Pod 产生负面影响，因此你可能会想，如果能够配置某个 namespace 默认的 request 和 limit 值就好了，这样每次创建新 Pod 都会默认加上这些限制。Kubernetes 允许我们通过 LimitRange 资源对每个命名空间设置资源限制。要创建默认的资源限制，需要在对应的命名空间中创建一个 LimitRange 资源。下面是一个例子：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> LimitRange<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>limit<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">limits</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">default</span><span class="token punctuation">:</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m    <span class="token key atrule">defaultRequest</span><span class="token punctuation">:</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 50Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 50m  <span class="token punctuation">-</span> <span class="token key atrule">max</span><span class="token punctuation">:</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 512Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 500m  <span class="token punctuation">-</span> <span class="token key atrule">min</span><span class="token punctuation">:</span>      <span class="token key atrule">memory</span><span class="token punctuation">:</span> 50Mi      <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 50m    <span class="token key atrule">type</span><span class="token punctuation">:</span> Container<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的几个字段可能会让你们有些困惑，我拆开来给你们分析一下。</p><ul><li>limits 字段下面的 default 字段表示每个 Pod 的默认的 limits 配置，所以任何没有分配资源的 limits 的 Pod 都会被自动分配 100Mi limits 的内存和 100m limits 的 CPU。</li><li>defaultRequest 字段表示每个 Pod 的默认 requests 配置，所以任何没有分配资源的 requests 的 Pod 都会被自动分配 50Mi requests 的内存和 50m requests 的 CPU。</li><li>max 和 min 字段比较特殊，如果设置了这两个字段，那么只要这个命名空间中的 Pod 设置的 limits 和 requests 超过了这个上限和下限，就不会允许这个 Pod 被创建。我暂时还没有发现这两个字段的用途，如果你知道，欢迎在留言告诉我。</li><li>LimitRange 中设定的默认值最后由 Kubernetes 中的准入控制器 LimitRanger 插件来实现。准入控制器由一系列插件组成，它会在 API 接收对象之后创建 Pod 之前对 Pod 的 Spec - 字段进行修改。对于 LimitRanger 插件来说，它会检查每个 Pod 是否设置了 limits 和 requests，如果没有设置，就给它配置 LimitRange 中设定的默认值。通过检查 Pod 中的 annotations 注释，你可以看到 LimitRanger 插件已经在你的 Pod 中设置了默认值。例如：</li></ul><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">kubernetes.io/limit-ranger</span><span class="token punctuation">:</span> <span class="token string">'LimitRanger plugin set: cpu request for container      limit-test'</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> limit<span class="token punctuation">-</span>test<span class="token punctuation">-</span>859d78bc65<span class="token punctuation">-</span>g6657  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">args</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> /bin/sh    <span class="token punctuation">-</span> <span class="token punctuation">-</span>c    <span class="token punctuation">-</span> while true; do sleep 2; done    <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always    <span class="token key atrule">name</span><span class="token punctuation">:</span> limit<span class="token punctuation">-</span>test    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是我对 Kubernetes 资源限制的全部见解，希望能对你有所帮助。如果你想了解更多关于 Kubernetes 中资源的 limits 和 requests、以及 linux cgroup 和内存管理的更多详细信息，可以查看我在文末提供的参考链接。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-cpu-time-9eff74d3161b" target="_blank" rel="noopener">https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-cpu-time-9eff74d3161b</a></li><li><a href="https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-memory-6b41e9a955f9" target="_blank" rel="noopener">https://medium.com/@betz.mark/understanding-resource-limits-in-kubernetes-memory-6b41e9a955f9</a></li><li><a href="https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/" target="_blank" rel="noopener">https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/</a></li><li><a href="https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/" target="_blank" rel="noopener">https://www.yangcs.net/posts/understanding-resource-limits-in-kubernetes-cpu-time/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> cgroup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次golang性能分析</title>
      <link href="/golang-pprof/"/>
      <url>/golang-pprof/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在做 prometheus 监控，需要将 prometheus 聚合数据打向 falcon, 写了个 falcon-adapter，部署到小集群上没问题，最后部署在线上集群 400 nodes k8s 集群出现 部分数据抓取不上， falcon断点严重， 部署节点 load 过高到达 50.</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>追溯某些数据发现 prometheus 采集不到，确认抓取组件没有问题<br>查看 falcon，数据采集时间过长，导致断点<br>查看 falcon-adapter, 有大量 TIME_WAIT 链接<br>无法确定哪一环出现问题，借助 pprof 进行性能分析<br>查看 falcon-adapter 得到火焰图如下<br><img src="/img/blogImg/golang分析.png" alt="before"><br>其中 falcon-adapter 的 metricFilter 操作占了 71.75%， 大部分是 regexp.MatchString 和 regexp.compile 占用的，这在一个转发程序是不正常的，通常应该 HTTP IO 操作占大头<br>在 metricFilter 中主要实现了prometheus metrics 的过滤，保存需要的 metrics, 其中有大量正则匹配，可能因此出现性能问题</p><pre><code>func metricFilter(str string) string {    for _, scope := range config.Scope {        regStr := &quot;^&quot; + scope + &quot;:&quot;        if match, _ := regexp.MatchString(regStr, str); match {            return scope        }    }    return &quot;&quot;}</code></pre><p>将所有正则操作全部替换为常规字符串操作后，得到火焰图如下<br><img src="/img/blogImg/golang分析1.png" alt="after"><br>net 占有大部分 cpu 时间，meticFilter 只占用 1.67%！</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在大规模集群中编程一定要考虑性能问题，避免出现类似问题<br>善于利用 pprof 类似工具分析程序性能问题</p>]]></content>
      
      
      <categories>
          
          <category> coding </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pod memory usage in k8s</title>
      <link href="/pod-memory-usage-in-k8s/"/>
      <url>/pod-memory-usage-in-k8s/</url>
      
        <content type="html"><![CDATA[<h2 id="Cadvisor内存使用率指标"><a href="#Cadvisor内存使用率指标" class="headerlink" title="Cadvisor内存使用率指标"></a>Cadvisor内存使用率指标</h2><h3 id="Cadvisor中有关pod内存使用率的指标"><a href="#Cadvisor中有关pod内存使用率的指标" class="headerlink" title="Cadvisor中有关pod内存使用率的指标"></a>Cadvisor中有关pod内存使用率的指标</h3><table><thead><tr><th>指标</th><th>说明</th></tr></thead><tbody><tr><td>container_memory_cache</td><td>Number of bytes of page cache memory.</td></tr><tr><td>container_memory_rss</td><td>Size of RSS in bytes.(包括匿名映射页和交换区缓存)</td></tr><tr><td>container_memory_swap</td><td>Container swap usage in bytes.</td></tr><tr><td>container_memory_usage_bytes</td><td>Current memory usage in bytes,including all memory regardless ofwhen it was accessed. (包括 cache, rss, swap等)</td></tr><tr><td>container_memory_max_usage_bytes</td><td>Maximum memory usage recorded in bytes.</td></tr><tr><td>container_memory_working_set_bytes</td><td>Current working set in bytes. （工作区内存使用量=活跃的匿名与和缓存,以及file-baked页 &lt;=container_memory_usage_bytes）</td></tr><tr><td>container_memory_failcnt</td><td>Number of memory usage hits limits.</td></tr><tr><td>container_memory_failures_total</td><td>Cumulative count of memory allocation failures.</td></tr></tbody></table><p>其中<br><code>container_memory_max_usage_bytes &gt; container_memory_usage_bytes &gt;= container_memory_working_set_bytes &gt; container_memory_rss</code></p><h3 id="Cadvisor中相关定义"><a href="#Cadvisor中相关定义" class="headerlink" title="Cadvisor中相关定义"></a>Cadvisor中相关定义</h3><pre><code>type MemoryStats struct { // Current memory usage, this includes all memory regardless of when it was // accessed. // Units: Bytes. Usage uint64 json:&quot;usage&quot;// Maximum memory usage recorded.    // Units: Bytes.    MaxUsage uint64 `json:&quot;max_usage&quot;`    // Number of bytes of page cache memory.    // Units: Bytes.    Cache uint64 `json:&quot;cache&quot;`    // The amount of anonymous and swap cache memory (includes transparent    // hugepages).    // Units: Bytes.    RSS uint64 `json:&quot;rss&quot;`    // The amount of swap currently used by the processes in this cgroup    // Units: Bytes.    Swap uint64 `json:&quot;swap&quot;`    // The amount of working set memory, this includes recently accessed memory,    // dirty memory, and kernel memory. Working set is &lt;= &quot;usage&quot;.    // Units: Bytes.    WorkingSet uint64 `json:&quot;working_set&quot;`    Failcnt uint64 `json:&quot;failcnt&quot;`    ContainerData    MemoryStatsMemoryData `json:&quot;container_data,omitempty&quot;`    HierarchicalData MemoryStatsMemoryData `json:&quot;hierarchical_data,omitempty&quot;`}</code></pre><blockquote><p>You might think that memory utilization is easily tracked with container_memory_usage_bytes, however, this metric also includes cached (think filesystem cache) items that can be evicted under memory pressure. The better metric is container_memory_working_set_bytes as this is what the OOM killer is watching for.<br>To calculate container memory utilization we use: sum(container_memory_working_set_bytes{name!~”POD”}) by (name)</p></blockquote><p>kubelet 通过 watch container_memory_working_set_bytes 来判断是否OOM， 所以用 working set来评价容器内存使用量更科学</p><h2 id="Cgroup中关于mem指标"><a href="#Cgroup中关于mem指标" class="headerlink" title="Cgroup中关于mem指标"></a>Cgroup中关于mem指标</h2><p>cgroup目录相关文件</p><table><thead><tr><th>文件名</th><th>说明</th><th>cadvisor中对应指标</th></tr></thead><tbody><tr><td>memory.usage_in_bytes</td><td>已使用的内存量(包含cache和buffer)(字节)，相当于linux的used_meme</td><td>container_memory_usage_bytes</td></tr><tr><td>memory.limit_in_bytes</td><td>限制的内存总量(字节)，相当于linux的total_mem</td><td></td></tr><tr><td>memory.failcnt</td><td>申请内存失败次数计数</td><td></td></tr><tr><td>memory.memsw.usage_in_bytes</td><td>已使用的内存和swap(字节)</td><td></td></tr><tr><td>memory.memsw.limit_in_bytes</td><td>限制的内存和swap容量(字节)</td><td></td></tr><tr><td>memory.memsw.failcnt</td><td>申请内存和swap失败次数计数</td><td></td></tr><tr><td>memory.stat</td><td>内存相关状态</td><td></td></tr></tbody></table><p>memory.stat中包含有的内存信息</p><table><thead><tr><th>统计</th><th>描述</th><th>cadvisor中对应指标</th></tr></thead><tbody><tr><td>cache</td><td>页缓存，包括 tmpfs（shmem），单位为字节</td><td>container_memory_cache</td></tr><tr><td>rss</td><td>匿名和 swap 缓存，不包括 tmpfs（shmem），单位为字节</td><td>container_memory_rss</td></tr><tr><td>mapped_file</td><td>memory-mapped 映射的文件大小，包括 tmpfs（shmem），单位为字节</td><td></td></tr><tr><td>pgpgin</td><td>存入内存中的页数</td><td></td></tr><tr><td>pgpgout</td><td>从内存中读出的页数</td><td></td></tr><tr><td>swap</td><td>swap 用量，单位为字节</td><td>container_memory_swap</td></tr><tr><td>active_anon</td><td>在活跃的最近最少使用（least-recently-used，LRU）列表中的匿名和 swap 缓存，包括 tmpfs（shmem），单位为字节</td><td></td></tr><tr><td>inactive_anon</td><td>不活跃的 LRU 列表中的匿名和 swap 缓存，包括 tmpfs（shmem），单位为字节</td><td></td></tr><tr><td>active_file</td><td>活跃 LRU 列表中的 file-backed 内存，以字节为单位</td><td></td></tr><tr><td>inactive_file</td><td>不活跃 LRU 列表中的 file-backed 内存，以字节为单位</td><td></td></tr><tr><td>unevictable</td><td>无法再生的内存，以字节为单位</td><td></td></tr><tr><td>hierarchical_memory_limit</td><td>包含 memory cgroup 的层级的内存限制，单位为字节</td><td></td></tr><tr><td>hierarchical_memsw_limit</td><td>包含 memory cgroup 的层级的内存加 swap 限制，单位为字节</td><td></td></tr></tbody></table><pre><code>active_anon + inactive_anon = anonymous memory + file cache for tmpfs + swap cache = rss + file cache for tmpfs active_file + inactive_file = cache - size of tmpfsworking set = usage - total_inactive(k8s根据workingset 来判断是否驱逐pod)</code></pre><p>mstat看到的active/inactive memory就分别是active list和inactive list中的内存大小。如果inactive list很大，表明在必要时可以回收的页面很多；而如果inactive list很小，说明可以回收的页面不多。<br>Active/inactive memory是针对用户进程所占用的内存而言的，内核占用的内存（包括slab）不在其中。<br>至于在源代码中看到的ACTIVE_ANON和ACTIVE_FILE，分别表示anonymous pages和file-backed pages。用户进程的内存页分为两种：与文件关联的内存（比如程序文件、数据文件所对应的内存页）和与文件无关的内存（比如进程的堆栈，用malloc申请的内存），前者称为file-backed pages，后者称为anonymous pages。File-backed pages在发生换页(page-in或page-out)时，是从它对应的文件读入或写出；anonymous pages在发生换页时，是对交换区进行读/写操作。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.freshtracks.io/a-deep-dive-into-kubernetes-metrics-part-3-container-resource-metrics-361c5ee46e66" target="_blank" rel="noopener">https://blog.freshtracks.io/a-deep-dive-into-kubernetes-metrics-part-3-container-resource-metrics-361c5ee46e66</a></li><li><a href="https://github.com/google/cadvisor/blob/08f0c2397cbca790a4db0f1212cb592cc88f6e26/info/v1/container.go#L338:6" target="_blank" rel="noopener">https://github.com/google/cadvisor/blob/08f0c2397cbca790a4db0f1212cb592cc88f6e26/info/v1/container.go#L338:6</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
            <tag> cadvisor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pod一直显示Terminating</title>
      <link href="/pod-terminating-long-time/"/>
      <url>/pod-terminating-long-time/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>集群中有一个pod一直显示Terminating</p><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><pre class="line-numbers language-bash"><code class="language-bash">Normal Scheduled 1h default-scheduler Successfully assigned feed-426565da19777e5d325f-5994dc5cff-znqmh to node01Normal SuccessfulMountVolume 1h kubelet, node01 <span class="token punctuation">(</span>combined from similar events<span class="token punctuation">)</span>: MountVolume.SetUp succeeded <span class="token keyword">for</span> volume <span class="token string">"lvm"</span>Normal Pulled 1h kubelet, node01 Container image  already present on machineNormal Created 1h kubelet, node01 Created containerNormal Started 1h kubelet, node01 Started containerWarning Unhealthy 9m <span class="token punctuation">(</span>x44 over 1h<span class="token punctuation">)</span> kubelet, node01 Liveness probe failed: Get http://*:65318/state.json: dial tcp *.*.*.*:65318: getsockopt: connection refusedWarning Unhealthy 9m <span class="token punctuation">(</span>x45 over 1h<span class="token punctuation">)</span> kubelet, node01 Readiness probe failed: Get http://*:65318/state.json: dial tcp *.*.*.*:65318: getsockopt: connection refusedNormal Killing 9m kubelet, node01 Killing container with <span class="token function">id</span> docker://main:Need to <span class="token function">kill</span> PodWarning FailedKillPod 5m <span class="token punctuation">(</span>x2 over 7m<span class="token punctuation">)</span> kubelet, node01 error killing pod: failed to <span class="token string">"KillPodSandbox"</span> <span class="token keyword">for</span> <span class="token string">"163f99a9-1aec-11e9-a7cd-246e96ab9970"</span> with KillPodSandboxError: <span class="token string">"rpc error: code = DeadlineExceeded desc = context deadline exceeded"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><pre class="line-numbers language-bash"><code class="language-bash">kubelet: error killing pod: failed to <span class="token string">"KillPodSandbox"</span> <span class="token keyword">for</span> <span class="token string">"163f99a9-1aec-11e9-a7cd-246e96ab9970"</span> with KillPodSandboxError: <span class="token string">"rpc error: code = DeadlineExceeded desc = context deadline exceeded"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ps</span> aux <span class="token operator">|</span><span class="token function">grep</span> D <span class="token comment" spellcheck="true">#查看无法终止的进程（stat D）</span>root 2626 0.0 0.0 0 0 ? Ds 14:42 0:00 <span class="token punctuation">[</span>pause<span class="token punctuation">]</span><span class="token function">ps</span> afx <span class="token operator">|</span><span class="token function">grep</span> -C 10 2626 <span class="token comment" spellcheck="true">#显示父进程</span>root 2626 2603 0 14:42 ? 00:00:00 <span class="token punctuation">[</span>pause<span class="token punctuation">]</span><span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> 2603 <span class="token comment" spellcheck="true">#查看父进程</span>root 2603 27573 0 14:42 ? 00:00:00 docker-containerd-shim -namespace moby -workdir /home/docker/containerd/daemon/io.containerd.runtime.v1.linux/moby/ba519a9f1a1102a922bcc74ced7a7fc9fd3f963feea4b8de<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> 27573root 27573 27553 0 2018 ? 17:02:40 docker-containerd --config /var/run/docker/containerd/containerd.toml<span class="token function">ps</span> -ef <span class="token operator">|</span><span class="token function">grep</span> 27553root 27553 1 3 2018 ? 3-16:03:11 /usr/bin/dockerd --bip<span class="token operator">=</span>10.126.64.193/26 --mtu<span class="token operator">=</span>1500 -g /home/docker -D -H tcp://127.0.0.1:1983 -H unix:///var/run/docker.sock --tlsverify --iptables<span class="token operator">=</span>false --storage-driver<span class="token operator">=</span>devicemapper --storage-opt dm.override_udev_sync_check<span class="token operator">=</span>true --storage-opt dm.datadev<span class="token operator">=</span>/dev/vg_root/dmdata --storage-opt dm.metadatadev<span class="token operator">=</span>/dev/vg_root/dmmeta --exec-opt native.cgroupdriver<span class="token operator">=</span>cgroupfsdocker <span class="token function">ps</span> <span class="token operator">|</span><span class="token function">grep</span> ba519a9f1a1 <span class="token comment" spellcheck="true">#查看docker</span>ba519a9f1a11 k8s.gcr.io/pause-amd64:3.1 <span class="token string">"/pause"</span> 2 hours ago Up 2 hours k8s_POD_feed-426565da19777e5d325f-5994dc5cff-znqmh_ocean-feed_163f99a9-1aec-11e9-a7cd-246e96ab9970_0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可能原因"><a href="#可能原因" class="headerlink" title="可能原因"></a>可能原因</h3><p>可能是内核原因<br><a href="https://stackoverflow.com/questions/34552232/cant-kill-processes-originating-in-a-docker-container" target="_blank" rel="noopener">https://stackoverflow.com/questions/34552232/cant-kill-processes-originating-in-a-docker-container</a><br>目前只有重启物理机才能解决</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pod中时区设置</title>
      <link href="/pod-timezone/"/>
      <url>/pod-timezone/</url>
      
        <content type="html"><![CDATA[<h2 id="Pod设置本地时区的两种方法"><a href="#Pod设置本地时区的两种方法" class="headerlink" title="Pod设置本地时区的两种方法"></a>Pod设置本地时区的两种方法</h2><p>我们下载的很多容器内的时区都是格林尼治时间，与北京时间差8小时，这将导致容器内的日志和文件创建时间与实际时区不符，有两种方式解决这个问题：</p><ul><li>修改镜像中的时区配置文件</li><li>将宿主机的时区配置文件/etc/localtime使用volume方式挂载到容器中</li></ul><h3 id="修改Dockfile"><a href="#修改Dockfile" class="headerlink" title="修改Dockfile"></a>修改Dockfile</h3><p>修改前</p><pre class="line-numbers language-bash"><code class="language-bash">$ docker run -d nginx:latest$ docker <span class="token function">ps</span>CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS               NAMESca7aacad1493        nginx               <span class="token string">"nginx -g 'daemon of…"</span>   About a minute ago   Up About a minute   80/tcp              inspiring_elbakyan$ docker <span class="token function">exec</span> -it inspiring_elbakyan <span class="token function">date</span>Wed Feb 13 06:51:41 UTC 2019<span class="token function">date</span>Wed Feb 13 14:51:45 CST 2019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建timezone-dockerfile</p><pre class="line-numbers language-dockerfile"><code class="language-dockerfile">FROM nginxRUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \     && echo 'Asia/Shanghai' >/etc/timezone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">$ docker build -t timezone -f timezone-dockerfile <span class="token keyword">.</span>$ docker run -d timezoneaf39a27d8c8b48b80fb9b052144bd682d75d994dba2e03a02101514304f363d0$ docker <span class="token function">exec</span> -it af39a27d8c8b <span class="token function">date</span>Wed Feb 13 15:05:14 CST 2019$ <span class="token function">date</span>Wed Feb 13 15:05:16 CST 2019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="挂载localtime文件"><a href="#挂载localtime文件" class="headerlink" title="挂载localtime文件"></a>挂载localtime文件</h3><p>第二种方式实现更简单，不需要更改镜像，只需要配置yaml文件，步骤如下：</p><p>创建测试pod，busybox-pod.yaml</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.28.3    <span class="token key atrule">command</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> sleep      <span class="token punctuation">-</span> <span class="token string">"3600"</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> host<span class="token punctuation">-</span>time        <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/localtime        <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> host<span class="token punctuation">-</span>time      <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/localtime  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试时间</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl apply -f busybox-pod.yamlpod/busybox created$ kubectl <span class="token function">exec</span> -it busybox <span class="token function">date</span>Wed Feb 13 06:16:35 UTC 2019$ <span class="token function">date</span>Wed Feb 13 14:16:39 CST 2019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将/etc/localtime挂载到pod中，配置如下:</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox<span class="token punctuation">:</span>1.28.3    <span class="token key atrule">command</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> sleep      <span class="token punctuation">-</span> <span class="token string">"3600"</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">name</span><span class="token punctuation">:</span> busybox    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> host<span class="token punctuation">-</span>time        <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/localtime        <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> host<span class="token punctuation">-</span>time      <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>        <span class="token key atrule">path</span><span class="token punctuation">:</span> /etc/localtime  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Always<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  测试时间</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl apply -f busybox-pod.yaml$ kubectl <span class="token function">exec</span> -it busybox <span class="token function">date</span>Wed Feb 13 14:17:50 CST 2019 <span class="token comment" spellcheck="true">#与当前时间一致</span>$ <span class="token function">date</span>Wed Feb 13 14:17:52 CST 2019<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>/var/log/message 归档探究</title>
      <link href="/var-log-message-logrotate/"/>
      <url>/var-log-message-logrotate/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于项目要收集/var/log/messages的日志到es中，发现messages日志按天切割，但归档的时间却不一直，于是乎查了点资料探究下</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>/var/log/messages是由journald生成的，流程如下<br><code>systemd --&gt; systemd-journald --&gt; ram DB --&gt; rsyslog -&gt; /var/log</code><br>当 systemd 启动后，systemd-journald 也会立即启动。将日志存入RAM中，当rsyslog 启动后会读取该RAM并完成筛选分类写入目录 /var/log 。所以牵扯到DB，操作就会很舒服。</p><h3 id="相关服务"><a href="#相关服务" class="headerlink" title="相关服务"></a>相关服务</h3><p>针对日志文件所需的功能，我们需要的服务于进程有：</p><ul><li>systemd-journald.service：最主要的信息收受者，由systemd提供；</li><li>rsystem.service：主要登录系统于网络等服务的信息；</li><li>logrotate：主要在进行日志的轮替功能</li></ul><p>Centos7.x使用systemd提供的journalctl日志管理，基本上，系统由systemd所管理，那所有经由systemd启动的服务（）如果在启动或结束的过程中发生了一些问题或是正常的信息），就会将该信息由systemd-journald.service以二进制的方式记录下来，之后再将信息发个rsyslog.service作进一步的记载。<br>systemd-journald.service的记录主要都放置与内存中，因此在存取方面效能比较好。也能透过journalctl以及systemctl status unit.service 来查看各个不同服务的日志。</p><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>journald配置文件<br><code>cat /etc/systemd/journald.conf</code></p><pre><code># This file is part of systemd.## systemd is free software; you can redistribute it and/or modify it# under the terms of the GNU Lesser General Public License as published by# the Free Software Foundation; either version 2.1 of the License, or# (at your option) any later version.## Entries in this file show the compile time defaults.# You can change settings by editing this file.# Defaults can be restored by simply deleting this file.## See journald.conf(5) for details.[Journal]#Storage=auto#Compress=yes#Seal=yes#SplitMode=uid#SyncIntervalSec=5m#RateLimitInterval=30s#RateLimitBurst=1000#SystemMaxUse=#SystemKeepFree=#SystemMaxFileSize=#RuntimeMaxUse=#RuntimeKeepFree=#RuntimeMaxFileSize=#MaxRetentionSec=#MaxFileSec=1month#ForwardToSyslog=yes #默认转向syslog#ForwardToKMsg=no#ForwardToConsole=no#ForwardToWall=yes#TTYPath=/dev/console#MaxLevelStore=debug#MaxLevelSyslog=debug#MaxLevelKMsg=notice#MaxLevelConsole=info#MaxLevelWall=emerg</code></pre><ol><li>目前，centos log 由 rsyslog 管理，设置文件  /var/lib/rsyslog 并兼容syslog的配置文件</li><li>其中messages文件记录系统日志，包括mail、定时任务、系统异常等（*.info;mail.none;authpriv.none;cron.none /var/log/messages）</li><li>Logrotate 实现日志切割，具体由 CRON 实现</li></ol><p>logrotate配置文件<br><code>cat /etc/cron.daily/logrotate</code></p><pre><code>#!/bin/sh/usr/sbin/logrotate -s /var/lib/logrotate/logrotate.status /etc/logrotate.confEXITVALUE=$?if [ $EXITVALUE != 0 ]; then/usr/bin/logger -t logrotate &quot;ALERT exited abnormally with [$EXITVALUE]&quot;fiexit 0实际运行时，Logrotate会调用配置文件「/etc/logrotate.conf」# see &quot;man logrotate&quot; for details# rotate log files weeklyweekly # 每月归档一次# keep 4 weeks worth of backlogsrotate 4 # 归档4个周期# create new (empty) log files after rotating old onescreate# use date as a suffix of the rotated filedateext # uncomment this if you want your log files compressed#compress # 默认不压缩# RPM packages drop log rotation information into this directoryinclude /etc/logrotate.d #包含其下配置文件# no packages own wtmp and btmp -- we&#39;ll rotate them here/var/log/wtmp {monthlycreate 0664 root utmpminsize 1Mrotate 1}/var/log/btmp {missingokmonthlycreate 0600 root utmprotate 1}# system-specific logs may be also be configured here.</code></pre><p>设置特殊文件的归档方式<br><code>cat /etc/logrotate.d/syslog</code> </p><pre><code>/var/log/cron/var/log/maillog/var/log/messages/var/log/secure/var/log/spooler{dailyrotate 4compressdelaycompress # 延迟一个周期压缩missingok # 日志丢失不报错sharedscripts # 运行postrotate脚本，作用是在所有日志都轮转后统一执行一次脚本。如果没有配置这个，那么每个日志轮转后都会执行一次脚本postrotate # 在logrotate转储之后需要执行的指令，例如重新启动 (kill -HUP) 某个服务！必须独立成行/bin/kill -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || trueendscript}</code></pre><p>messages中日志生成时间大多是晚上3点多，这是由cron控制的<br><code>cat /etc/anacrontab</code></p><pre><code># /etc/anacrontab: configuration file for anacron# See anacron(8) and anacrontab(5) for details.SHELL=/bin/shPATH=/sbin:/bin:/usr/sbin:/usr/binMAILTO=root# the maximal random delay added to the base delay of the jobsRANDOM_DELAY=45 # 随机延迟最大时间# the jobs will be started during the following hours onlySTART_HOURS_RANGE=3-22 # 3点到22点执行#period in days delay in minutes job-identifier command1 5 cron.daily nice run-parts /etc/cron.daily # 第一天执行，延迟5分钟7 25 cron.weekly nice run-parts /etc/cron.weekly@monthly 45 cron.monthly nice run-parts /etc/cron.monthly日志生成时间在03:05~03:50 随机延迟时间 5~5+45</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s serviceaccount挂载pod问题</title>
      <link href="/k8s-serviceaccount-mount-failed/"/>
      <url>/k8s-serviceaccount-mount-failed/</url>
      
        <content type="html"><![CDATA[<h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>用户创建role失败，报错:</p><pre class="line-numbers language-bash"><code class="language-bash">$ kubectl create -f role.yml Error from server <span class="token punctuation">(</span>Forbidden<span class="token punctuation">)</span>: error when creating <span class="token string">"role.yml"</span><span class="token keyword">:</span> roles.rbac.authorization.k8s.io <span class="token string">"pod-modifier"</span> is forbidden: attempt to grant extra privileges: <span class="token punctuation">[</span>PolicyRule<span class="token punctuation">{</span>APIGroups:<span class="token punctuation">[</span><span class="token string">""</span><span class="token punctuation">]</span>, Resources:<span class="token punctuation">[</span><span class="token string">"pods"</span><span class="token punctuation">]</span>, Verbs:<span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span> user<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">{</span>test <span class="token function">test</span> <span class="token punctuation">[</span>system:authenticated<span class="token punctuation">]</span> map<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> ownerrules<span class="token operator">=</span><span class="token punctuation">[</span>PolicyRule<span class="token punctuation">{</span>APIGroups:<span class="token punctuation">[</span><span class="token string">"authorization.k8s.io"</span><span class="token punctuation">]</span>, Resources:<span class="token punctuation">[</span><span class="token string">"selfsubjectaccessreviews"</span> <span class="token string">"selfsubjectrulesreviews"</span><span class="token punctuation">]</span>, Verbs:<span class="token punctuation">[</span><span class="token string">"create"</span><span class="token punctuation">]</span><span class="token punctuation">}</span> PolicyRule<span class="token punctuation">{</span>NonResourceURLs:<span class="token punctuation">[</span><span class="token string">"/api"</span> <span class="token string">"/api/*"</span> <span class="token string">"/apis"</span> <span class="token string">"/apis/*"</span> <span class="token string">"/healthz"</span> <span class="token string">"/openapi"</span> <span class="token string">"/openapi/*"</span> <span class="token string">"/swagger-2.0.0.pb-v1"</span> <span class="token string">"/swagger.json"</span> <span class="token string">"/swaggerapi"</span> <span class="token string">"/swaggerapi/*"</span> <span class="token string">"/version"</span> <span class="token string">"/version/"</span><span class="token punctuation">]</span>, Verbs:<span class="token punctuation">[</span><span class="token string">"get"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span> ruleResolutionErrors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>错误显示<code>user=&amp;{test test [system:authenticated] map[]}</code>这个user没有权限，在<code>~/.kube/config</code>添加admin用户</p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>创建serviceaccount后，没有挂载到pod中</p><h3 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h3><p>需要在apiserver配置中开启，添加<code>--admission-control=ServiceAccount --authorization-mode=RBAC</code>，重启</p><pre class="line-numbers language-bash"><code class="language-bash">$ systemctl daemon-reload$ systemctl restart kube-apiserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>添加配置后,直接创建pod能够加载sa与token，创建deployment则不行</p><h3 id="解决-2"><a href="#解决-2" class="headerlink" title="解决"></a>解决</h3><p>kubeconfig配置有问题，确认其中user的配置</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apline 容器中执行shell脚本报错 executable file not found</title>
      <link href="/apline-shell-executable-file-not-found/"/>
      <url>/apline-shell-executable-file-not-found/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>今天在创建java镜像时，使用了(openjdk:8-jdk-alpine)[<a href="https://hub.docker.com/_/openjdk]，启动容器后需要运行一java脚本，直接执行" target="_blank" rel="noopener">https://hub.docker.com/_/openjdk]，启动容器后需要运行一java脚本，直接执行</a><br><code>./test.sh</code>报错<em>sh:.sh test.sh: not found</em></p><p>网上有说由于权限文件不能执行，<code>chmod +x test.sh</code>，仍然报错</p><p>在k8s pod中部署，describe报错<br><em>Error: failed to start container “docker-registry”: Error response from daemon: OCI runtime create failed: container_linux.go:344: starting container process caused “exec: \”sh +x start-registry.sh test\”: executable file not found in $PATH”: unknown</em></p><p>若使用<code>sh +x test.sh</code>则可运行， pod中仍然报错</p><h2 id="探究"><a href="#探究" class="headerlink" title="探究"></a>探究</h2><p>直到看到stackoverflow上有同样的问题(docker alpine /bin/sh script.sh not found)[<a href="https://stackoverflow.com/questions/45860784/bin-bash-command-not-found-in-alpine-docker#]" target="_blank" rel="noopener">https://stackoverflow.com/questions/45860784/bin-bash-command-not-found-in-alpine-docker#]</a>,<br>说与shell脚本中的执行器有关，test.sh的执行器是<code>#!/bin/bash</code>，而alpine默认的是<code>/bin/ash, /bin/sh</code>没有bash，所以执行会报错</p><p>问题找到，至于bash与sh的区别，网上有不少解释<br>alpine中sh只是一个符号链接<br><code>sh -&gt; /bin/busybox</code></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>将shell脚本中<code>#!/bin/bash</code>改为<code>/bin/sh</code></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>镜像中添加bash</p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">FROM alpine:3.9RUN apk update && \    apk add --no-cache bash && \    rm -rf /var/cache/apk/* /tmp/* /var/tmp/* $HOME/.cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deployment升级的几种方式</title>
      <link href="/k8s-deployment-upgrade-kinds/"/>
      <url>/k8s-deployment-upgrade-kinds/</url>
      
        <content type="html"><![CDATA[<p>对于已经运行的deploy，有以下几种升级方式</p><h3 id="kubectl升级方式"><a href="#kubectl升级方式" class="headerlink" title="kubectl升级方式"></a>kubectl升级方式</h3><pre class="line-numbers language-bash"><code class="language-bash">kubectl <span class="token keyword">set</span> image deployments/busy busy<span class="token operator">=</span>busybox:1.29kubectl apply -f rolling-update-test.yamlkubectl edit deployment/rolling-update-testkubectl scale --replicas<span class="token operator">=</span>3 rs/foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="kubectl回滚"><a href="#kubectl回滚" class="headerlink" title="kubectl回滚"></a>kubectl回滚</h3><p>查看升级<br><code>kubectl rollout status deployment/rolling-update-test</code><br>回滚</p><pre class="line-numbers language-bash"><code class="language-bash">kubectl rollout undo deployments/busykubectl rollout status deployments/busy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apline镜像添加时区与字符设置</title>
      <link href="/apline-timezone/"/>
      <url>/apline-timezone/</url>
      
        <content type="html"><![CDATA[<ol><li><p>添加时区<br>设置<code>TZ</code>与安装tzdata</p></li><li><p>添加work用户<br><code>addgroup -S work &amp;&amp; adduser -S -G work work -s /bin/sh</code></p></li><li><p>设置字符格式<br>设置环境变量<code>LANG</code>与<code>LC_ALL</code></p></li></ol><p>Dockerfile如下：</p><pre><code>FROM alpineENV TZ=Asia/Shanghai \    LANG=en_US.UTF-8  \    LC_ALL=en_US.UTF8RUN apk update &amp;&amp; \    apk add --no-cache tzdata &amp;&amp; \    addgroup -S work &amp;&amp; adduser -S -G work work -s /bin/bash &amp;&amp; \    rm -rf /var/cache/apk/* /tmp/* /var/tmp/* $HOME/.cache</code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker多阶段构建</title>
      <link href="/multi-stage-dockerfile/"/>
      <url>/multi-stage-dockerfile/</url>
      
        <content type="html"><![CDATA[<h2 id="之前的做法"><a href="#之前的做法" class="headerlink" title="之前的做法"></a>之前的做法</h2><p>在 Docker 17.05 版本之前，我们构建 Docker 镜像时，通常会采用两种方式：</p><h3 id="全部放入一个-Dockerfile"><a href="#全部放入一个-Dockerfile" class="headerlink" title="全部放入一个 Dockerfile"></a>全部放入一个 Dockerfile</h3><p>一种方式是将所有的构建过程编包含在一个  Dockerfile  中，包括项目及其依赖库的编译、测试、打包等流程，这里可能会带来的一些问题：</p><ul><li>Dockerfile  特别长，可维护性降低</li><li>镜像层次多，镜像体积较大，部署时间变长</li><li>源代码存在泄露的风险</li></ul><p>例如编写  app.go  文件，该程序输出  Hello World! </p><pre class="line-numbers language-golang"><code class="language-golang">package main  import "fmt"  func main(){      fmt.Printf("Hello World!");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写  Dockerfile.one  文件</p><pre><code>FROM golang:1.9-alpineRUN apk --no-cache add git ca-certificatesWORKDIR /go/src/github.com/go/helloworld/COPY app.go .RUN go get -d -v github.com/go-sql-driver/mysql \  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app . \  &amp;&amp; cp /go/src/github.com/go/helloworld/app /rootWORKDIR /root/CMD [&quot;./app&quot;]</code></pre><p>构建镜像</p><p><code>$ docker build -t go/helloworld:1 -f Dockerfile.one .</code></p><h3 id="分散到多个-Dockerfile"><a href="#分散到多个-Dockerfile" class="headerlink" title="分散到多个 Dockerfile"></a>分散到多个 Dockerfile</h3><p>另一种方式，就是我们事先在一个  Dockerfile  将项目及其依赖库编译测试打包好后，再将其拷贝到运行环境中，这种方式需要我们编写两个  Dockerfile  和一些编译脚本才能将其两个阶段自动整合起来，这种方式虽然可以很好地规避第一种方式存在的风险，但明显部署过程较复杂。</p><p>例如，编写  Dockerfile.build  文件</p><pre><code>FROM golang:1.9-alpineRUN apk --no-cache add gitWORKDIR /go/src/github.com/go/helloworldCOPY app.go .RUN go get -d -v github.com/go-sql-driver/mysql \  &amp;&amp; CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .</code></pre><p>编写  Dockerfile.copy  文件</p><pre><code>FROM alpine:latestRUN apk --no-cache add ca-certificatesWORKDIR /root/COPY app .CMD [&quot;./app&quot;]</code></pre><p>新建  build.sh </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token keyword">echo</span> Building go/helloworld:builddocker build -t go/helloworld:build <span class="token keyword">.</span> -f Dockerfile.builddocker create --name extract go/helloworld:builddocker <span class="token function">cp</span> extract:/go/src/github.com/go/helloworld/app ./appdocker <span class="token function">rm</span> -f extract<span class="token keyword">echo</span> Building go/helloworld:2docker build --no-cache -t go/helloworld:2 <span class="token keyword">.</span> -f Dockerfile.copy<span class="token function">rm</span> ./app<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在运行脚本即可构建镜像</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">chmod</span> +x build.sh$ ./build.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对比两种方式生成的镜像大小</p><pre class="line-numbers language-bash"><code class="language-bash">$ docker image <span class="token function">ls</span>REPOSITORY      TAG    IMAGE ID        CREATED         SIZEgo/helloworld   2      f7cf3465432c    22 seconds ago  6.47MBgo/helloworld   1      f55d3e16affc    2 minutes ago   295MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用多阶段构建"><a href="#使用多阶段构建" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h2><p>为解决以上问题，Docker v17.05 开始支持多阶段构建 ( multistage builds )。使用多阶段构建我们就可以很容易解决前面提到的问题，并且只需要编写一个  Dockerfile ：</p><p>例如，编写  Dockerfile  文件</p><pre><code>FROM golang:1.9-alpine as builderRUN apk --no-cache add gitWORKDIR /go/src/github.com/go/helloworld/RUN go get -d -v github.com/go-sql-driver/mysqlCOPY app.go .RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o app .FROM alpine:latest as prodRUN apk --no-cache add ca-certificatesWORKDIR /root/COPY --from=0 /go/src/github.com/go/helloworld/app .CMD [&quot;./app&quot;]</code></pre><p>构建镜像</p><p><code>$ docker build -t go/helloworld:3 .</code></p><p>对比三个镜像大小</p><pre class="line-numbers language-bash"><code class="language-bash">$ docker image <span class="token function">ls</span>REPOSITORY        TAG   IMAGE ID         CREATED            SIZEgo/helloworld     3     d6911ed9c846     7 seconds ago      6.47MBgo/helloworld     2     f7cf3465432c     22 seconds ago     6.47MBgo/helloworld     1     f55d3e16affc     2 minutes ago      295MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显使用多阶段构建的镜像体积小，同时也完美解决了上边提到的问题。</p><p>只构建某一阶段的镜像<br>我们可以使用  as  来为某一阶段命名，例如</p><p><code>FROM golang:1.9-alpine as builder</code></p><p>例如当我们只想构建  builder  阶段的镜像时，我们可以在使用  docker build  命令时加上  –target  参数即可</p><p><code>$ docker build --target builder -t username/imagename:tag .</code></p><p>构建时从其他镜像复制文件<br>上面例子中我们使用  COPY –from=0 /go/src/github.com/go/helloworld/app .  从上一阶段的镜像中复制文件，我们也可以复制任意镜像中的文件。</p><p><code>$ COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf</code></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubectl命令行自动补全</title>
      <link href="/kubectl-auto-completion/"/>
      <url>/kubectl-auto-completion/</url>
      
        <content type="html"><![CDATA[<pre><code>source &lt;(kubectl completion bash)echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</code></pre>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo建立个人blog</title>
      <link href="/hexo-blog/"/>
      <url>/hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>学到的分享出来才更有意义，春节前事不多使用hexo建立了个人blog，记录下。</p><h2 id="gitlab-pages"><a href="#gitlab-pages" class="headerlink" title="gitlab pages"></a>gitlab pages</h2><p>创建个以<code>your_github_name.github.io</code>为名称的仓库，创建个<a href="https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/" target="_blank" rel="noopener">github page</a></p><h2 id="hexo建站"><a href="#hexo建站" class="headerlink" title="hexo建站"></a>hexo建站</h2><h3 id="创建hexo分支"><a href="#创建hexo分支" class="headerlink" title="创建hexo分支"></a>创建hexo分支</h3><p>为<code>your_github_name.github.io</code>创建hexo分支，存放<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo</a>配置，避免维护两个仓库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone git@<span class="token punctuation">..</span>.your_github_name.github.io<span class="token function">cd</span> your_github_name.github.io<span class="token function">git</span> checkout --orphan hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>hexo初始化<br><code>hexo init</code></p><p>安装需要组件<br><code>sudo npm install</code></p><p>根据hexo官网配置<code>_config.yml</code>文件</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>使用<a href="https://molunerfinn.com/hexo-theme-melody-doc/#/zh-Hans/quick-start" target="_blank" rel="noopener">melody主题</a>，参考官网自定义相关配置</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-bash"><code class="language-bash">hexo g <span class="token comment" spellcheck="true">#生成静态文件</span>hexo n <span class="token string">"name"</span> <span class="token comment" spellcheck="true">#创建blo</span>hexo server <span class="token comment" spellcheck="true">#预览</span>hexo deploy <span class="token comment" spellcheck="true">#推送到github</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/" target="_blank" rel="noopener">https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/</a></li><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></li><li><a href="https://molunerfinn.com/hexo-theme-melody-doc/#/zh-Hans/quick-star" target="_blank" rel="noopener">https://molunerfinn.com/hexo-theme-melody-doc/#/zh-Hans/quick-star</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
